Index: src/app/oauth/components/apps/new-client/client.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { BatchOperationsService } from '../../../../core/services/batch-operations.service';\nimport { ConfigService } from '../../../../core/services/config.service';\nimport { DataResolverService } from '../../../../core/services/data-resolver.service';\nimport { ElementHandlerService } from '../../../../core/services/element-handler.service';\nimport { EndpointsService } from '../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../core/services/modal.service';\nimport { NavigationService } from '../../../../core/services/navigation.service';\nimport { RequestBuilder } from '../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../core/services/transaction.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'oauth-client',\n  templateUrl: 'client.component.html'\n})\nexport class OAuthClientComponent implements OnInit, OnDestroy {\n\n  @ViewChild('logoInput') logoInput;\n\n  result: Array<any> = [];\n  url: string;\n  clientName: string = '';\n  hasError: boolean = false;\n  paramKey: string = 'oauth-client';\n  panelOptions: any = {};\n  showUserAuthenticator: boolean = false;\n  isTemplatizedDCREnabled: boolean;\n  isClientAuthenticationVisible: boolean = false;\n  capabilitiesSelectedCount: number = 0;\n  elementsBusy$: Subscription;\n  errorMessage: string;\n  newScopeName: string;\n  duplicateClientName: string;\n  isCreateScopeModalHidden: boolean = true;\n  isDuplicateClientModalHidden: boolean = true;\n  isRequestObjectEnabled: boolean;\n  isBusyCounter: number = 0;\n  selectedFile: any = {};\n  error: any;\n  fileDragActiveCounter: number = 0;\n  allowedLogoFileExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg'];\n  capabilities: any = {};\n  authenticationProfile: string;\n  isOpenIdConnectEnabled: boolean;\n  isCapabilitiesModalHidden: boolean = true;\n  capabilityErrorMessage: string;\n  currentCapabilityModalStep: number;\n  capabilityModalResult: any;\n\n  ngOnInit(): any {\n    this.elementsBusy$ = this.sharedService.getElementsBusy()\n      .distinctUntilChanged()\n      .delay(0)\n      .subscribe(isBusy => {\n        if (isBusy) {\n          this.isBusyCounter++;\n        }\n        else {\n          this.isBusyCounter--;\n        }\n      });\n    this.url = this.endpoints.getOAuthClientsUrl();\n\n    this.clientName = this.sharedService.getSelectedParam(this.paramKey);\n    if (this.clientName && this.clientName.length > 0) {\n      this.url = this.url + '{' + this.clientName + '}/';\n      this.loadClientData();\n      this.isTemplatizedDynamicClientRegistrationEnabled();\n      this.checkIsRequestObjectEnabled();\n      this.checkIsOpenIdConnectEnabled();\n    }\n    else {\n      this.router.navigateByUrl('/profile/oauth/clients');\n    }\n  }\n\n  constructor(private Api: HttpApiService,\n              private Transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private dataResolver: DataResolverService,\n              private sharedService: SharedDataService,\n              private configService: ConfigService,\n              private elementHandler: ElementHandlerService,\n              private modalService: ModalService,\n              private batchService: BatchOperationsService,\n              private sanitizer: DomSanitizer,\n              private router: Router) {\n\n  }\n\n  ngOnDestroy() {\n    this.sharedService.resetElementsBusyCounter();\n    this.isBusyCounter = 0;\n    this.elementsBusy$.unsubscribe();\n  }\n\n  loadClientData() {\n    this.isBusyCounter++;\n    Observable.forkJoin(\n      this.configService.getOAuthClientConfig(),\n      this.configService.getOAuthCapabilityIconsConfig()\n    )\n      .subscribe((configs: Array<any>) => {\n          this.Transaction.getReadTransaction()\n            .then(transactionId => {\n\n              this.Api.postRequest(RequestBuilder.withGetValue(this.endpoints.getAuthenticationProfileLeafUrl(), transactionId))\n                .subscribe(authenticationProfile => {\n                    this.authenticationProfile = authenticationProfile.data.value;\n\n                    Observable.forkJoin(\n                      this.Api.postRequest(RequestBuilder.withExists(this.url, transactionId)),\n                      this.Api.postRequest(RequestBuilder.withSchema(this.url, transactionId, 7))\n                    )\n                      .finally(() => this.isBusyCounter--)\n                      .subscribe(responses => {\n                          if (responses[0].code !== ResponseCode.OK || responses[0].data.value === false) {\n                            this.sharedService.setSelectedParam(this.paramKey, null);\n                            this.router.navigateByUrl('/profile/oauth/clients');\n                          }\n                          else {\n                            let parsedData = this.dataResolver.parseData(responses[1].data.result.children[0].children, configs[0], this.url);\n                            parsedData['disallowed-proof-key-challenge-methods'].items = parsedData['disallowed-proof-key-challenge-methods'].type.union[0].enumeration.map(item => {\n                              return item.label;\n                            });\n                            parsedData['allowed-authenticators'].leafrefTarget = parsedData['allowed-authenticators'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n                            parsedData['authenticator-filters'].leafrefTarget = parsedData['authenticator-filters'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n                            parsedData['authenticate-user-by'].xpath_expr = parsedData['authenticate-user-by'].xpath_expr.replace('%profileId', this.sharedService.getProfile().id);\n                            parsedData['authenticate-user-by'].xpath_expr = parsedData['authenticate-user-by'].xpath_expr.replace('%profileType', this.sharedService.getProfile().type);\n                            parsedData['authenticate-user-by'].mandatory = true;\n                            parsedData['authenticate-client-by'].xpath_expr = parsedData['authenticate-client-by'].xpath_expr.replace('%profileId', this.sharedService.getProfile().id);\n                            parsedData['authenticate-client-by'].xpath_expr = parsedData['authenticate-client-by'].xpath_expr.replace('%profileType', this.sharedService.getProfile().type);\n                            parsedData['authenticate-client-by'].mandatory = true;\n\n                            const authenticationMethodItems = ['users-must-authenticate', 'clients-must-authenticate'];\n                            parsedData['authentication-method'] = {\n                              name: 'authentication-method',\n                              displayName: 'Authentication Method',\n                              items: authenticationMethodItems,\n                              mandatory: true\n                            };\n                            parsedData['verifier'].items = parsedData['verifier'].children.map(child => child.name);\n                            parsedData['verifier'].mandatory = true;\n                            parsedData['secret'].mandatory = true;\n                            parsedData['asymmetric-key'].mandatory = true;\n                            parsedData['http-client'].isFacility = true;\n                            parsedData['http-client'].facilityType = 'httpClients';\n                            parsedData['refresh-token-ttl'].info = 'The Time to Live for a Refresh token.';\n                            parsedData['redirect-uris'].mandatory = true;\n\n                            this.loadCapabilities(parsedData, configs[1], transactionId);\n\n                            this.isBusyCounter++;\n                            Observable.forkJoin(\n                              this.Api.postRequest(RequestBuilder.withSelectedCase(\n                                parsedData['dynamic-client-registration-template'].path, parsedData['authentication-method'].name, transactionId)),\n                              this.Api.postRequest(RequestBuilder.withGetEnvironment()),\n                              this.Api.postRequest(RequestBuilder.withGetValue(parsedData['logo'].path, transactionId))\n                            )\n                              .finally(() => {\n                                this.isUserAutenticatorExists(null);\n                                this.elementHandler.markFields(parsedData);\n                                this.result = parsedData;\n                                this.isBusyCounter--;\n                              })\n                              .subscribe(responses => {\n                                if (responses[0].code === ResponseCode.OK) {\n                                  parsedData['authentication-method'].value = responses[0].data.value === 'authenticate-user-by' ?\n                                    authenticationMethodItems[0] : responses[0].data.value === 'authenticate-client-by' ?\n                                      authenticationMethodItems[1] : null;\n                                }\n                                if (responses[1].code === ResponseCode.OK) {\n                                  parsedData['template-area'].items = responses[1].data.templateAreas || [];\n                                }\n                                if (responses[2].code === ResponseCode.OK) {\n                                  parsedData['logo'].value = responses[2].data.value;\n                                }\n                              });\n                          }\n                        },\n                        error => console.log(error));\n                  },\n                  error => console.log(error));\n            });\n        },\n        error => console.log(error));\n  }\n\n  @HostListener('dragenter', ['$event'])\n  public onDragEnter(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.fileDragActiveCounter++;\n  }\n\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.fileDragActiveCounter--;\n  }\n\n  @HostListener('dragover', ['$event'])\n  public onDragOver(event) {\n    if (event) {\n      event.preventDefault();\n    }\n  }\n\n  @HostListener('drop', ['$event'])\n  public onDrop(event) {\n    if (event) {\n      event.preventDefault();\n      this.fileDragActiveCounter = 0;\n    }\n  }\n\n  loadCapabilities(parsedData: any, icons: any, transactionId: number) {\n    const capabilitiesIncluded = ['code', 'implicit', 'resource-owner-password-credentials', 'client-credentials',\n      'introspection', 'assisted-token', 'device-authorization', 'token-exchange'];\n\n    capabilitiesIncluded.forEach(capability => {\n      if (parsedData[capability]) {\n        parsedData[capability].icon = icons[capability] || 'ion-cube';\n        this.capabilities[capability] = parsedData[capability];\n      }\n    });\n\n    const batchId = this.batchService.createBatch();\n    Object.keys(this.capabilities).forEach(key => {\n      this.batchService.addToBatch(batchId, RequestBuilder.withGetValue(this.capabilities[key].path, transactionId))\n        .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.capabilities[key].value = response.data.value;\n              if (response.data.value) {\n                this.capabilitiesSelectedCount++;\n              }\n            }\n          },\n          error => console.log(error));\n    });\n    this.batchService.initiateRequest(batchId);\n  }\n\n  sanitizeUrl(value: string) {\n    return this.sanitizer.bypassSecurityTrustUrl(value);\n  }\n\n  enableUserAuthenticator(item, value) {\n    if (item) {\n      this.result[item].value = value;\n    }\n    let authenticator;\n    if (this.result['code'].value || this.result['implicit'].value ||\n      this.result['assisted-token'].value || this.result['device-authorization'].value) {\n      authenticator = true;\n    } else {\n      authenticator = false;\n    }\n    this.isUserAutenticatorExists(authenticator);\n  }\n\n  isUserAutenticatorExists(authenticator: any) {\n    this.isBusyCounter++;\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.url + 'user-authentication', transactionId))\n          .finally(() => this.isBusyCounter--)\n          .subscribe(response => {\n            if (authenticator == null) {\n              this.showUserAuthenticator = response.data.value;\n            } else {\n              if (authenticator && response.data.value) {\n                this.showUserAuthenticator = true;\n              } else if (authenticator && !response.data.value) {\n                this.createUserAuthenticator();\n              } else if (!authenticator && response.data.value) {\n                this.deleteUserAuthenticator();\n              } else if (!authenticator && !response.data.value) {\n                this.showUserAuthenticator = false;\n              }\n            }\n          });\n      });\n  }\n\n  createUserAuthenticator() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withCreate(this.url + 'user-authentication', transactionId))\n          .subscribe(response => {\n            if (response.code != ResponseCode.OK) {\n              this.showUserAuthenticator = false;\n            } else {\n              this.loadAuthenticatorsData();\n            }\n          });\n      });\n  }\n\n  deleteUserAuthenticator() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withDelete(this.url + 'user-authentication', transactionId))\n          .subscribe(response => {\n            if (response.code == ResponseCode.OK) {\n              this.showUserAuthenticator = false;\n            } else {\n              this.showUserAuthenticator = true;\n            }\n          });\n      });\n  }\n\n  loadAuthenticatorsData() {\n    this.isBusyCounter++;\n    this.configService.getOAuthClientConfig().subscribe(config => {\n      this.Transaction.getReadTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withSchema(this.url + 'user-authentication', transactionId, 3))\n            .finally(() => this.isBusyCounter--)\n            .subscribe(response => {\n              let config1 = config.filter(item => item.name == 'user-authentication')[0].children;\n              let result = this.dataResolver.parseData(response.data.result.children[0].children, config1, this.url + 'user-authentication/');\n              result['allowed-authenticators'].leafrefTarget = result['allowed-authenticators'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n              result['authenticator-filters'].leafrefTarget = result['authenticator-filters'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n\n              for (let key in result) {\n                if (result.hasOwnProperty(key)) {\n                  this.result[key] = result[key];\n                }\n              }\n              this.showUserAuthenticator = true;\n\n            });\n        });\n    });\n  }\n\n  isTemplatizedDynamicClientRegistrationEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getTemplatizedDynamicClientRegistrationUrl(), transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.isTemplatizedDCREnabled = response.data.value;\n            }\n          });\n      });\n  }\n\n  checkIsRequestObjectEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getOauthProfileUrl() + 'request-object', transactionId))\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.isRequestObjectEnabled = response.data.value;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  checkIsOpenIdConnectEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getOauthProfileUrl() + 'openid-connect', transactionId))\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.isOpenIdConnectEnabled = response.data.value;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  setIsSecretVisible() {\n    // secret is only available when certain capabilities are enabled\n    // (i.e. (`code`, `resource-owner-password-credentials`,and dynamic-client-registration-template is not enabled) or\n    // (`client-credentials`, `introspection` or `token-exchange`))\n    this.isClientAuthenticationVisible = (\n      (this.result['code'].value ||\n        this.result['resource-owner-password-credentials'].value) &&\n      !this.result['dynamic-client-registration-template'].value) ||\n      (this.result['client-credentials'].value ||\n        this.result['token-exchange'].value ||\n        this.result['introspection'].value);\n\n    this.result['secret'].value = this.isClientAuthenticationVisible ? this.result['secret'].value : null;\n  }\n\n  setCapabilitiesSelectedCount(value: boolean, isInitializing?: boolean) {\n    // if (value) {\n    //   this.capabilitiesSelectedCount++;\n    // }\n    // else if (!isInitializing) {\n    //   this.capabilitiesSelectedCount--;\n    // }\n  }\n\n  isRequiredDCRCapabilitiesSelected(): boolean {\n    return (this.result['code'] && this.result['code'].value) ||\n      (this.result['implicit'] && this.result['implicit'].value) ||\n      (this.result['assisted-token'] && this.result['assisted-token'].value) ||\n      (this.result['resource-owner-password-credentials'] && this.result['resource-owner-password-credentials'].value) ||\n      (this.result['device-authorization'] && this.result['device-authorization'].value);\n  }\n\n  onDeviceAuthorizationChanged(value: boolean) {\n    if (value && this.isTemplatizedDCREnabled && !this.result['dynamic-client-registration-template'].value) {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withCreate(this.result['dynamic-client-registration-template'].path, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.result['dynamic-client-registration-template'].value = true;\n                  this.result['authentication-method'].value = this.result['authentication-method'].items[1];\n                  this.result['dynamic-client-registration-template'] = Object.assign({}, this.result['dynamic-client-registration-template']);\n                  this.result['authentication-method'] = Object.assign({}, this.result['authentication-method']);\n                }\n              },\n              error => console.log(error));\n        });\n    }\n  }\n\n  createNewScope() {\n    this.errorMessage = null;\n    if (this.newScopeName.match(/\\s/g)) {\n      this.errorMessage = 'Scope name cannot contain space.';\n    }\n    else {\n      const path = `${this.endpoints.getOAuthScopesUrl()}{${this.newScopeName}}`;\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withCreate(path, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedService.incrementChangeCount(path);\n                  this.Api.postRequest(RequestBuilder.withSetValue(this.newScopeName, this.result['scope'].path, transactionId))\n                    .subscribe(response => {\n                        if (response.code === ResponseCode.OK) {\n                          this.sharedService.incrementChangeCount(this.result['scope'].path);\n\n                          // doing this to force reload result['scope'] element\n                          this.result['scope'].items = null;\n                          this.result['scope'].value = null;\n                          const temp = Object.assign({}, this.result['scope']);\n                          this.result['scope'] = null;\n                          // TODO: remove this timeout since element-single-select sets initData to [] if data.value is not present\n                          setTimeout(() => {\n                            this.result['scope'] = temp;\n                          }, 10);\n\n                          this.closeCreateScopeModal();\n                        }\n                        else {\n                          this.errorMessage = response;\n                        }\n                      },\n                      error => console.log(error));\n                }\n                else {\n                  this.errorMessage = response;\n                }\n              },\n              error => console.log(error));\n        });\n    }\n  }\n\n  openCreateScopeModal() {\n    this.isCreateScopeModalHidden = false;\n    this.modalService.addOpenedModal('CreateScopeModal', this, 'closeCreateScopeModal');\n    SharedDataService.lockScroll();\n  }\n\n  closeCreateScopeModal() {\n    this.newScopeName = null;\n    this.isCreateScopeModalHidden = true;\n    this.modalService.removeOpenedModal('CreateScopeModal');\n    SharedDataService.unlockScroll();\n  }\n\n  onDuplicateClient() {\n    this.isDuplicateClientModalHidden = false;\n    this.modalService.addOpenedModal('DuplicateClientModal', this, 'closeDuplicateClientModal');\n    SharedDataService.lockScroll();\n  }\n\n  closeDuplicateClientModal() {\n    this.errorMessage = null;\n    this.duplicateClientName = '';\n    this.isDuplicateClientModalHidden = true;\n    this.modalService.removeOpenedModal('DuplicateClientModal');\n    SharedDataService.unlockScroll();\n  }\n\n  duplicateClient() {\n    this.errorMessage = null;\n    if (this.duplicateClientName.match(/\\s/g)) {\n      this.errorMessage = 'Name cannot contain space.';\n    }\n    else {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          const destinationPath = `${this.endpoints.getOAuthClientsUrl()}{${this.duplicateClientName}}/`;\n          this.Api.postRequest(RequestBuilder.withDuplicate(this.url, destinationPath, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedService.incrementChangeCount(destinationPath);\n                  this.sharedService.setSelectedParam(this.paramKey, this.duplicateClientName);\n                  this.closeDuplicateClientModal();\n                  NavigationService.reload(this.router);\n                }\n                else {\n                  this.errorMessage = response;\n                }\n              },\n              error => console.log(error));\n        });\n    }\n  }\n\n  onFileDrop(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.getFileData(event.dataTransfer.files, true);\n    this.fileDragActiveCounter = 0;\n  }\n\n  getFileData(fileList: Array<File>, isFileDnd?: boolean) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      const ext = file.name.slice((file.name.lastIndexOf('.') - 1 >>> 0) + 1); // extracting . with the extension as well\n      if (this.allowedLogoFileExtensions.indexOf(ext) > -1) {\n        this.selectedFile.name = file.name;\n        this.selectedFile.ext = ext;\n        let fileReader = new FileReader();\n        fileReader.onload = (event: any) => {\n          this.result['logo'].value = event.target.result;\n          this.updateLogo();\n        };\n        fileReader.readAsDataURL(file);\n      }\n      else {\n        this.error = `Only files with following extensions are allowed: ${this.allowedLogoFileExtensions.join(', ')}.`;\n      }\n    }\n    else {\n      this.error = 'Multiple files are not allowed.';\n    }\n    if (isFileDnd) {\n      this.logoInput.nativeElement.value = '';\n    }\n  }\n\n  updateLogo() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withSetValue(this.result['logo'].value, this.result['logo'].path, transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.sharedService.incrementChangeCount(this.result['logo'].path);\n            }\n            else {\n              this.error = response;\n              this.result['logo'].value = this.result['logo'].default;\n            }\n          });\n      });\n  }\n\n  removeLogo() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withDelete(this.result['logo'].path, transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.sharedService.incrementChangeCount(this.result['logo'].path);\n              this.result['logo'].value = null;\n            }\n            else {\n              this.error = response;\n            }\n          });\n      });\n  }\n\n  removeCapability(name: string) {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withSetValue(false, this.capabilities[name].path, transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.capabilities[name].value = false;\n              this.sharedService.incrementChangeCount(this.capabilities[name].path);\n            }\n          },\n            error => console.log(error));\n      });\n  }\n\n  openCapabilitiesModal() {\n    Object.keys(this.capabilities).forEach(key => {\n      this.capabilities[key].isSelected = this.capabilities[key].value;\n    });\n    this.currentCapabilityModalStep = 1;\n    this.capabilityModalResult = {};\n    this.isCapabilitiesModalHidden = false;\n    this.modalService.addOpenedModal('CapabilitiesModal', this, 'closeCapabilitiesModal');\n    SharedDataService.lockScroll();\n  }\n\n  closeCapabilitiesModal() {\n    this.capabilityErrorMessage = null;\n    this.setIsSecretVisible();\n    this.isCapabilitiesModalHidden = true;\n    this.modalService.removeOpenedModal('CapabilitiesModal');\n    SharedDataService.unlockScroll();\n  }\n\n  updateAllCapabilities(property: string, value: any) {\n    Object.keys(this.capabilities).forEach(key => {\n      this.capabilities[key][property] = value;\n    });\n  }\n\n  onNext() {\n    this.capabilityErrorMessage = null;\n    switch (this.currentCapabilityModalStep) {\n      case 1:\n        this.currentCapabilityModalStep++;\n        this.checkStep2Elements();\n        break;\n      case 2:\n        if (this.capabilityModalResult['allowed-origins'] && this.capabilityModalResult['allowed-origins'].value.length === 0) {\n          this.capabilityErrorMessage = 'Please add at least one allowed origin.';\n        }\n        else if (this.capabilityModalResult['redirect-uris'] && this.capabilityModalResult['redirect-uris'].value.length === 0) {\n          this.capabilityErrorMessage = 'Please add at least one redirect URI.';\n        }\n        else {\n          this.currentCapabilityModalStep++;\n          this.checkStep3Elements();\n        }\n        break;\n      case 3:\n        if (!this.capabilityModalResult['verifier'].value) {\n          this.capabilityErrorMessage = 'Please select an authentication method.';\n        }\n        else if (this.capabilityModalResult['verifier'].value === 'secret' && !this.capabilityModalResult['secret'].value) {\n          this.capabilityErrorMessage = 'Please enter a secret.';\n        }\n        else if (this.capabilityModalResult['verifier'].value === 'asymmetric-key' && !this.capabilityModalResult['asymmetric-key'].value) {\n          this.capabilityErrorMessage = 'Please select an asymmetric key.';\n        }\n        else {\n          this.setCapabilityValues();\n        }\n        break;\n    }\n  }\n\n  onBack() {\n    this.capabilityErrorMessage = null;\n    switch (this.currentCapabilityModalStep) {\n      case 2:\n        this.currentCapabilityModalStep = 1;\n        break;\n      case 3:\n        if (this.capabilityModalResult['redirect-uris'] || this.capabilityModalResult['allowed-origins']) {\n          this.currentCapabilityModalStep = 2;\n        }\n        else {\n          this.currentCapabilityModalStep = 1;\n        }\n        break;\n    }\n  }\n\n  checkStep2Elements() {\n    let goToNextStep = true;\n    if (this.capabilities['code'].isSelected || this.capabilities['implicit'].isSelected ||\n      this.capabilities['assisted-token'].isSelected || this.capabilities['device-authorization'].isSelected) {\n      if (!this.result['allowed-origins'].value || this.result['allowed-origins'].value.length === 0) {\n        this.capabilityModalResult['allowed-origins'] = this.capabilityModalResult['allowed-origins'] ||\n          Object.assign({}, this.result['allowed-origins']);\n        goToNextStep = false;\n      }\n      else {\n        delete this.capabilityModalResult['allowed-origins'];\n      }\n      if ((this.capabilities['code'].isSelected || this.capabilities['implicit'].isSelected) &&\n        (!this.result['redirect-uris'].value || this.result['redirect-uris'].value.length === 0)) {\n        this.capabilityModalResult['redirect-uris'] = this.capabilityModalResult['redirect-uris'] ||\n          Object.assign({}, this.result['redirect-uris']);\n        goToNextStep = false;\n      }\n      else {\n        delete this.capabilityModalResult['redirect-uris'];\n      }\n    }\n    if (goToNextStep) {\n      delete this.capabilityModalResult['allowed-origins'];\n      delete this.capabilityModalResult['redirect-uris'];\n      this.currentCapabilityModalStep++;\n      this.checkStep3Elements();\n    }\n  }\n\n  checkStep3Elements() {\n    let goToNextStep = true;\n    if (((this.capabilities['code'].isSelected || this.capabilities['resource-owner-password-credentials'].isSelected) &&\n      !this.result['dynamic-client-registration-template'].value) ||\n      (this.capabilities['client-credentials'].isSelected || this.capabilities['token-exchange'].isSelected ||\n        this.capabilities['introspection'].isSelected)) {\n      if (!this.result['verifier'].value || (!this.result['secret'].value && !this.result['asymmetric-key'].value)) {\n        this.capabilityModalResult['verifier'] = this.capabilityModalResult['verifier'] ||\n          Object.assign({}, this.result['verifier']);\n        this.capabilityModalResult['secret'] = this.capabilityModalResult['secret'] ||\n          Object.assign({}, this.result['secret']);\n        this.capabilityModalResult['asymmetric-key'] = this.capabilityModalResult['asymmetric-key'] ||\n          Object.assign({}, this.result['asymmetric-key']);\n        goToNextStep = false;\n      }\n    }\n    if (goToNextStep) {\n      delete this.capabilityModalResult['verifier'];\n      delete this.capabilityModalResult['secret'];\n      delete this.capabilityModalResult['asymmetric-key'];\n      this.currentCapabilityModalStep++;\n      this.setCapabilityValues();\n    }\n  }\n\n  setCapabilityValues() {\n    this.Transaction.getWriteTransaction()\n      .then((transactionId: number) => {\n        const requests = [];\n        const batchId = this.batchService.createBatch();\n        Object.keys(this.capabilities).forEach(key => {\n          if (this.capabilities[key].isSelected !== this.capabilities[key].value) {\n            const request = this.batchService.addToBatch(batchId, RequestBuilder.withSetValue(this.capabilities[key].isSelected,\n              this.capabilities[key].path, transactionId));\n            requests.push(request);\n            request.subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.capabilities[key].value = this.capabilities[key].isSelected;\n                  this.sharedService.incrementChangeCount(this.capabilities[key].path);\n                  if (this.capabilities[key].isSelected) {\n                    this.capabilitiesSelectedCount++;\n                  }\n                  else {\n                    this.capabilitiesSelectedCount--;\n                  }\n                }\n                else {\n                  this.capabilityErrorMessage = response;\n                }\n              },\n              error => console.log(error));\n          }\n        });\n        if (requests.length > 0) {\n          Observable.forkJoin(requests)\n            .finally(() => this.setCapabilityModalResultValues(transactionId))\n            .subscribe(responses => {\n            });\n        }\n        else {\n          this.setCapabilityModalResultValues(transactionId);\n        }\n        this.batchService.initiateRequest(batchId);\n      });\n  }\n\n  setCapabilityModalResultValues(transactionId: number) {\n    if (Object.keys(this.capabilityModalResult).length > 0) {\n      const requests = [];\n      const batchId = this.batchService.createBatch();\n      Object.keys(this.capabilityModalResult).forEach(key => {\n        if (key === 'verifier') {\n          this.result[key].value = this.capabilityModalResult[key].value;\n        }\n        else if (this.capabilityModalResult[key].value) {\n          const request = this.batchService.addToBatch(batchId, RequestBuilder.withSetValue(\n            this.capabilityModalResult[key].value, this.capabilityModalResult[key].path, transactionId));\n          requests.push(request);\n          request.subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.result[key].value = this.capabilityModalResult[key].value;\n                this.sharedService.incrementChangeCount(this.capabilityModalResult[key].path);\n              }\n              else {\n                this.result[key].hasError = true;\n              }\n            },\n            error => console.log(error));\n        }\n      });\n\n      Observable.forkJoin(requests)\n        .finally(() => this.closeCapabilitiesModal())\n        .subscribe(responses => {\n        });\n\n      this.batchService.initiateRequest(batchId);\n    }\n    else {\n      this.closeCapabilitiesModal();\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/oauth/components/apps/new-client/client.component.ts	(date 1534519233000)
+++ src/app/oauth/components/apps/new-client/client.component.ts	(date 1534715701000)
@@ -54,6 +54,7 @@
   capabilityErrorMessage: string;
   currentCapabilityModalStep: number;
   capabilityModalResult: any;
+  authenticators: any = {};
 
   ngOnInit(): any {
     this.elementsBusy$ = this.sharedService.getElementsBusy()
@@ -106,7 +107,8 @@
     this.isBusyCounter++;
     Observable.forkJoin(
       this.configService.getOAuthClientConfig(),
-      this.configService.getOAuthCapabilityIconsConfig()
+      this.configService.getOAuthCapabilityIconsConfig(),
+      this.configService.getAuthIconsConfig()
     )
       .subscribe((configs: Array<any>) => {
           this.Transaction.getReadTransaction()
@@ -157,6 +159,7 @@
                             parsedData['redirect-uris'].mandatory = true;
 
                             this.loadCapabilities(parsedData, configs[1], transactionId);
+                            this.loadAuthenticators(parsedData['allowed-authenticators'].leafrefTarget, configs[2], transactionId);
 
                             this.isBusyCounter++;
                             Observable.forkJoin(
@@ -166,9 +169,9 @@
                               this.Api.postRequest(RequestBuilder.withGetValue(parsedData['logo'].path, transactionId))
                             )
                               .finally(() => {
-                                this.isUserAutenticatorExists(null);
                                 this.elementHandler.markFields(parsedData);
                                 this.result = parsedData;
+                                this.isUserAuthenticationExists(false);
                                 this.isBusyCounter--;
                               })
                               .subscribe(responses => {
@@ -251,70 +254,88 @@
     });
     this.batchService.initiateRequest(batchId);
   }
+
+  loadAuthenticators(path: string, icons: any, transactionId: number) {
+    this.Api.postRequest(RequestBuilder.withGetListKeys(path, transactionId))
+      .subscribe(response => {
+        if (response.code === ResponseCode.OK) {
+          const batchId = this.batchService.createBatch();
+          response.data.keys.forEach(key => {
+            const data: any = {
+              id: key.id,
+              path: `${path}{${key.id}}`
+            };
+            this.batchService.addToBatch(batchId, RequestBuilder.withSelectedCase(
+              data.path, 'authenticator-type', transactionId))
+              .subscribe(response1 => {
+                  if (response1.code === ResponseCode.OK) {
+                    let authenticatorType = response1.data.value;
+                    authenticatorType = authenticatorType.indexOf(':') > -1 ? authenticatorType.split(':')[1] : authenticatorType;
+                    const icon = icons.find(item => item.name === authenticatorType);
+                    data.icon = icon ? icon.icon : 'ion-cube';
+                    this.authenticators[key.id] = data;
+                  }
+                },
+                error => console.log(error));
+          });
+          this.batchService.initiateRequest(batchId);
+        }
+      });
+  }
 
   sanitizeUrl(value: string) {
     return this.sanitizer.bypassSecurityTrustUrl(value);
   }
 
-  enableUserAuthenticator(item, value) {
-    if (item) {
-      this.result[item].value = value;
-    }
-    let authenticator;
-    if (this.result['code'].value || this.result['implicit'].value ||
-      this.result['assisted-token'].value || this.result['device-authorization'].value) {
-      authenticator = true;
-    } else {
-      authenticator = false;
-    }
-    this.isUserAutenticatorExists(authenticator);
+  enableUserAuthentication(item, value) {
+    const isRequiredCapabilitiesSelected = this.result['code'].value || this.result['implicit'].value ||
+      this.result['assisted-token'].value || this.result['device-authorization'].value;
+    this.isUserAuthenticationExists(isRequiredCapabilitiesSelected);
   }
 
-  isUserAutenticatorExists(authenticator: any) {
-    this.isBusyCounter++;
+  isUserAuthenticationExists(isRequiredCapabilitiesSelected: boolean) {
     this.Transaction.getReadTransaction()
       .then(transactionId => {
         this.Api.postRequest(RequestBuilder.withExists(this.url + 'user-authentication', transactionId))
-          .finally(() => this.isBusyCounter--)
           .subscribe(response => {
-            if (authenticator == null) {
-              this.showUserAuthenticator = response.data.value;
-            } else {
-              if (authenticator && response.data.value) {
-                this.showUserAuthenticator = true;
-              } else if (authenticator && !response.data.value) {
-                this.createUserAuthenticator();
-              } else if (!authenticator && response.data.value) {
-                this.deleteUserAuthenticator();
-              } else if (!authenticator && !response.data.value) {
-                this.showUserAuthenticator = false;
-              }
+            if (isRequiredCapabilitiesSelected && response.data.value) {
+              this.showUserAuthenticator = true;
+              this.updateAllowedAuthenticatorsValue();
+            } else if (isRequiredCapabilitiesSelected && !response.data.value) {
+              this.createUserAuthentication();
+            } else if (!isRequiredCapabilitiesSelected && response.data.value) {
+              this.deleteUserAuthentication();
+            } else if (!isRequiredCapabilitiesSelected && !response.data.value) {
+              this.showUserAuthenticator = false;
+              this.updateAllowedAuthenticatorsValue();
             }
           });
       });
   }
 
-  createUserAuthenticator() {
+  createUserAuthentication() {
     this.Transaction.getWriteTransaction()
       .then(transactionId => {
         this.Api.postRequest(RequestBuilder.withCreate(this.url + 'user-authentication', transactionId))
           .subscribe(response => {
-            if (response.code != ResponseCode.OK) {
-              this.showUserAuthenticator = false;
+            if (response.code === ResponseCode.OK) {
+              this.showUserAuthenticator = true;
+              this.updateAllowedAuthenticatorsValue();
             } else {
-              this.loadAuthenticatorsData();
+              this.showUserAuthenticator = false;
             }
           });
       });
   }
 
-  deleteUserAuthenticator() {
+  deleteUserAuthentication() {
     this.Transaction.getWriteTransaction()
       .then(transactionId => {
         this.Api.postRequest(RequestBuilder.withDelete(this.url + 'user-authentication', transactionId))
           .subscribe(response => {
-            if (response.code == ResponseCode.OK) {
+            if (response.code === ResponseCode.OK) {
               this.showUserAuthenticator = false;
+              this.updateAllowedAuthenticatorsValue();
             } else {
               this.showUserAuthenticator = true;
             }
@@ -322,29 +343,22 @@
       });
   }
 
-  loadAuthenticatorsData() {
-    this.isBusyCounter++;
-    this.configService.getOAuthClientConfig().subscribe(config => {
+  updateAllowedAuthenticatorsValue() {
+    if (this.showUserAuthenticator) {
       this.Transaction.getReadTransaction()
         .then(transactionId => {
-          this.Api.postRequest(RequestBuilder.withSchema(this.url + 'user-authentication', transactionId, 3))
-            .finally(() => this.isBusyCounter--)
+          this.Api.postRequest(RequestBuilder.withGetValue(this.result['allowed-authenticators'].path, transactionId))
             .subscribe(response => {
-              let config1 = config.filter(item => item.name == 'user-authentication')[0].children;
-              let result = this.dataResolver.parseData(response.data.result.children[0].children, config1, this.url + 'user-authentication/');
-              result['allowed-authenticators'].leafrefTarget = result['allowed-authenticators'].leafrefTarget.replace('%profileId', this.authenticationProfile);
-              result['authenticator-filters'].leafrefTarget = result['authenticator-filters'].leafrefTarget.replace('%profileId', this.authenticationProfile);
-
-              for (let key in result) {
-                if (result.hasOwnProperty(key)) {
-                  this.result[key] = result[key];
+                if (response.code === ResponseCode.OK) {
+                  this.result['allowed-authenticators'].value = response.data.value;
                 }
-              }
-              this.showUserAuthenticator = true;
-
-            });
-        });
-    });
+              },
+              error => console.log(error));
+        });
+    }
+    else {
+      this.result['allowed-authenticators'].value = [];
+    }
   }
 
   isTemplatizedDynamicClientRegistrationEnabled() {
@@ -604,11 +618,11 @@
       .then(transactionId => {
         this.Api.postRequest(RequestBuilder.withSetValue(false, this.capabilities[name].path, transactionId))
           .subscribe(response => {
-            if (response.code === ResponseCode.OK) {
-              this.capabilities[name].value = false;
-              this.sharedService.incrementChangeCount(this.capabilities[name].path);
-            }
-          },
+              if (response.code === ResponseCode.OK) {
+                this.capabilities[name].value = false;
+                this.sharedService.incrementChangeCount(this.capabilities[name].path);
+              }
+            },
             error => console.log(error));
       });
   }
Index: src/app/oauth/components/apps/new-client/client.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"container clearfix mxn2\">\n  <div class=\"col-12 px2 mx-auto\">\n    <div class=\"dashboard-main-panel\">\n      <app-spinner [isActive]=\"isBusyCounter > 0\"></app-spinner>\n      <div class=\"action-toolbar clearfix py2\">\n        <div class=\"action-toolbar-title\">\n          <h1 class=\"m0\">\n            <i class=\"icon ion-cube inlineicon\"></i>\n            Edit Client\n          </h1>\n        </div>\n        <div class=\"action-toolbar-actions\">\n          <download-config-button [path]=\"url\"></download-config-button>\n          <button class=\"button button-tiny button-primary-outline\"\n                  type=\"button\"\n                  aria-label=\"Duplicate Client\"\n                  title=\"Duplicate Client\"\n                  (click)=\"onDuplicateClient()\">\n            <i class=\"icon ion-ios-browsers inlineicon\"></i>Duplicate Client\n          </button>\n        </div>\n      </div>\n\n      <div class=\"col col-12\">\n        <element-error [error]=\"error\"></element-error>\n      </div>\n\n      <div class=\"flex flex-center justify-between mt3\">\n        <div class=\"flex-auto\">\n          <h1 class=\"mt0\">{{clientName}}</h1>\n        </div>\n        <div class=\"\">\n          <element-checkbox [data]=\"result['enabled']\"></element-checkbox>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"page-well mt2 mb2\" [ngClass]=\"{'collapsed': panelOptions.isNamePanelCollapsed}\">\n          <div class=\"page-well-topbar\"\n               (click)=\"panelOptions.isNamePanelCollapsed = !panelOptions.isNamePanelCollapsed\">\n            <div class=\"flex flex-justify\">\n              <div class=\"flex-auto\">\n                  <span class=\"page-well-topbar-title\"><i\n                          class=\"icon ion-gear-b inlineicon\"></i>Name and description</span>\n              </div>\n              <div class=\"\"></div>\n              <button class=\"button button-transparent button-tiny button-fold\">\n                <i class=\"icon ion-ios-arrow-{{panelOptions.isNamePanelCollapsed ? 'down' : 'up'}}\"></i>\n              </button>\n            </div>\n          </div>\n\n          <h2 class=\"mb2 h3\"><i class=\"icon ion-gear-b inlineicon\"></i>Name and description</h2>\n          <div class=\"clearfix mxn2\">\n            <div class=\"sm-col md-col-4 px2\">\n              <element [data]=\"result['client-name']\"></element>\n              <div class=\"col col-12 mt1\">\n                <element-richtext [data]=\"result['description']\" [rows]=\"4\"></element-richtext>\n              </div>\n            </div>\n            <div class=\"sm-col md-col-4 px2\" *ngIf=\"isClientAuthenticationVisible\">\n              <app-element-single-select-v2 [data]=\"result['verifier']\"\n                                            [edit]=\"true\"\n                                            [allowClear]=\"false\"\n                                            [isChoice]=\"true\"\n                                            [canUpdate]=\"false\"></app-element-single-select-v2>\n\n              <div class=\"mt2\" *ngIf=\"result['verifier']?.value === 'secret'\">\n                <element-password [numberOfCharacters]=\"64\" [data]=\"result['secret']\" [clearValueOnDestroy]=\"true\"></element-password>\n              </div>\n              <div class=\"mt2\" *ngIf=\"result['verifier']?.value === 'asymmetric-key'\">\n                <app-element-single-select-v2 [data]=\"result['asymmetric-key']\"\n                                              [allowClear]=\"false\"\n                                              [edit]=\"true\"\n                                              [clearValueOnDestroy]=\"true\"></app-element-single-select-v2>\n              </div>\n            </div>\n            <div class=\"sm-col md-col-4 px2 center\">\n              <div class=\"client-logo-container\">\n                <div class=\"client-logo-dropzone\" [ngClass]=\"{'active': fileDragActiveCounter > 0}\"\n                     (drop)=\"onFileDrop($event)\">\n                    <span class=\"label mt2 block primary\"><i\n                            class=\"icon ion-images inlineicon\"></i>Drop file here...</span>\n                </div>\n                <div class=\"client-logo-wrapper\">\n                  <div class=\"client-logo\">\n                    <div *ngIf=\"!result['logo']?.value\" class=\"client-logo-placeholder\">\n                      <i class=\"icon ion-cube inlineicon\"></i>\n                    </div>\n                    <ng-container *ngIf=\"result['logo']?.value\">\n                      <img class=\"client-logo-image\" [src]=\"sanitizeUrl(result['logo'].value)\" [alt]=\"clientName\"/>\n                      <div class=\"client-logo-overlay\">\n                        <div class=\"client-logo-close\" title=\"Remove Logo\" (click)=\"removeLogo()\"><i\n                                class=\"icon ion-close\"></i>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </div>\n                  <div class=\"client-logo-picker\">\n                    <input type=\"file\"\n                           #logoInput\n                           (change)=\"getFileData($event.target.files)\"\n                           [accept]=\"allowedLogoFileExtensions\"\n                           style=\"display:none\">\n                    <button class=\"button button-tiny button-primary-outline mt2\" type=\"button\"\n                            (click)=\"logoInput.click()\">Select logo\n                    </button>\n                    <label class=\"client-logo-picker-label\">{{selectedFile.name}}</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        <!-- CAPABILITIES -->\n        <div class=\"page-well mt2 mb2\" [ngClass]=\"{'collapsed': panelOptions.isCapabilitiesPanelCollapsed}\">\n          <div class=\"page-well-topbar\"\n               (click)=\"panelOptions.isCapabilitiesPanelCollapsed = !panelOptions.isCapabilitiesPanelCollapsed\">\n            <div class=\"flex flex-end\">\n              <div class=\"flex-auto\">\n                  <span class=\"page-well-topbar-title\"><i\n                          class=\"icon ion-android-expand inlineicon\"></i>Capabilities</span>\n              </div>\n\n              <button class=\"button button-transparent button-tiny button-fold\">\n                <i class=\"icon ion-ios-arrow-{{panelOptions.isCapabilitiesPanelCollapsed ? 'down' : 'up'}}\"></i>\n              </button>\n            </div>\n          </div>\n\n          <ng-container *ngIf=\"capabilitiesSelectedCount === 0; else selectedCapabilities\">\n            <h2 class=\"mt2 mb2 h3 flex flex-center\">\n              <i class=\"icon ion-android-expand inlineicon\"></i>Capabilities\n            </h2>\n            <div class=\"flex flex-center justify-center flex-column\">\n              <i class=\"icon ion-sad-outline icon-large icon-light\"></i>\n              <p>This Client has no capabilities and is inactive. Add capabilities to activate the client.</p>\n              <a class=\"button button-small button-success\" (click)=\"openCapabilitiesModal()\">Add capabilities</a>\n            </div>\n          </ng-container>\n          <ng-template #selectedCapabilities>\n            <div class=\"flex flex-center justify-between mb2 mt2\">\n              <h2 class=\"mt0 h3\"><i class=\"icon ion-android-expand inlineicon\"></i>Capabilities</h2>\n              <a class=\"button button-small button-success\" (click)=\"openCapabilitiesModal()\">\n                <i class=\"icon ion-plus inlineicon\"></i>Add capabilities\n              </a>\n            </div>\n\n            <div class=\"flex flex-center flex-start flex-wrap mt3 mb3\">\n\n              <ng-container *ngFor=\"let item of capabilities | objectValues\">\n                <div *ngIf=\"capabilities[item.key].value\" class=\"icon-grid-flex-item mb1\">\n                  <div class=\"icon-grid-flex-item-delete\" (click)=\"removeCapability(item.key)\">\n                    <i class=\"icon ion-trash-a\"></i></div>\n                  <a class=\"icon-grid-item icon-grid-item--small clearfix\">\n                    <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                      <i class=\"icon {{capabilities[item.key].icon}}\"></i>\n                    </div>\n                    <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                      <h3 class=\"h5 mt0\">{{capabilities[item.key].displayName | capitalize}}</h3>\n                      <ul class=\"m0 list-reset icon-grid-item-description-features\">\n                        <li>{{capabilities[item.key].info}}</li>\n                      </ul>\n                    </div>\n                  </a>\n                </div>\n              </ng-container>\n            </div>\n          </ng-template>\n        </div>\n        <!-- END CAPABILITIES -->\n\n        <!-- START GENERAL OAUTH AND OPENID CONNECT SETTINGS  -->\n        <div class=\"page-well mt2 mb2\" [ngClass]=\"{'collapsed': panelOptions.isGeneralSettingsPanelCollapsed}\">\n          <div class=\"page-well-topbar\"\n               (click)=\"panelOptions.isGeneralSettingsPanelCollapsed = !panelOptions.isGeneralSettingsPanelCollapsed\">\n            <div class=\"flex flex-end\">\n              <div class=\"flex-auto\">\n                  <span class=\"page-well-topbar-title\"><i\n                          class=\"icon ion-laptop inlineicon\"></i>General OAuth and OpenID Connect Settings</span>\n              </div>\n              <div class=\"\"></div>\n              <button class=\"button button-transparent button-tiny button-fold\">\n                <i class=\"icon ion-ios-arrow-{{panelOptions.isGeneralSettingsPanelCollapsed ? 'down' : 'up'}}\"></i>\n              </button>\n            </div>\n          </div>\n\n          <h2 class=\"mt2 mb2 h3 flex flex-center\">\n            <i class=\"icon ion-laptop inlineicon\"></i>General OAuth and OpenID Connect Settings\n          </h2>\n\n          <div class=\"clearfix mxn2 mt3 mb3\">\n\n            <div class=\"sm-col sm-col-12 px2\">\n              <h4 class=\"dashboard-main-panel-new-heading mt0 py1 mb2\">Permissions</h4>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\">\n              <app-element-multi-select-v2 [data]=\"result['scope']\"\n                                           [canCreateNew]=\"true\"></app-element-multi-select-v2>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\">\n              <app-element-multi-select-v2 [data]=\"result['audience']\"></app-element-multi-select-v2>\n            </div>\n\n            <div class=\"sm-col sm-col-12 clearfix\"\n                 *ngIf=\"result['code']?.value || result['implicit']?.value || result['assisted-token']?.value || result['device-authorization']?.value\">\n              <div class=\"sm-col sm-col-12 px2\">\n                <h4 class=\"dashboard-main-panel-new-heading mt3 py1 mb2\">User Consent</h4>\n              </div>\n              <div class=\"sm-col sm-col-4 px2\">\n                <element-presence [data]=\"result['user-consent']\"\n                                  [isDynamicElement]=\"true\"\n                                  [clearValueOnDestroy]=\"true\"></element-presence>\n              </div>\n              <div class=\"sm-col sm-col-4 px2\">\n                <element-checkbox *ngIf=\"result['user-consent']?.value\"\n                                  [data]=\"result['allow-deselection']\"\n                                  [clearValueOnDestroy]=\"true\"></element-checkbox>\n              </div>\n            </div>\n\n\n            <div class=\"sm-col sm-col-12 clearfix\">\n              <div class=\"sm-col sm-col-12 px2\">\n                <h4 class=\"dashboard-main-panel-new-heading mt3 py1 mb2\">Token Settings</h4>\n              </div>\n              <div class=\"sm-col sm-col-12 clearfix\">\n                <div class=\"sm-col sm-col-4 px2\">\n                  <element-number [data]=\"result['access-token-ttl']\"></element-number>\n                </div>\n                <div class=\"sm-col sm-col-4 px2\">\n                  <element [data]=\"result['id-token-ttl']\"></element>\n                </div>\n              </div>\n              <div class=\"sm-col sm-col-12 clearfix\">\n                <div class=\"sm-col sm-col-4 px2\"\n                     *ngIf=\"result['refresh-token-ttl'] &&\n                                (result['code']?.value || result['resource-owner-password-credentials']?.value ||\n                                  result['device-authorization']?.value)\">\n                  <element-number [data]=\"result['refresh-token-ttl']\" [canDisable]=\"true\" [clearValueOnDestroy]=\"true\"></element-number>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n        </div>\n        <!-- END <!-- GENERAL OAUTH AND OPENID CONNECT SETTINGS  -->\n\n        <!-- START CLIENT APPLICATION SETTINGS -->\n        <div class=\"page-well mt2 mb2\" [ngClass]=\"{'collapsed': panelOptions.isClientSettingsPanelCollapsed}\">\n\n          <div class=\"page-well-topbar\"\n               (click)=\"panelOptions.isClientSettingsPanelCollapsed = !panelOptions.isClientSettingsPanelCollapsed\">\n            <div class=\"flex flex-end\">\n              <div class=\"flex-auto\">\n                  <span class=\"page-well-topbar-title\"><i\n                          class=\"icon ion-gear-b inlineicon\"></i>Client Application Settings</span>\n              </div>\n              <div class=\"\"></div>\n              <button class=\"button button-transparent button-tiny button-fold\">\n                <i class=\"icon ion-ios-arrow-{{panelOptions.isClientSettingsPanelCollapsed ? 'down' : 'up'}}\"></i>\n              </button>\n            </div>\n          </div>\n\n          <h2 class=\"mt2 mb2 h3 flex flex-center\">\n            <i class=\"icon ion-gear-b mr1\"></i>Client Application Settings\n          </h2>\n\n\n          <div class=\"clearfix mxn2 mt3 mb3\">\n\n            <div class=\"sm-col sm-col-4 px2\" *ngIf=\"result['code']?.value || result['implicit']?.value\">\n              <app-element-multi-select-v2 [data]=\"result['redirect-uris']\"\n                                           [clearValueOnDestroy]=\"true\">\n              </app-element-multi-select-v2>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\"\n                 *ngIf=\"result['code']?.value || result['implicit']?.value || result['assisted-token']?.value ||\n                            result['device-authorization']?.value\">\n              <app-element-multi-select-v2 [data]=\"result['allowed-origins']\"\n                                           [clearValueOnDestroy]=\"true\">\n              </app-element-multi-select-v2>\n            </div>\n\n            <div class=\"sm-col sm-col-12 clearfix\">\n              <div class=\"sm-col sm-col-12 px2\">\n                <h4 class=\"dashboard-main-panel-new-heading mt3 py1 mb2\">\n                  <div class=\"flex flex-center justify between\">\n                    <div class=\"flex-auto\">\n                      Advanced\n                    </div>\n                    <button class=\"button button-primary-outline button-tiny mr1\">\n                      <i class=\"icon ion-ios-arrow-up\"></i>\n                    </button>\n                  </div>\n                </h4>\n              </div>\n              <div class=\"sm-col sm-col-12 clearfix\">\n                <div class=\"sm-col sm-col-4 px2\">\n                  <element-url [data]=\"result['application-url']\"></element-url>\n                </div>\n                <div class=\"sm-col sm-col-4 px2\">\n                  <element-url [data]=\"result['privacy-policy-url']\"></element-url>\n                </div>\n              </div>\n              <div class=\"sm-col sm-col-12 clearfix\">\n                <div class=\"sm-col sm-col-4 mt2 px2\">\n                  <element-url [data]=\"result['terms-of-service-url']\"></element-url>\n                </div>\n              </div>\n              <ng-container *ngIf=\"isRequestObjectEnabled\">\n                <div class=\"sm-col sm-col-12 clearfix\">\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <element-presence [data]=\"result['request-object']\"></element-presence>\n                  </div>\n                  <div class=\"sm-col sm-col-4 px2\" *ngIf=\"result['request-object']?.value\">\n                    <element [data]=\"result['issuer']\" [clearValueOnDestroy]=\"true\"></element>\n                  </div>\n                </div>\n                <ng-container *ngIf=\"result['request-object']?.value\">\n                  <div class=\"sm-col sm-col-12 clearfix\">\n                    <div class=\"sm-col sm-col-4 px2\">\n                      <app-element-single-select-v2 [data]=\"result['signature-verification-key']\"\n                                                    [edit]=\"true\"\n                                                    [allowClear]=\"false\" [clearValueOnDestroy]=\"true\"></app-element-single-select-v2>\n                    </div>\n                    <div class=\"sm-col sm-col-4 px2\">\n                      <element-presence [data]=\"result['by-reference']\"\n                                        [clearValueOnDestroy]=\"true\"></element-presence>\n                    </div>\n                  </div>\n                  <div class=\"sm-col sm-col-12 clearfix\" *ngIf=\"result['by-reference']?.value\">\n                    <div class=\"sm-col sm-col-4 px2\">\n                      <app-element-single-select-v2 [data]=\"result['http-client']\"\n                                                    [edit]=\"true\"\n                                                    [clearValueOnDestroy]=\"true\"></app-element-single-select-v2>\n                    </div>\n                    <div class=\"sm-col sm-col-4 px2\">\n                      <app-element-multi-select-v2 [data]=\"result['allowed-request-url']\"\n                                                   [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n                    </div>\n                  </div>\n                </ng-container>\n              </ng-container>\n              <div class=\"sm-col sm-col-12 clearfix\" *ngIf=\"isOpenIdConnectEnabled\">\n                <div class=\"sm-col sm-col-4 px2\">\n                  <element-presence [data]=\"result['use-pairwise-subject-identifiers']\"\n                                    [isDynamicElement]=\"true\">\n                  </element-presence>\n                </div>\n                <div class=\"sm-col sm-col-4 px2\" *ngIf=\"result['use-pairwise-subject-identifiers']?.value\">\n                  <element [data]=\"result['sector-identifier']\" [clearValueOnDestroy]=\"true\"></element>\n                </div>\n              </div>\n              <ng-container *ngIf=\"result['assertion']?.value\">\n                <div class=\"sm-col sm-col-12 clearfix\">\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <!--TODO: remove duplicate 'issuer' from result -->\n                    <element [data]=\"result['issuer']\" [clearValueOnDestroy]=\"true\"></element>\n                  </div>\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <app-element-single-select-v2 [data]=\"result['asymmetric-signing-key']\"\n                                                  [edit]=\"true\"\n                                                  [clearValueOnDestroy]=\"true\"></app-element-single-select-v2>\n                  </div>\n                </div>\n                <div class=\"sm-col sm-col-12 px2\">\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <element-checkbox [data]=\"result['allow-reuse']\"\n                                      [clearValueOnDestroy]=\"true\"></element-checkbox>\n                  </div>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"result['code']?.value\">\n                <div class=\"sm-col sm-col-12 clearfix\">\n                  <div class=\"sm-col sm-col-4 mt2 px2\">\n                    <element [data]=\"result['require-proof-key']\"\n                             [clearValueOnDestroy]=\"true\"></element>\n                  </div>\n                  <div class=\"sm-col sm-col-4 px2\" *ngIf=\"result['require-proof-key']?.value\">\n                    <app-element-multi-select-v2 [data]=\"result['disallowed-proof-key-challenge-methods']\"\n                                                 [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n                  </div>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"isTemplatizedDCREnabled && isRequiredDCRCapabilitiesSelected()\">\n                <div class=\"sm-col sm-col-12 px2\">\n                  <h4 class=\"dashboard-main-panel-new-heading mt3 py1 mb2\">Dynamic Client Registration</h4>\n                </div>\n                <div class=\"sm-col sm-col-12 clearfix\">\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <element-presence [data]=\"result['dynamic-client-registration-template']\"\n                                      [isDynamicElement]=\"true\"\n                                      (valueChanged)=\"setIsSecretVisible()\"></element-presence>\n                  </div>\n                  <div class=\"sm-col sm-col-4 px2\" *ngIf=\"result['dynamic-client-registration-template']?.value\">\n                    <app-element-single-select-v2 [data]=\"result['authentication-method']\"\n                                                  [canUpdate]=\"false\"\n                                                  [allowClear]=\"false\"\n                                                  [edit]=\"true\"\n                                                  [clearValueOnDestroy]=\"true\">\n                    </app-element-single-select-v2>\n                  </div>\n                </div>\n                <div class=\"sm-col sm-col-12 clearfix\" *ngIf=\"result['authentication-method']?.value\">\n                  <div class=\"sm-col sm-col-4 px2\">\n                    <app-element-multi-select-v2 *ngIf=\"result['authentication-method'].value === 'users-must-authenticate'\"\n                            [data]=\"result['authenticate-user-by']\"\n                            [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n                    <app-element-multi-select-v2 *ngIf=\"result['authentication-method'].value === 'clients-must-authenticate'\"\n                            [data]=\"result['authenticate-client-by']\"\n                            [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n                  </div>\n                </div>\n              </ng-container>\n            </div>\n\n\n          </div>\n\n        </div>\n        <!-- END CLIENT APPLICATION SETTINGS -->\n\n        <!-- START USER AUTHENTICATION  -->\n        <div class=\"page-well mt2 mb2\" [ngClass]=\"{'collapsed': panelOptions.isUserAuthPanelCollapsed}\">\n\n          <div class=\"page-well-topbar\"\n               (click)=\"panelOptions.isUserAuthPanelCollapsed = !panelOptions.isUserAuthPanelCollapsed\">\n            <div class=\"flex flex-end\">\n              <div class=\"flex-auto\">\n                  <span class=\"page-well-topbar-title\"><i\n                          class=\"icon ion-person-stalker inlineicon\"></i>User Authentication</span>\n              </div>\n              <div class=\"\"></div>\n              <button class=\"button button-transparent button-tiny button-fold\">\n                <i class=\"icon ion-ios-arrow-{{panelOptions.isUserAuthPanelCollapsed ? 'down' : 'up'}}\"></i>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"flex flex-center justify-between mb2 mt2\">\n            <h2 class=\"mt0 h3\"><i class=\"icon ion-person-stalker mr1\"></i>User Authentication</h2>\n            <a class=\"button button-small button-success\" href=\"https://localhost:6749/admin/\"><i\n                    class=\"icon ion-plus inlineicon\"></i>Add authenticators</a>\n          </div>\n\n          <div class=\"flex flex-center flex-start flex-wrap\">\n            <div class=\"icon-grid-flex-item mb1\">\n              <div class=\"icon-grid-flex-item-delete\"><i class=\"icon ion-trash-a\"></i></div>\n              <a class=\"icon-grid-item icon-grid-item--tiny clearfix\">\n                <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                  <i class=\"icon ion-bankid\"></i>\n                </div>\n                <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                  <h3 class=\"h5 m0\">Bankid1</h3>\n                </div>\n              </a>\n            </div>\n            <div class=\"icon-grid-flex-item mb1\">\n              <div class=\"icon-grid-flex-item-delete\"><i class=\"icon ion-trash-a\"></i></div>\n              <a class=\"icon-grid-item icon-grid-item--tiny clearfix\">\n                <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                  <i class=\"icon ion-bankid\"></i>\n                </div>\n                <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                  <h3 class=\"h5 m0\">Bankid1</h3>\n                </div>\n              </a>\n            </div>\n            <div class=\"icon-grid-flex-item mb1\">\n              <div class=\"icon-grid-flex-item-delete\"><i class=\"icon ion-trash-a\"></i></div>\n              <a class=\"icon-grid-item icon-grid-item--tiny clearfix\">\n                <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                  <i class=\"icon ion-bankid\"></i>\n                </div>\n                <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                  <h3 class=\"h5 m0\">Bankid1</h3>\n                </div>\n              </a>\n            </div>\n            <div class=\"icon-grid-flex-item mb1\">\n              <div class=\"icon-grid-flex-item-delete\"><i class=\"icon ion-trash-a\"></i></div>\n              <a class=\"icon-grid-item icon-grid-item--tiny clearfix\">\n                <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                  <i class=\"icon ion-bankid\"></i>\n                </div>\n                <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                  <h3 class=\"h5 m0\">Bankid1</h3>\n                </div>\n              </a>\n            </div>\n          </div>\n\n          <div class=\"clearfix mxn2 flex flex-center\">\n            <div class=\"sm-col sm-col-4 px2\">\n              <element-number [data]=\"result['freshness']\" [clearValueOnDestroy]=\"true\"></element-number>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\">\n              <element-checkbox [data]=\"result['force-authn']\" [clearValueOnDestroy]=\"true\"></element-checkbox>\n            </div>\n\n          </div>\n\n          <div class=\"clearfix\">\n            <div class=\"sm-col sm-col-12\">\n              <h4 class=\"dashboard-main-panel-new-heading py1 mb2\">\n                <div class=\"flex flex-center justify between\">\n                  <div class=\"flex-auto\">\n                    Advanced\n                  </div>\n                  <button class=\"button button-primary-outline button-tiny mr1\">\n                    <i class=\"icon ion-ios-arrow-up\"></i>\n                  </button>\n                </div>\n              </h4>\n            </div>\n          </div>\n\n          <div class=\"clearfix mxn2 mb3\">\n\n            <div class=\"sm-col sm-col-4 px2\">\n              <app-element-multi-select-v2 [data]=\"result['authenticator-filters']\" [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\">\n              <app-element-multi-select-v2 [data]=\"result['required-claims']\" [clearValueOnDestroy]=\"true\"></app-element-multi-select-v2>\n            </div>\n          </div>\n          <div class=\"clearfix mxn2\">\n            <div class=\"sm-col sm-col-4 px2\">\n              <element-input-single-select [data]=\"result['template-area']\" [clearValueOnDestroy]=\"true\"></element-input-single-select>\n            </div>\n            <div class=\"sm-col sm-col-4 px2\">\n              <element [data]=\"result['context-info']\" [clearValueOnDestroy]=\"true\"></element>\n            </div>\n          </div>\n\n        </div>\n        <!-- END USER AUTHENTICATION -->\n\n\n      </div>\n\n\n      <div style=\"border-top: 1px solid red; margin-top: 25vh;\">\n        <p style=\"color: red; margin-bottom: 2rem;\">Old content below</p>\n\n        <div *ngIf=\"result['code']?.value || result['implicit']?.value || result['assisted-token']?.value || result['device-authorization']?.value\">\n          <element-presence [data]=\"result['user-consent']\"\n                            [isDynamicElement]=\"true\"></element-presence>\n          <element-checkbox *ngIf=\"result['user-consent']?.value\"\n                            [data]=\"result['allow-deselection']\"></element-checkbox>\n        </div>\n        <div>\n          <element [data]=\"result['client-name']\"></element>\n        </div>\n        <div>\n          <element-richtext [data]=\"result['description']\"></element-richtext>\n        </div>\n        <div class=\"table mt2\">\n          <div *ngIf=\"result['scope']\" class=\"table-cell sm-col-10 left-align\">\n            <element-multi-select [data]=\"result['scope']\"></element-multi-select>\n          </div>\n          <div class=\"table-cell sm-col-2 right-align ng2-select-group\" style=\"vertical-align: bottom;\">\n            <button type=\"button\" (click)=\"openCreateScopeModal()\"\n                    class=\"button button-small button-success-outline\" style=\"margin-bottom: 3px\">+ New Scope\n            </button>\n            <p class=\"field-description\">&nbsp;</p>\n          </div>\n        </div>\n        <div *ngIf=\"result['redirect-uris'] && (result['code']?.value || result['implicit']?.value)\">\n          <div class=\" mt2\">\n            <element-input-select [data]=\"result['redirect-uris']\"></element-input-select>\n          </div>\n        </div>\n        <div class=\"clearfix\" *ngIf=\"result['code']?.value || result['implicit']?.value ||\n                                          result['assisted-token']?.value || result['device-authorization']?.value\">\n          <div class=\"sm-col sm-col-12\">\n            <element-input-select [data]=\"result['allowed-origins']\"></element-input-select>\n          </div>\n        </div>\n        <div>\n          <element-url [data]=\"result['application-url']\"></element-url>\n        </div>\n        <div>\n          <element-number [data]=\"result['access-token-ttl']\"></element-number>\n        </div>\n        <div *ngIf=\"result['refresh-token-ttl'] && (result['code']?.value ||\n                          result['resource-owner-password-credentials']?.value || result['device-authorization']?.value)\">\n          <element-number [data]=\"result['refresh-token-ttl']\" [canDisable]=\"true\"></element-number>\n        </div>\n        <div>\n          <element [data]=\"result['id-token-ttl']\"></element>\n        </div>\n        <div>\n          <element-input-select [data]=\"result['audience']\"></element-input-select>\n        </div>\n\n        <div class=\"clearfix mxn2\">\n          <div class=\"sm-col sm-col-6 px2\">\n            <element-url [data]=\"result['terms-of-service-url']\"></element-url>\n          </div>\n          <div class=\"sm-col sm-col-6 px2\">\n            <element-url [data]=\"result['privacy-policy-url']\"></element-url>\n          </div>\n        </div>\n\n        <div class=\"clearfix\" *ngIf=\"isRequestObjectEnabled\">\n          <element-presence [data]=\"result['request-object']\"></element-presence>\n\n          <ng-container *ngIf=\"result['request-object']?.value\">\n            <element [data]=\"result['issuer']\"></element>\n\n            <element-single-select [data]=\"result['signature-verification-key']\"\n                                   [edit]=\"true\"\n                                   [allowClear]=\"false\"></element-single-select>\n\n            <element-presence [data]=\"result['by-reference']\"></element-presence>\n            <ng-container *ngIf=\"result['by-reference']?.value\">\n              <element-single-select [data]=\"result['http-client']\"\n                                     [edit]=\"true\"></element-single-select>\n              <element-input-select [data]=\"result['allowed-request-url']\"></element-input-select>\n            </ng-container>\n          </ng-container>\n        </div>\n\n        <div class=\"clearfix\" *ngIf=\"isOpenIdConnectEnabled\">\n          <element-presence [data]=\"result['use-pairwise-subject-identifiers']\"\n                            [isDynamicElement]=\"true\"></element-presence>\n          <div *ngIf=\"result['use-pairwise-subject-identifiers']?.value\">\n            <element [data]=\"result['sector-identifier']\"></element>\n          </div>\n        </div>\n\n        <div class=\"mt2 clearfix\">\n\n          <div class=\"sm-col sm-col-12 mt4\">\n            <h3 class=\"dashboard-main-panel-new-heading mt0 mb2\">\n              Client Capabilities\n              <div class=\"inline-block\" *ngIf=\"capabilitiesSelectedCount < 1\">\n                <span class=\"color-red\">*</span>\n              </div>\n            </h3>\n          </div>\n\n          <div class=\"clearfix mxn2\">\n            <div class=\"sm-col sm-col-6 px2\">\n              <h4>Web and Mobile Clients</h4>\n              <element-checkbox [data]=\"result['code']\"\n                                (valueChanged)=\"enableUserAuthenticator('code', $event);setIsSecretVisible();setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-checkbox [data]=\"result['implicit']\"\n                                (valueChanged)=\"enableUserAuthenticator('implicit', $event);setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-checkbox [data]=\"result['assisted-token']\"\n                                (valueChanged)=\"enableUserAuthenticator('assisted-token', $event);setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-presence [data]=\"result['assertion']\" [isDynamicElement]=\"true\"></element-presence>\n              <div class=\"mt2\" *ngIf=\"result['assertion']?.value\">\n                <element [data]=\"result['issuer']\"></element>\n                <element-single-select [data]=\"result['asymmetric-signing-key']\"\n                                       [edit]=\"true\"></element-single-select>\n                <element-checkbox [data]=\"result['allow-reuse']\"></element-checkbox>\n              </div>\n            </div>\n            <div class=\"sm-col sm-col-6 px2\">\n              <h4>Server-based Clients</h4>\n              <element-checkbox [data]=\"result['client-credentials']\"\n                                (valueChanged)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-checkbox [data]=\"result['introspection']\"\n                                (valueChanged)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-checkbox [data]=\"result['resource-owner-password-credentials']\"\n                                (valueChanged)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n              <element-checkbox [data]=\"result['device-authorization']\"\n                                (valueChanged)=\"setIsSecretVisible();enableUserAuthenticator('device-authorization', $event);\n                                                        setCapabilitiesSelectedCount($event); onDeviceAuthorizationChanged($event)\"\n                                (onGetValueCompleted)=\"setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n            </div>\n          </div>\n          <div class=\"clearfix mxn2\">\n            <div class=\"sm-col sm-col-6 px2 mt2\">\n              <h4>Internal Client</h4>\n              <element-checkbox [data]=\"result['token-exchange']\"\n                                (valueChanged)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event)\"\n                                (onGetValueCompleted)=\"setIsSecretVisible();setCapabilitiesSelectedCount($event, true)\"></element-checkbox>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row mt4\" *ngIf=\"isClientAuthenticationVisible\">\n          <h3 class=\"dashboard-main-panel-new-heading mt0 mb2\">\n            Client Authentication\n            <div class=\"inline-block\" *ngIf=\"!result['secret'].value && !result['asymmetric-key'].value\">\n              <span class=\"color-red\">*</span>\n            </div>\n          </h3>\n          <div class=\"mt2\">\n            <element-single-select [data]=\"result['verifier']\"\n                                   [edit]=\"true\"\n                                   [allowClear]=\"false\"\n                                   [isValueProvided]=\"true\"\n                                   [canUpdate]=\"false\"></element-single-select>\n          </div>\n          <div class=\"mt2\" *ngIf=\"result['verifier'].value === 'secret'\">\n            <element-password [numberOfCharacters]=\"64\" [data]=\"result['secret']\"></element-password>\n          </div>\n          <div class=\"mt2\" *ngIf=\"result['verifier'].value === 'asymmetric-key'\">\n            <element-single-select [data]=\"result['asymmetric-key']\"\n                                   [edit]=\"true\"></element-single-select>\n          </div>\n        </div>\n\n        <div class=\"row mt4\" *ngIf=\"result['code'] && result['code'].value\">\n          <h3 class=\"dashboard-main-panel-new-heading mt0 mb2\">Proof Key</h3>\n          <div class=\"mt2\">\n            <element [data]=\"result['require-proof-key']\"></element>\n          </div>\n          <div class=\"mt2\" *ngIf=\"result['require-proof-key']?.value\">\n            <element-multi-select [data]=\"result['disallowed-proof-key-challenge-methods']\"\n                                  [items]=\"result['disallowed-proof-key-challenge-methods'].items\"></element-multi-select>\n          </div>\n        </div>\n\n        <div class=\"clearfix\" *ngIf=\"isTemplatizedDCREnabled && isRequiredDCRCapabilitiesSelected()\">\n          <div class=\"sm-col sm-col-12 mt4\">\n            <h3 class=\"dashboard-main-panel-new-heading mt0 mb2\">Dynamic Client Registration</h3>\n          </div>\n          <div class=\"sm-col sm-col-12\">\n            <element-presence [data]=\"result['dynamic-client-registration-template']\"\n                              [isDynamicElement]=\"true\"\n                              (valueChanged)=\"setIsSecretVisible()\"></element-presence>\n          </div>\n          <div class=\"clearfix\"\n               *ngIf=\"result['dynamic-client-registration-template'] && result['dynamic-client-registration-template'].value\">\n            <div class=\"sm-col sm-col-12 mb2\">\n              <element-single-select [data]=\"result['authentication-method']\"\n                                     [canUpdate]=\"false\"\n                                     [allowClear]=\"false\"\n                                     [edit]=\"true\"></element-single-select>\n            </div>\n            <div class=\"sm-col sm-col-12\"\n                 *ngIf=\"result['authentication-method'].value === 'users-must-authenticate'\">\n              <element-multi-select [data]=\"result['authenticate-user-by']\"></element-multi-select>\n            </div>\n            <div class=\"sm-col sm-col-12\"\n                 *ngIf=\"result['authentication-method'].value === 'clients-must-authenticate'\">\n              <element-multi-select [data]=\"result['authenticate-client-by']\"></element-multi-select>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row mt4\" *ngIf=\"showUserAuthenticator\">\n          <h3 class=\"dashboard-main-panel-new-heading mt0 mb2\">User Authentication</h3>\n          <div class=\"mt2\">\n            <element-multi-select [data]=\"result['allowed-authenticators']\"></element-multi-select>\n          </div>\n\n          <div class=\"mt2\" *ngIf=\"result['authenticator-filters']\">\n            <element-multi-select\n                    [data]=\"result['authenticator-filters']\"></element-multi-select>\n          </div>\n\n          <div class=\"mt2\">\n            <element-input-select [data]=\"result['required-claims']\"></element-input-select>\n          </div>\n\n          <div class=\"clearfix mxn2 mt3\">\n            <div class=\"sm-col sm-col-6 px2\">\n              <element [data]=\"result['context-info']\"></element>\n            </div>\n            <div class=\"sm-col sm-col-6 px2\">\n              <element-checkbox [data]=\"result['force-authn']\"></element-checkbox>\n            </div>\n          </div>\n          <div class=\"clearfix mxn2\">\n            <div class=\"sm-col sm-col-6 px2\">\n              <element-input-single-select [data]=\"result['template-area']\"></element-input-single-select>\n            </div>\n            <div class=\"sm-col sm-col-6 px2\">\n              <element-number [data]=\"result['freshness']\"></element-number>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n<app-modal [isHidden]=\"isCreateScopeModalHidden\"\n           [title]=\"'Create New Scope'\"\n           (close)=\"closeCreateScopeModal()\">\n\n  <ng-template #content>\n    <div class=\"main-form\" align=\"left\">\n      <form ngNativeValidate (submit)=\"createNewScope()\">\n        <label class=\"\">Name</label>\n        <br/>\n        <input class=\"field col-6\"\n               type=\"text\"\n               name=\"newScopeName\"\n               [(ngModel)]=\"newScopeName\"\n               required\n               focusElement\n               placeholder=\"Enter name\">\n        <button type=\"submit\" class=\"button button-small button-primary button-inline\">Create</button>\n        <element-error [error]=\"errorMessage\"></element-error>\n      </form>\n    </div>\n  </ng-template>\n</app-modal>\n\n<app-modal [isHidden]=\"isDuplicateClientModalHidden\"\n           [title]=\"'Duplicate Client'\"\n           [toolbarIconClass]=\"'ion-ios-browsers'\"\n           (close)=\"closeDuplicateClientModal()\">\n\n  <ng-template #content>\n    <div class=\"main-form\" align=\"left\">\n      <form ngNativeValidate name=\"duplicateClientForm\" id=\"duplicateClientForm\" (submit)=\"duplicateClient()\">\n        <div class=\"\">\n          <label>Name</label>\n          <input type=\"text\"\n                 class=\"field col-12\"\n                 [(ngModel)]=\"duplicateClientName\"\n                 id=\"duplicateClientName\"\n                 name=\"duplicateClientName\"\n                 focusElement\n                 required>\n        </div>\n        <div class=\"col col-12\">\n          <element-error [error]=\"errorMessage\"></element-error>\n        </div>\n        <div class=\"mt2\">\n          <button id=\"createApp\" type=\"submit\" class=\"button button-success button-small\">Create</button>\n          <button type=\"reset\" class=\"button button-light-grey button-small\" (click)=\"closeDuplicateClientModal()\">\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n</app-modal>\n\n<app-modal [isHidden]=\"isCapabilitiesModalHidden\"\n           [title]=\"'Capabilities'\"\n           [toolbarIconClass]=\"'ion-android-expand'\"\n           (close)=\"closeCapabilitiesModal()\">\n\n  <ng-template #content>\n    <ng-container [ngSwitch]=\"currentCapabilityModalStep\">\n      <ng-container *ngSwitchCase=\"1\">\n        <p>Select capabilities</p>\n\n        <button type=\"button\" class=\"button button-success-outline button-tiny\"\n                (click)=\"updateAllCapabilities('isSelected', true)\">Select All\n        </button>\n        <button type=\"button\" class=\"button button-success-outline button-tiny\"\n                (click)=\"updateAllCapabilities('isSelected', false)\">Deselect All\n        </button>\n\n        <div class=\"mt2 mxn1\">\n          <div *ngFor=\"let item of capabilities | objectValues\"\n               (click)=\"capabilities[item.key].isSelected = !capabilities[item.key].isSelected\"\n               class=\"sm-col sm-col-4 createaccountlink-item px1 mb2\">\n        <span class=\"createaccountlink-item-selector\"\n              [ngClass]=\"{'active' : capabilities[item.key].isSelected}\">\n        </span>\n            <a class=\"icon-grid-item icon-grid-item--small clearfix\">\n              <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n                <i class=\"icon {{capabilities[item.key].icon || 'ion-cube'}}\"></i>\n              </div>\n              <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n                <h3 class=\"h5 mt0\">{{capabilities[item.key].displayName | capitalize}}</h3>\n                <ul class=\"m0 list-reset icon-grid-item-description-features\">\n                  <li>{{capabilities[item.key].info}}</li>\n                </ul>\n              </div>\n            </a>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"2\">\n        <div class=\"sm-col sm-col-12 mt2\"\n             *ngIf=\"capabilityModalResult['redirect-uris']\">\n          <div class=\"sm-col sm-col-6\">\n            <app-element-multi-select-v2 [data]=\"capabilityModalResult['redirect-uris']\"\n                                         [canUpdate]=\"false\"></app-element-multi-select-v2>\n          </div>\n        </div>\n        <div class=\"sm-col sm-col-12 mt2\"\n             *ngIf=\"capabilityModalResult['allowed-origins']\">\n          <div class=\"sm-col sm-col-6\">\n            <app-element-multi-select-v2 [data]=\"capabilityModalResult['allowed-origins']\"\n                                         [canUpdate]=\"false\"></app-element-multi-select-v2>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"3\">\n        <div class=\"sm-col sm-col-12 mt2\">\n          <div class=\"sm-col sm-col-6\">\n            <app-element-single-select-v2 [data]=\"capabilityModalResult['verifier']\"\n                                          [edit]=\"true\"\n                                          [allowClear]=\"false\"\n                                          [isValueProvided]=\"true\"\n                                          [isChoice]=\"true\"\n                                          [canUpdate]=\"false\"></app-element-single-select-v2>\n          </div>\n        </div>\n        <div class=\"sm-col sm-col-12 mt2\">\n          <div class=\"sm-col sm-col-6\" *ngIf=\"capabilityModalResult['verifier'].value === 'secret'\">\n            <element-password [data]=\"capabilityModalResult['secret']\"\n                              [numberOfCharacters]=\"64\"\n                              [canUpdate]=\"false\"></element-password>\n          </div>\n          <div class=\"sm-col sm-col-6\" *ngIf=\"capabilityModalResult['verifier'].value === 'asymmetric-key'\">\n            <app-element-single-select-v2 [data]=\"capabilityModalResult['asymmetric-key']\"\n                                          [allowClear]=\"false\"\n                                          [edit]=\"true\"\n                                          [canUpdate]=\"false\"></app-element-single-select-v2>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <div class=\"col col-12 mt2\">\n      <element-error [error]=\"capabilityErrorMessage\"></element-error>\n    </div>\n    <div class=\"col col-12 mt2\">\n      <button type=\"button\" class=\"button button-small button-success right\"\n              (click)=\"onNext()\">{{currentCapabilityModalStep < 3 ? 'Next' : 'Done'}}\n      </button>\n      <button *ngIf=\"currentCapabilityModalStep > 1\" type=\"button\"\n              class=\"button button-small button-light-grey right mr1\" (click)=\"onBack()\">Back\n      </button>\n    </div>\n  </ng-template>\n</app-modal>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/oauth/components/apps/new-client/client.component.html	(date 1534519233000)
+++ src/app/oauth/components/apps/new-client/client.component.html	(date 1534715018000)
@@ -654,13 +654,13 @@
             <div class="sm-col sm-col-6 px2">
               <h4>Web and Mobile Clients</h4>
               <element-checkbox [data]="result['code']"
-                                (valueChanged)="enableUserAuthenticator('code', $event);setIsSecretVisible();setCapabilitiesSelectedCount($event)"
+                                (valueChanged)="enableUserAuthentication('code', $event);setIsSecretVisible();setCapabilitiesSelectedCount($event)"
                                 (onGetValueCompleted)="setIsSecretVisible();setCapabilitiesSelectedCount($event, true)"></element-checkbox>
               <element-checkbox [data]="result['implicit']"
-                                (valueChanged)="enableUserAuthenticator('implicit', $event);setCapabilitiesSelectedCount($event)"
+                                (valueChanged)="enableUserAuthentication('implicit', $event);setCapabilitiesSelectedCount($event)"
                                 (onGetValueCompleted)="setCapabilitiesSelectedCount($event, true)"></element-checkbox>
               <element-checkbox [data]="result['assisted-token']"
-                                (valueChanged)="enableUserAuthenticator('assisted-token', $event);setCapabilitiesSelectedCount($event)"
+                                (valueChanged)="enableUserAuthentication('assisted-token', $event);setCapabilitiesSelectedCount($event)"
                                 (onGetValueCompleted)="setCapabilitiesSelectedCount($event, true)"></element-checkbox>
               <element-presence [data]="result['assertion']" [isDynamicElement]="true"></element-presence>
               <div class="mt2" *ngIf="result['assertion']?.value">
@@ -682,7 +682,7 @@
                                 (valueChanged)="setIsSecretVisible();setCapabilitiesSelectedCount($event)"
                                 (onGetValueCompleted)="setIsSecretVisible();setCapabilitiesSelectedCount($event, true)"></element-checkbox>
               <element-checkbox [data]="result['device-authorization']"
-                                (valueChanged)="setIsSecretVisible();enableUserAuthenticator('device-authorization', $event);
+                                (valueChanged)="setIsSecretVisible();enableUserAuthentication('device-authorization', $event);
                                                         setCapabilitiesSelectedCount($event); onDeviceAuthorizationChanged($event)"
                                 (onGetValueCompleted)="setCapabilitiesSelectedCount($event, true)"></element-checkbox>
             </div>
