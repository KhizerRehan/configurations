Index: src/app/authentication/components/authentication-actions/new-authentication-action/new-authentication-action-modal.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><app-modal [isHidden]=\"isHidden\"\n           [title]=\"isCreated ? 'Update ' + data.id + ' authentication action' : 'Create authentication action'\"\n           [customCssClasses]=\"['view-modal']\"\n           [toolbarIconClass]=\"'ion-flash'\"\n           (close)=\"closeModal()\">\n\n  <ng-template #toolbarActions>\n    <ng-container *ngIf=\"isCreated\">\n      <download-config-button [path]=\"data.path\"></download-config-button>\n      <button type=\"button\" class=\"button button-tiny button-primary-outline\"\n              appPermissionsConfig [path]=\"data.path\">\n        <i class=\"icon ion-ios-locked\"></i>\n      </button>\n      <button appReadOnlyMode type=\"button\" class=\"button button-tiny button-primary-outline\"\n              appDuplicatePath [modalTitle]=\"'Duplicate Authentication Action'\" [sourcePath]=\"data.path\">\n        <i class=\"icon ion-ios-browsers\"></i>\n      </button>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #content>\n\n    <form ngNativeValidate *ngIf=\"!isCreated\" name=\"createAuthActionForm\" (submit)=\"onCreateAction()\">\n      <label>1. Name</label>\n      <input type=\"text\"\n             name=\"actionName\"\n             class=\"block col-12 mb1 field\"\n             placeholder=\"Type name...\"\n             focusElement=\"true\"\n             required\n             (appRemoveSpecialCharacters)=\"data.id = $event\">\n\n      <div class=\"flex flex-center justify-between mt2 py2\">\n        <div class=\"flex-auto\">\n          <label>2. Select Type</label>\n        </div>\n        <div class=\"\" *ngIf=\"actionTypes.length > 5\">\n          <div class=\"field-group\">\n            <input type=\"search\" [(ngModel)]=\"actionTypeSearch\" name=\"search\" class=\"field col-12\"\n                   placeholder=\"Filter types...\" #searchField\n                   (focus)=\"searchClearBtn.style.display = actionTypeSearch ? 'block' : 'none'\"\n                   (input)=\"searchClearBtn.style.display = $event.target.value ? 'block' : 'none'\"/>\n            <button class=\"clear-search\" type=\"button\" style=\"display: none\" #searchClearBtn\n                    (click)=\"actionTypeSearch = ''; searchClearBtn.style.display = 'none'\">\n              <i class=\"icon ion-close-circled\"></i></button>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"icon-grid-flex-container flex flex-center flex-start flex-wrap\">\n\n        <div *ngFor=\"let actionType of actionTypes | search:null:['name']:actionTypeSearch\"\n             class=\"icon-grid-flex-item mb1\">\n          <a class=\"icon-grid-item icon-grid-item--tiny clearfix\"\n             (click)=\"data.actionType = actionType.name\"\n             [ngClass]=\"{'active': data.actionType === actionType.name}\">\n            <div class=\"sm-col sm-col-4 icon-grid-item-icon\">\n              <i class=\"icon {{actionType.icon}}\"></i>\n            </div>\n            <div class=\"sm-col sm-col-8 icon-grid-item-description\">\n              <h3 class=\"h5 m0\">{{actionType.displayName | capitalize}}</h3>\n            </div>\n          </a>\n        </div>\n\n      </div>\n\n      <div class=\"col col-12\">\n        <element-error [error]=\"error\"></element-error>\n      </div>\n\n      <div class=\"mt2 right-align\">\n        <button type=\"reset\" class=\"button button-small button-light-grey mr1\" (click)=\"closeModal()\">Cancel</button>\n        <button type=\"submit\" class=\"button button-small button-success\">Next</button>\n      </div>\n    </form>\n\n    <ng-container *ngIf=\"isCreated\" [ngSwitch]=\"data.actionType\">\n      <app-regex-transformers-step *ngSwitchCase=\"'regex-transformer'\" [data]=\"data\">\n      </app-regex-transformers-step>\n      <app-data-source-transformers-step *ngSwitchCase=\"'data-source-transformer'\" [data]=\"data\">\n      </app-data-source-transformers-step>\n      <app-script-transformer-step *ngSwitchCase=\"'script-transformer'\" [data]=\"data\">\n      </app-script-transformer-step>\n      <app-remove-attribute-transformer-step *ngSwitchCase=\"'remove-attribute-transformer'\" [data]=\"data\">\n      </app-remove-attribute-transformer-step>\n      <app-auto-link-account-step *ngSwitchCase=\"'auto-link-account'\" [data]=\"data\"></app-auto-link-account-step>\n      <app-lookup-linked-accounts-transformer-step *ngSwitchCase=\"'lookup-linked-accounts-transformer'\" [data]=\"data\">\n      </app-lookup-linked-accounts-transformer-step>\n      <app-resolve-linked-account-transformer-step *ngSwitchCase=\"'resolve-linked-account-transformer'\" [data]=\"data\">\n      </app-resolve-linked-account-transformer-step>\n      <app-auto-create-account-step *ngSwitchCase=\"'auto-create-account'\" [data]=\"data\"></app-auto-create-account-step>\n      <app-attribute-prompt-step *ngSwitchCase=\"'attribute-prompt'\" [data]=\"data\"></app-attribute-prompt-step>\n      <app-reset-password-step *ngSwitchCase=\"'reset-password'\" [data]=\"data\"></app-reset-password-step>\n      <app-switch-step *ngSwitchCase=\"'switch'\" [data]=\"data\"></app-switch-step>\n      <app-sequence-step *ngSwitchCase=\"'sequence'\" [data]=\"data\"></app-sequence-step>\n      <app-multi-factor-condition-step *ngSwitchCase=\"'multi-factor-condition'\" [data]=\"data\"></app-multi-factor-condition-step>\n      <app-generic-action-step *ngSwitchDefault [data]=\"data\"></app-generic-action-step>\n\n      <div class=\"mt2 right-align\">\n        <button type=\"button\" class=\"button button-small button-light-grey\" (click)=\"closeModal()\">Close</button>\n      </div>\n    </ng-container>\n\n  </ng-template>\n\n</app-modal>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/authentication/components/authentication-actions/new-authentication-action/new-authentication-action-modal.component.html	(date 1559042251000)
+++ src/app/authentication/components/authentication-actions/new-authentication-action/new-authentication-action-modal.component.html	(date 1559043280000)
@@ -6,12 +6,13 @@
 
   <ng-template #toolbarActions>
     <ng-container *ngIf="isCreated">
-      <download-config-button [path]="data.path"></download-config-button>
+      <download-config-button *ngIf="data.permissions.canRead" [path]="data.path"></download-config-button>
       <button type="button" class="button button-tiny button-primary-outline"
               appPermissionsConfig [path]="data.path">
         <i class="icon ion-ios-locked"></i>
       </button>
-      <button appReadOnlyMode type="button" class="button button-tiny button-primary-outline"
+      <button *ngIf="data.permissions.canRead && data.permissions.canUpdate"
+              appReadOnlyMode type="button" class="button button-tiny button-primary-outline"
               appDuplicatePath [modalTitle]="'Duplicate Authentication Action'" [sourcePath]="data.path">
         <i class="icon ion-ios-browsers"></i>
       </button>
Index: src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\nimport { Observable, Subject, forkJoin } from 'rxjs';\nimport { finalize, map, takeUntil } from 'rxjs/operators';\nimport { BatchOperationsService } from '../../../../../../core/services/batch-operations.service';\nimport { ConfigService } from '../../../../../../core/services/config.service';\nimport { EndpointsService } from '../../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../../core/services/http-api.service';\nimport { RequestBuilder } from '../../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../../../core/services/transaction.service';\nimport { ConfirmModal } from '../../../../../../shared/components';\nimport { TransformType } from '../transform-type.enum';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-regex-transformers-step',\n  templateUrl: 'regex-transformers-step.component.html'\n})\nexport class RegexTransformersStepComponent implements OnChanges, OnDestroy {\n  readonly destroyed$ = new Subject();\n\n  @Input() data: any;\n  transformType = TransformType;\n  url: string;\n  attributesUrl: string;\n  excludedAttributesUrl: string;\n  result: Array<any> = [];\n  selectedItems: Map<string, any> = new Map<string, any>();\n  error: any;\n\n  constructor(private Api: HttpApiService,\n              private Transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedData: SharedDataService,\n              private configService: ConfigService,\n              private batchService: BatchOperationsService) {\n  }\n\n  ngOnChanges(changes: any): void {\n    if (changes.data && changes.data.currentValue) {\n      this.data = changes.data.currentValue;\n      this.url = `${this.data.path}/${this.data.actionType}`;\n      this.attributesUrl = `${this.url}/attributes`;\n      this.excludedAttributesUrl = `${this.url}/excluded-attributes`;\n      this.loadData();\n      this.selectedItems.clear();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  loadData() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        forkJoin(\n          this.Api.postRequest(RequestBuilder.withGetListKeys(this.attributesUrl, transactionId)),\n          this.Api.postRequest(RequestBuilder.withGetValue(this.excludedAttributesUrl, transactionId))\n        )\n          .pipe(\n            takeUntil(this.destroyed$)\n          )\n          .subscribe(responses => {\n            this.result = [];\n            if (responses[0].code === ResponseCode.OK) {\n              const batchId = this.batchService.createBatch();\n              responses[0].data.keys.forEach(value => {\n                const from = value['attribute-base-path'] === '$root' ? value['attribute-name'] :\n                  `${value['attribute-base-path']}.${value['attribute-name']}`;\n                const data: any = {\n                  id: from, // this `id` will not be changed even if the `from` value is updated\n                  from: from,\n                  path: `${this.attributesUrl}{${value['attribute-base-path']} ${value['attribute-name']}}/`\n                };\n                this.batchService.addToBatch(batchId, RequestBuilder.withGetValues(data.path, transactionId, false, 1))\n                  .pipe(\n                    takeUntil(this.destroyed$),\n                    finalize(() => {\n                      this.result = [...this.result, data];\n                    })\n                  )\n                  .subscribe(response => {\n                      if (response.code === ResponseCode.OK) {\n                        data.values = response.data.value;\n                        data.type = data.values['replacement-value'] || data.values['matching-regex'] ?\n                          TransformType.REGEX_TRANSFORM : TransformType.NO_VALUE_TRANSFORM;\n                      }\n                    },\n                    error => console.log(error));\n              });\n              this.batchService.initiateRequest(batchId);\n            }\n            if (responses[1].code === ResponseCode.OK) {\n              responses[1].data.value.forEach(value => {\n                const data = {\n                  id: value, // this `id` will not be changed even if the `from` value is updated\n                  from: value,\n                  copy: value, // storing previous value so that it can be deleted when updating new value\n                  type: TransformType.EXCLUDE_ATTRIBUTE\n                };\n                this.result = [...this.result, data];\n              });\n            }\n          });\n      });\n  }\n\n  onAddNew() {\n    const data = {\n      id: `${Date.now() * -1}`, // this `id` will not be changed even if the value is updated\n      isNew: true,\n      values: {},\n      typeToggle: false\n    };\n    this.result = [data, ...this.result];\n  }\n\n  onSelectAll(isSelected: boolean) {\n    if (isSelected) {\n      this.result.forEach(item => {\n        // TODO: update this logic and use some more unique attribute for storing value in Map\n        this.selectedItems.set(item.id, item);\n      });\n    }\n    else {\n      this.selectedItems.clear();\n    }\n  }\n\n  onSelectItem(isSelected: boolean, item: any) {\n    if (isSelected) {\n      this.selectedItems.set(item.id, item);\n    }\n    else {\n      this.selectedItems.delete(item.id);\n    }\n  }\n\n  onKeyValueChanged(data: any) {\n    this.error = null;\n    data.hasError = false;\n    if (data.type === TransformType.EXCLUDE_ATTRIBUTE) {\n      this.setExcludedAttribute(data);\n    }\n    else {\n      this.createNewAttribute(data);\n    }\n  }\n\n  onDeleteSelectedItems() {\n    const itemsToDelete = [];\n    this.selectedItems.forEach(item => {\n      if (item.isNew) {\n        this.result = this.result.filter(attribute => attribute.id !== item.id);\n        this.selectedItems.delete(item.id);\n      }\n      else {\n        itemsToDelete.push(item.from);\n      }\n    });\n    if (itemsToDelete.length > 0) {\n      ConfirmModal.open(\n        'Delete Selected Attributes',\n        `Are you sure you want to delete selected attribute${itemsToDelete.length > 1 ? 's' : ''}: (<em>${itemsToDelete.join(', ')}</em>)?`,\n        'deleteSelectedItemsConfirmed',\n        this\n      );\n    }\n  }\n\n  deleteSelectedItemsConfirmed() {\n    this.error = null;\n    this.Transaction.getWriteTransaction()\n      .then((transactionId: number) => {\n        this.selectedItems.forEach(item => {\n          let observable;\n          if (item.type === TransformType.EXCLUDE_ATTRIBUTE) {\n            observable = this.deleteValue(item.from, this.excludedAttributesUrl);\n          }\n          else {\n            observable = this.deleteAttribute(item, transactionId);\n          }\n          observable.pipe(takeUntil(this.destroyed$))\n            .subscribe(isSuccess => {\n              if (isSuccess) {\n                this.result = this.result.filter(attribute => attribute.from !== item.from);\n              }\n            },\n            error => console.log(error));\n        });\n        this.selectedItems.clear();\n      })\n      .catch(error => {});\n  }\n\n  private createNewAttribute(data: any) {\n    if (data.from && data.from.trim()) {\n      data.from = data.from.trim();\n      const index = data.from.lastIndexOf('.');\n      let attributeBasePath;\n      let attributeName;\n      if (index > -1) {\n        attributeBasePath = data.from.substring(0, index);\n        attributeName = data.from.substring(index + 1);\n      }\n      else {\n        attributeBasePath = '$root';\n        attributeName = data.from;\n      }\n\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          const path = `${this.attributesUrl}{${attributeBasePath} ${attributeName}}/`;\n          this.Api.postRequest(RequestBuilder.withCreate(path, transactionId))\n            .pipe(\n              takeUntil(this.destroyed$)\n            )\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedData.incrementChangeCount(path);\n                  if (data.isNew) {\n                    data.path = path;\n                    data.isNew = false;\n                    data.values['attribute-base-path'] = attributeBasePath;\n                    data.values['attribute-name'] = attributeName;\n                    if (data.type === TransformType.REGEX_TRANSFORM) {\n                      data.values['transformed-attribute-name'] = data.from;\n                    }\n                  }\n                  else {\n                    this.Api.postRequest(RequestBuilder.withDelete(data.path, transactionId))\n                      .pipe(\n                        takeUntil(this.destroyed$)\n                      )\n                      .subscribe(response1 => {\n                        if (response1.code === ResponseCode.OK) {\n                          this.sharedData.incrementChangeCount(data.path);\n                          data.path = path;\n                          data.values['attribute-base-path'] = attributeBasePath;\n                          data.values['attribute-name'] = attributeName;\n                          const observables = [];\n                          if (data.values['matching-regex']) {\n                            observables.push(this.setValue(data.values['matching-regex'],\n                              data.path + 'matching-regex'));\n                          }\n                          if (data.values['replacement-value']) {\n                            observables.push(this.setValue(data.values['replacement-value'],\n                              data.path + 'replacement-value'));\n                          }\n                          if (data.values['transformed-attribute-name']) {\n                            observables.push(this.setValue(data.values['transformed-attribute-name'],\n                              data.path + 'transformed-attribute-name'));\n                          }\n                          forkJoin(observables)\n                            .pipe(\n                              takeUntil(this.destroyed$)\n                            )\n                            .subscribe(responses => {\n                                responses.forEach(isSuccess => {\n                                  if (!isSuccess) {\n                                    data.hasError = true;\n                                  }\n                                });\n                              },\n                              error => console.log(error));\n                        }\n                        else {\n                          data.hasError = true;\n                          this.error = response1;\n                        }\n                      });\n                  }\n                }\n                else {\n                  data.hasError = true;\n                  this.error = response;\n                }\n              },\n              error => console.log(error));\n        })\n      .catch(error => {});\n    }\n  }\n\n  private setExcludedAttribute(data: any) {\n    if (data.from) {\n      if (this.checkExcludedAttributeExists(data)) {\n        data.hasError = true;\n        this.error = 'Already exists.';\n      }\n      else {\n        this.setValue(data.from, this.excludedAttributesUrl)\n          .pipe(\n            takeUntil(this.destroyed$)\n          )\n          .subscribe(isSuccess => {\n              if (isSuccess) {\n                if (data.isNew) {\n                  data.copy = data.from;\n                  data.isNew = false;\n                }\n                else {\n                  this.deleteValue(data.copy, this.excludedAttributesUrl)\n                    .pipe(\n                      takeUntil(this.destroyed$)\n                    )\n                    .subscribe(isSuccess => {\n                        if (isSuccess) {\n                          data.copy = data.from;\n                        }\n                      },\n                      error => console.log(error));\n                }\n              }\n              else {\n                data.hasError = true;\n              }\n            },\n            error => console.log(error));\n      }\n    }\n  }\n\n  private checkExcludedAttributeExists(data: any) {\n    return this.result.find(item => {\n      return item.type === TransformType.EXCLUDE_ATTRIBUTE && item.copy === data.from && !item.isNew;\n    });\n  }\n\n  private setValue(value: string, path: string): Observable<any> {\n    return Observable.create(observer => {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withSetValue(value, path, transactionId))\n            .pipe(\n              takeUntil(this.destroyed$),\n              finalize(() => observer.complete())\n            )\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedData.incrementChangeCount(path);\n                  observer.next(true);\n                }\n                else {\n                  this.error = response;\n                  observer.next(false);\n                }\n              },\n              error => observer.error(error));\n        })\n      .catch(error => {});\n    });\n  }\n\n  private deleteValue(value: string, path: string): Observable<any> {\n    return Observable.create(observer => {\n      this.Transaction.getWriteTransaction()\n        .then(transaction => {\n          this.Api.postRequest(RequestBuilder.withDeleteValue(value, path, transaction))\n            .pipe(\n              takeUntil(this.destroyed$),\n              finalize(() => observer.complete())\n            )\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedData.incrementChangeCount(path);\n                  observer.next(true);\n                }\n                else {\n                  this.error = response;\n                  observer.next(false);\n                }\n              },\n              error => observer.error(error));\n        })\n      .catch(error => {});\n    });\n  }\n\n  private deleteAttribute(attributeToDelete: any, transactionId: number): Observable<boolean> {\n    return this.Api.postRequest(RequestBuilder.withDelete(attributeToDelete.path, transactionId))\n      .pipe(\n        map(response => {\n            if (response.code === ResponseCode.OK) {\n              this.sharedData.incrementChangeCount(attributeToDelete.path);\n              return true;\n            }\n            else {\n              this.error = response;\n              return false;\n            }\n          },\n          error => console.log(error))\n      );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.ts	(date 1559042251000)
+++ src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.ts	(date 1559044812000)
@@ -40,6 +40,7 @@
   ngOnChanges(changes: any): void {
     if (changes.data && changes.data.currentValue) {
       this.data = changes.data.currentValue;
+      console.log('data.childPermissions', this.data.childPermissions);
       this.url = `${this.data.path}/${this.data.actionType}`;
       this.attributesUrl = `${this.url}/attributes`;
       this.excludedAttributesUrl = `${this.url}/excluded-attributes`;
@@ -119,35 +120,50 @@
   }
 
   onSelectAll(isSelected: boolean) {
-    if (isSelected) {
-      this.result.forEach(item => {
-        // TODO: update this logic and use some more unique attribute for storing value in Map
-        this.selectedItems.set(item.id, item);
-      });
-    }
-    else {
-      this.selectedItems.clear();
+    if (this.data.childPermissions.canUpdate) {
+      if (isSelected) {
+        this.result.forEach(item => {
+          // TODO: update this logic and use some more unique attribute for storing value in Map
+          this.selectedItems.set(item.id, item);
+        });
+      }
+      else {
+        this.selectedItems.clear();
+      }
     }
+    else {
+      return false;
+    }
   }
 
   onSelectItem(isSelected: boolean, item: any) {
-    if (isSelected) {
-      this.selectedItems.set(item.id, item);
-    }
-    else {
-      this.selectedItems.delete(item.id);
+    if (this.data.childPermissions.canUpdate) {
+      if (isSelected) {
+        this.selectedItems.set(item.id, item);
+      }
+      else {
+        this.selectedItems.delete(item.id);
+      }
     }
+    else {
+      return false;
+    }
   }
 
   onKeyValueChanged(data: any) {
-    this.error = null;
-    data.hasError = false;
-    if (data.type === TransformType.EXCLUDE_ATTRIBUTE) {
-      this.setExcludedAttribute(data);
-    }
-    else {
-      this.createNewAttribute(data);
+    if (this.data.childPermissions.canUpdate) {
+      this.error = null;
+      data.hasError = false;
+      if (data.type === TransformType.EXCLUDE_ATTRIBUTE) {
+        this.setExcludedAttribute(data);
+      }
+      else {
+        this.createNewAttribute(data);
+      }
     }
+    else{
+      return false;
+    }
   }
 
   onDeleteSelectedItems() {
Index: src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><header class=\"py2\">\n  <div class=\"flex flex-center justify-between\">\n    <div class=\"flex-auto\">\n      <h1 class=\"h3 m0\"><i class=\"icon ion-regex icon-small inlineicon\"></i>Regex Transformers</h1>\n    </div>\n    <div>\n      <button appReadOnlyMode *ngIf=\"selectedItems.size > 0\" class=\"button button-tiny button-danger-outline mr2\"\n         (click)=\"onDeleteSelectedItems()\">\n        <i class=\"icon ion-trash-a inlineicon\"></i> Delete {{selectedItems.size}} selected\n      </button>\n      <button appReadOnlyMode type=\"button\" class=\"button button-tiny button-success\" (click)=\"onAddNew()\">\n        <i class=\"icon ion-plus inlineicon\"></i>Add\n      </button>\n    </div>\n  </div>\n</header>\n<div class=\"col col-12\">\n  <element-error [error]=\"error\"></element-error>\n</div>\n<table class=\"table inline-table action-table action-table-regex\">\n  <thead>\n  <tr>\n    <th>\n      <input type=\"checkbox\"\n             [checked]=\"result.length > 0 && selectedItems.size === result.length\"\n             (change)=\"onSelectAll($event.target.checked)\">\n    </th>\n    <th>From</th>\n    <th><i class=\"icon ion-shuffle inlineicon\"></i> Transform Value</th>\n    <th>Rename To</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr *ngFor=\"let item of result | orderBy: ['id']\">\n    <td>\n      <input type=\"checkbox\" [checked]=\"selectedItems.has(item.id)\"\n             (change)=\"onSelectItem($event.target.checked, item)\">\n    </td>\n    <td>\n      <input *ngIf=\"!item.type\" type=\"text\" class=\"field col-12 field-edit field-dimmed\" disabled\n             placeholder=\"Subject\">\n      <ng-container *ngIf=\"item.type\">\n        <input type=\"text\"\n               class=\"field col-12 field-edit\"\n               [ngClass]=\"{'error': item.hasError}\"\n               [ngModel]=\"item.from\"\n               name=\"from\"\n               (change)=\"onKeyValueChanged(item)\"\n               placeholder=\"Subject\"\n               (appRemoveSpecialCharacters)=\"item.from = $event\">\n        <div class=\"field-connector field-connector-right\"></div>\n      </ng-container>\n    </td>\n    <td>\n      <ng-container [ngSwitch]=\"item.type\">\n        <div *ngSwitchCase=\"transformType.REGEX_TRANSFORM\" class=\"regex-field-group\">\n          <div class=\"regex-field-group-item\">\n            <label>Matching regex</label>\n            <input *ngIf=\"item.isNew\" type=\"text\" class=\"field field-edit col-12 field-dimmed\" disabled>\n            <element-list *ngIf=\"!item.isNew\" [data]=\"item.values['matching-regex']\"\n                          [url]=\"item.path + 'matching-regex'\"\n                          [edit]=\"true\"\n                          (valueChanged)=\"item.values['matching-regex'] = $event.value\"></element-list>\n          </div>\n          <div class=\"regex-field-group-item\">\n            <label>Replacement value</label>\n            <input *ngIf=\"item.isNew\" type=\"text\" class=\"field field-edit col-12 field-dimmed\" disabled>\n            <element-list *ngIf=\"!item.isNew\" [data]=\"item.values['replacement-value']\"\n                          [url]=\"item.path + 'replacement-value'\"\n                          [edit]=\"true\"\n                          (valueChanged)=\"item.values['replacement-value'] = $event.value\"></element-list>\n          </div>\n        </div>\n        <p *ngSwitchCase=\"transformType.NO_VALUE_TRANSFORM\" class=\"m0 primary px2\">\n          <small><i class=\"icon ion-close-circled inlineicon primary\"></i>No value transform</small>\n        </p>\n        <p *ngSwitchCase=\"transformType.EXCLUDE_ATTRIBUTE\" class=\"m0 primary px2\">\n          <small><i class=\"icon ion-android-remove-circle inlineicon danger\"></i>Exclude attribute</small>\n        </p>\n        <div *ngSwitchDefault class=\"button-dropdown button-dropdown-usedby-on\">\n          <label class=\"button button-tiny button-primary-outline block\"\n                 (click)=\"item.typeToggle = !item.typeToggle\"\n                 (outsideClick)=\"item.typeToggle = false\">\n            Create value transform\n            <i class=\"icon ion-ios-arrow-{{item.typeToggle ? 'up' : 'down'}}\"></i>\n          </label>\n          <ul class=\"button-dropdown-menu\" [ngClass]=\"{'button-dropdown-menu-active': item.typeToggle}\">\n            <li>\n              <a class=\"block\" (click)=\"item.type = transformType.NO_VALUE_TRANSFORM\">\n                No value transform\n              </a>\n            </li>\n            <li>\n              <a class=\"block\" (click)=\"item.type = transformType.REGEX_TRANSFORM\">\n                Regex transform\n              </a>\n            </li>\n            <li>\n              <a class=\"block\" (click)=\"item.type = transformType.EXCLUDE_ATTRIBUTE\">\n                Exclude attribute\n              </a>\n            </li>\n          </ul>\n        </div>\n      </ng-container>\n    </td>\n    <td>\n      <ng-container *ngIf=\"item.type !== transformType.EXCLUDE_ATTRIBUTE\">\n        <div class=\"field-connector field-connector-left\" *ngIf=\"item.type\"></div>\n        <input *ngIf=\"item.isNew\" type=\"text\" class=\"field col-12 field-edit field-dimmed\" disabled>\n        <element-list *ngIf=\"!item.isNew\" [data]=\"item.values['transformed-attribute-name']\"\n                      [url]=\"item.path + 'transformed-attribute-name'\"\n                      [edit]=\"true\"\n                      (valueChanged)=\"item.values['transformed-attribute-name'] = $event.value\"></element-list>\n      </ng-container>\n    </td>\n  </tr>\n  </tbody>\n</table>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.html	(date 1559042251000)
+++ src/app/authentication/components/authentication-actions/new-authentication-action/steps/regex-transformers-step/regex-transformers-step.component.html	(date 1559044606000)
@@ -4,11 +4,12 @@
       <h1 class="h3 m0"><i class="icon ion-regex icon-small inlineicon"></i>Regex Transformers</h1>
     </div>
     <div>
-      <button appReadOnlyMode *ngIf="selectedItems.size > 0" class="button button-tiny button-danger-outline mr2"
-         (click)="onDeleteSelectedItems()">
+      <button appReadOnlyMode *ngIf="selectedItems.size > 0 && data.childPermissions.canDelete"
+              class="button button-tiny button-danger-outline mr2" (click)="onDeleteSelectedItems()">
         <i class="icon ion-trash-a inlineicon"></i> Delete {{selectedItems.size}} selected
       </button>
-      <button appReadOnlyMode type="button" class="button button-tiny button-success" (click)="onAddNew()">
+      <button *ngIf="data.childPermissions.canCreate"
+              appReadOnlyMode type="button" class="button button-tiny button-success" (click)="onAddNew()">
         <i class="icon ion-plus inlineicon"></i>Add
       </button>
     </div>
@@ -23,7 +24,8 @@
     <th>
       <input type="checkbox"
              [checked]="result.length > 0 && selectedItems.size === result.length"
-             (change)="onSelectAll($event.target.checked)">
+             (change)="onSelectAll($event.target.checked)"
+             [disabled]="!data.childPermissions.canUpdate">
     </th>
     <th>From</th>
     <th><i class="icon ion-shuffle inlineicon"></i> Transform Value</th>
@@ -34,7 +36,8 @@
   <tr *ngFor="let item of result | orderBy: ['id']">
     <td>
       <input type="checkbox" [checked]="selectedItems.has(item.id)"
-             (change)="onSelectItem($event.target.checked, item)">
+             (change)="onSelectItem($event.target.checked, item)"
+             [disabled]="!data.childPermissions.canUpdate">
     </td>
     <td>
       <input *ngIf="!item.type" type="text" class="field col-12 field-edit field-dimmed" disabled
@@ -47,7 +50,8 @@
                name="from"
                (change)="onKeyValueChanged(item)"
                placeholder="Subject"
-               (appRemoveSpecialCharacters)="item.from = $event">
+               (appRemoveSpecialCharacters)="item.from = $event"
+               [disabled]="!data.childPermissions.canUpdate">
         <div class="field-connector field-connector-right"></div>
       </ng-container>
     </td>
@@ -60,7 +64,9 @@
             <element-list *ngIf="!item.isNew" [data]="item.values['matching-regex']"
                           [url]="item.path + 'matching-regex'"
                           [edit]="true"
-                          (valueChanged)="item.values['matching-regex'] = $event.value"></element-list>
+                          (valueChanged)="item.values['matching-regex'] = $event.value"
+                          [permissions]="data.childPermissions"
+            ></element-list>
           </div>
           <div class="regex-field-group-item">
             <label>Replacement value</label>
@@ -68,7 +74,9 @@
             <element-list *ngIf="!item.isNew" [data]="item.values['replacement-value']"
                           [url]="item.path + 'replacement-value'"
                           [edit]="true"
-                          (valueChanged)="item.values['replacement-value'] = $event.value"></element-list>
+                          (valueChanged)="item.values['replacement-value'] = $event.value"
+                          [permissions]="data.childPermissions">
+            </element-list>
           </div>
         </div>
         <p *ngSwitchCase="transformType.NO_VALUE_TRANSFORM" class="m0 primary px2">
@@ -111,7 +119,9 @@
         <element-list *ngIf="!item.isNew" [data]="item.values['transformed-attribute-name']"
                       [url]="item.path + 'transformed-attribute-name'"
                       [edit]="true"
-                      (valueChanged)="item.values['transformed-attribute-name'] = $event.value"></element-list>
+                      (valueChanged)="item.values['transformed-attribute-name'] = $event.value"
+                      [permissions]="data.childPermissions"
+        ></element-list>
       </ng-container>
     </td>
   </tr>
Index: src/app/authentication/components/authentication-actions/authentication-actions.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, forkJoin, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, finalize, take, takeUntil } from 'rxjs/operators';\nimport { BatchOperationsService } from '../../../core/services/batch-operations.service';\nimport { ConfigService } from '../../../core/services/config.service';\nimport { ElementHandlerService } from '../../../core/services/element-handler.service';\nimport { EndpointsService } from '../../../core/services/endpoints';\nimport { HttpApiService } from '../../../core/services/http-api.service';\nimport { NavigationType } from '../../../core/services/navigation-type.enum';\nimport { NavigationService } from '../../../core/services/navigation.service';\nimport { PermissionsEvaluatorService } from '../../../core/services/permissions-evaluator.service';\nimport { RequestBuilder } from '../../../core/services/request.builder';\nimport { ResponseCode } from '../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../core/services/transaction.service';\nimport { AlertModal, ConfirmModal } from '../../../shared/components';\nimport { NewAuthenticationActionModalComponent } from './new-authentication-action/new-authentication-action-modal.component';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-authentication-actions',\n  templateUrl: 'authentication-actions.component.html'\n})\nexport class AuthenticationActionsComponent implements OnInit, OnDestroy {\n  readonly destroyed$ = new Subject();\n\n  @ViewChild(NewAuthenticationActionModalComponent) newAuthActionModal: NewAuthenticationActionModalComponent;\n\n  permissions: any = {};\n  actions: Array<any> = [];\n  filteredActions: Array<any> = [];\n  actionSearch$ = new BehaviorSubject<string>('');\n  searchValue: string = '';\n  selectedActions: Map<string, any> = new Map<string, any>();\n  isBusyCounter: number = 0;\n  url: string;\n\n  actionToDelete: any;\n  selectedActionId: string;\n  paramKey: string = 'authentication-action';\n\n  constructor(private Api: HttpApiService,\n              private Transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedData: SharedDataService,\n              private configService: ConfigService,\n              private elementHandler: ElementHandlerService,\n              private batchService: BatchOperationsService,\n              private navigationService: NavigationService,\n              private permissionsService: PermissionsEvaluatorService,\n              private route: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.url = this.endpoints.getAuthenticationActionUrl();\n    this.permissions = this.permissionsService.getPermissionsAsObject(this.url);\n    if (this.permissions.canRead) {\n      this.loadData();\n    }\n    this.actionSearch$\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe(value => {\n        this.searchValue = value;\n        this.filterActions();\n      });\n    this.route.params.pipe(take(1)).subscribe(params => {\n      this.selectedActionId = params['id'];\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  loadData() {\n    this.isBusyCounter++;\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.url, transactionId))\n          .pipe(\n            takeUntil(this.destroyed$),\n            finalize(() => this.isBusyCounter--)\n          )\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.actions = [];\n                this.filteredActions = [];\n                const batchId = this.batchService.createBatch();\n                response.data.keys.forEach(value => {\n                  let data: any = {\n                    id: value.id,\n                    path: this.url + '{' + value.id + '}',\n                    edit: false,\n                    usedByToggle: false,\n                    editToggle: false\n                  };\n                  data.permissions = this.permissionsService.getPermissionsAsObject(data.path);\n                  if (!data.permissions.canRead) {\n                    return;\n                  }\n                  this.isBusyCounter++;\n\n                  forkJoin(\n                    this.batchService.addToBatch(batchId, RequestBuilder.withSelectedCase(data.path, 'action-type',\n                      transactionId)),\n                    this.batchService.addToBatch(batchId, RequestBuilder.withQuery(`/profiles/profile/settings/auth:authentication-service/authenticators/authenticator[authentication-actions[sso = '${data.id}' or login = '${data.id}']]`,\n                      transactionId, ['id']))\n                  )\n                    .pipe(\n                      takeUntil(this.destroyed$),\n                      finalize(() => {\n                        this.actions.push(data);\n                        this.filteredActions = [...this.filteredActions, data];\n                        if (this.selectedActionId === data.id) {\n                          this.onEditAction(data);\n                          this.selectedActionId = null;\n                        }\n                        this.isBusyCounter--;\n                      })\n                    )\n                    .subscribe(responses => {\n                        if (responses[0].code === ResponseCode.OK) {\n                          data.actionType = responses[0].data.value;\n                        }\n                        if (responses[1].code === ResponseCode.OK) {\n                          data.usedBy = responses[1].data.results.map(result => result.id);\n                        }\n                      },\n                      error => console.log(error));\n                });\n                this.batchService.initiateRequest(batchId);\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  filterActions() {\n    if (this.searchValue) {\n      this.selectedActions.clear();\n      const searchValue = this.searchValue.toLowerCase();\n      this.filteredActions = this.actions.filter(action => {\n        return action.id.toLowerCase().indexOf(searchValue) > -1 ||\n          action.actionType.toLowerCase().indexOf(searchValue) > -1;\n      }).map(action => Object.assign({}, action));\n    }\n    else {\n      this.filteredActions = Object.assign([], this.actions);\n    }\n  }\n\n  onSelectAll(isSelected: boolean) {\n    if (isSelected) {\n      this.filteredActions.forEach(action => {\n        this.selectedActions.set(action.id, action);\n      });\n    }\n    else {\n      this.selectedActions.clear();\n    }\n  }\n\n  onSelectAction(isSelected: boolean, action: any) {\n    if (isSelected) {\n      this.selectedActions.set(action.id, action);\n    }\n    else {\n      this.selectedActions.delete(action.id);\n    }\n  }\n\n  onDeleteSelectedActions() {\n    if (this.selectedActions.size === 1) {\n      this.onDeleteAction(this.selectedActions.values().next().value);\n    }\n    else {\n      ConfirmModal.open(\n        'Delete Selected Actions',\n        `Are you sure you want to delete selected actions: (<em>${Array.from(this.selectedActions.keys()).join(', ')}</em>)?`,\n        'deleteSelectedActionsConfirmed',\n        this\n      );\n    }\n  }\n\n  onDeleteAction(action: any) {\n    if (action.permissions.canDelete) {\n      this.actionToDelete = action;\n      ConfirmModal.open(\n        'Delete Action',\n        'Are you sure you want to delete action <em>' + action.id + '</em>?',\n        'deleteActionConfirmed',\n        this\n      );\n    }\n  }\n\n  deleteSelectedActionsConfirmed() {\n    this.Transaction.getWriteTransaction()\n      .then((transactionId: number) => {\n        this.selectedActions.forEach(action => {\n          if (action.permissions.canDelete) {\n            this.deleteAction(action, transactionId);\n          }\n        });\n      })\n      .catch(error => {});\n  }\n\n  deleteActionConfirmed() {\n    this.Transaction.getWriteTransaction()\n      .then((transactionId: number) => {\n        this.deleteAction(this.actionToDelete, transactionId);\n      })\n      .catch(error => {});\n  }\n\n  onCreateNewAction() {\n    this.newAuthActionModal.openModal();\n  }\n\n  onEditAction(action: any) {\n    this.newAuthActionModal.openModal(action);\n  }\n\n  onActionCreated(data: any) {\n    data.usedBy = [];\n    data.edit = false;\n    data.editToggle = false;\n    data.usedByToggle = false;\n    this.actions.push(data);\n    this.filterActions();\n  }\n\n  onNavigate(path: string) {\n    this.navigationService.navigateToUrl({url: path}, NavigationType.CHANGE);\n  }\n\n  private deleteAction(actionToDelete: any, transactionId: number) {\n    this.Api.postRequest(RequestBuilder.withDelete(actionToDelete.path, transactionId))\n      .pipe(\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(response => {\n          if (response.code === ResponseCode.OK) {\n            this.actions = this.actions.filter(action => actionToDelete.id !== action.id);\n            this.filteredActions = this.filteredActions.filter(action => actionToDelete.id !== action.id);\n            this.selectedActions.delete(actionToDelete.id);\n            this.sharedData.incrementChangeCount(actionToDelete.path);\n          }\n          else {\n            AlertModal.open('Delete action failed', 'Cannot delete action: ' + actionToDelete.id);\n          }\n        },\n        error => console.log(error));\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/authentication/components/authentication-actions/authentication-actions.component.ts	(date 1559042251000)
+++ src/app/authentication/components/authentication-actions/authentication-actions.component.ts	(date 1559045003000)
@@ -103,6 +103,7 @@
                   if (!data.permissions.canRead) {
                     return;
                   }
+                  data.childPermissions = this.permissionsService.getChildPermissionsAsObject(data.path);
                   this.isBusyCounter++;
 
                   forkJoin(
