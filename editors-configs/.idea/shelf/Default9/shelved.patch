Index: src/app/core/services/endpoints.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from '@angular/core';\nimport { SharedDataService } from './shared-data.service';\n\n@Injectable()\nexport class EndpointsService {\n\n  constructor(private sharedData: SharedDataService) {\n  }\n\n  getEnvironmentUrl(value: string) {\n    return '/environments/environment/' + (value || \"\");\n  }\n\n  getHardwareSecurityModuleUrl() {\n    return '/facilities/crypto/hardware-security-module';\n  }\n\n  getProfilesUrl(value?: string) {\n    return '/profiles/profile/' + (value || \"\");\n  }\n\n  getOauthProfileUrl() {\n    return this.getProfileUrl('settings/authorization-server/');\n  }\n\n  getAuthenticationProfileUrl() {\n    return this.getProfileUrl('settings/authentication-service/');\n  }\n\n  getUserManagementProfileUrl() {\n    return this.getProfileUrl('settings/user-management-service/');\n  }\n\n  getProfileUrl(partialUrl: string) {\n    return '/profiles/profile{' + this.sharedData.getProfile().id + ' ' + this.sharedData.getProfile().type + '}/' + partialUrl;\n  }\n\n  getLoginUrl() {\n    return 'login';\n  }\n\n  getExposeDetailedErrorMessagesUrl() {\n    return this.getProfilesUrl('expose-detailed-error-messages');\n  }\n\n  getOAuthScopesUrl() {\n    return this.getProfileUrl('settings/authorization-server/scopes/scope');\n  }\n\n  getOAuthClientsUrl() {\n    return this.getProfileUrl('settings/authorization-server/client-store/config-backed/client');\n  }\n\n  getAuthenticationProfileLeafUrl() {\n    return this.getProfileUrl('settings/authorization-server/authentication-service/authentication-profile');\n  }\n\n  getEndpointsUrl() {\n    return this.getProfileUrl('endpoints/endpoint');\n  }\n\n  getAuthDomainsUrl() {\n    return this.getProfileUrl('settings/authentication-service/account-domains/account-domain');\n  }\n\n  getAuthAccountManagerUrl() {\n    return this.getProfileUrl('settings/authentication-service/authenticators/authenticator{ID}/account-linking/linking-account-manager');\n  }\n\n  getAuthAccountLinkingUrl() {\n    return this.getProfileUrl('settings/authentication-service/authenticators/authenticator{ID}/account-linking');\n  }\n\n  getAuthAppsUrl() {\n    return this.getProfileUrl('settings/authentication-service/service-providers/service-provider');\n  }\n\n  getAuthProtocolsUrl() {\n    return this.getProfileUrl('settings/authentication-service/protocols/protocol');\n  }\n\n  getAuthorizationsUrl() {\n    return '/processing/authorization-managers/authorization-manager';\n  }\n\n  getAuthListUrl() {\n    return this.getProfileUrl('settings/authentication-service/authenticators/authenticator');\n  }\n\n  getAuthenticationActionUrl() {\n    return this.getProfileUrl('settings/authentication-service/authentication-actions/authentication-action');\n  }\n\n  getAuthenticatorTypeUrl() {\n    return \"/profiles/profile/settings/authentication-service/authenticators/authenticator/authenticator-type\";\n  }\n\n\n  getAuthenticatorsUrl() {\n    return \"/profiles/profile[id='%profileID']/settings/authentication-service/authenticators/authenticator\";\n  }\n\n  getFacilitiesDataSourcesUrl() {\n    return \"/facilities/data-sources/data-source\";\n  }\n\n  getFacilitiesSmsProvidersUrl() {\n    return \"/facilities/sms-providers/sms-provider\";\n  }\n\n  getFacilitiesEmailProvidersUrl() {\n    return \"/facilities/email-providers/email-provider\";\n  }\n\n  getFacilitiesHttpClientsUrl() {\n    return \"/facilities/http/client\";\n  }\n\n  getFacilitiesCredentialManagersUrl() {\n    return \"/processing/credential-managers/credential-manager\";\n  }\n\n  getFacilitiesAccountManagersUrl() {\n    return \"/processing/account-managers/account-manager\";\n  }\n\n  getProceduresUrl() {\n    return \"/processing/procedures\";\n  }\n\n  getEnvironmentDataSourceUrl() {\n    return \"/facilities/caching-services/default-caching-service/data-source\";\n  }\n\n  getEnvironmentRollingSessionPeriodUrl() {\n    return \"/facilities/caching-services/rolling-session-period\";\n  }\n\n  getEnvironmentEmailProviderUrl () {\n    return \"/environments/environment/services/zones/default-zone/email-provider\";\n  }\n\n  getDeploymentsUrl() {\n    return \"/environments/environment/services/service\";\n  }\n\n  getServerSSLKeysUrl() {\n    return \"/facilities/crypto/ssl/server-keystore\";\n  }\n\n  getClientSSLKeysUrl() {\n    return \"/facilities/crypto/ssl/client-keystores/client-keystore\"\n  }\n\n  getServerTrustStoresUrl() {\n    return \"/facilities/crypto/ssl/server-truststore/server-certificate\";\n  }\n\n  getClientTrustStoresUrl() {\n    return \"/facilities/crypto/ssl/client-truststore/client-certificate\";\n  }\n\n  getSigningKeysUrl() {\n    return \"/facilities/crypto/signing-keys/signing-key\";\n  }\n\n  getSignatureVerificiationKeysUrl() {\n    return \"/facilities/crypto/signature-verification-keys/signature-verification-key\";\n  }\n\n  getEncryptionKeysUrl() {\n    return \"/facilities/crypto/encryption-keys/encryption-key\";\n  }\n\n  getDecryptionKeysUrl() {\n    return \"/facilities/crypto/decryption-keys/decryption-key\";\n  }\n\n  getCryptoKeystoresApiUrl() {\n    return \"/facilities/crypto/\";\n  }\n\n  getTransformersUrl() {\n    return \"/processing/attribute-transformers/attribute-transformer\";\n  }\n\n  getUsersUrl() {\n    return \"/aaa/authentication/users/user\";\n  }\n\n  getTokenIssuersUrl() {\n    return this.getProfileUrl('token-issuers');\n  }\n\n  getOAuthTokenIssuersUrl() {\n    return this.getProfileUrl('token-issuers/default-token-issuer');\n  }\n\n  getOAuthCustomTokenIssuerUrl() {\n    return this.getProfileUrl('token-issuers/custom-token-issuer');\n  }\n\n  getAuthFiltersUrl() {\n    return this.getProfileUrl('settings/authentication-service/authenticator-filters/authenticator-filter');\n  }\n\n  getUserManagementEndpointsUrl() {\n    return this.getProfileUrl('endpoints/endpoint');\n  }\n\n  getUserManagementDataSourcesAttributesUrl() {\n    return this.getUserManagementProfileUrl()+\"attribute-data-sources\";\n  }\n\n  getDefaultDataSourceUrl(){\n    return this.getProfileUrl(\"token-issuers/default-token-issuer/default-data-source\");\n  }\n\n  getTokenProceduresFlowUrl() {\n    return \"/processing/procedures/token-procedure/flow\";\n  }\n\n  getTemplatizedDynamicClientRegistrationUrl() {\n    return this.getProfileUrl(\"settings/authorization-server/dynamic-client-registration/templatized\");\n  }\n\n  getLicenseKeyUrl() {\n    return \"/processing/license-key\";\n  }\n\n  getEventListenersUrl() {\n    return \"/processing/event-listeners/event-listener\";\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/core/services/endpoints.ts	(date 1542008233000)
+++ src/app/core/services/endpoints.ts	(date 1542008773000)
@@ -231,4 +231,12 @@
   getEventListenersUrl() {
     return "/processing/event-listeners/event-listener";
   }
+
+  getPSD2CountriesListUrl() {
+    return 'https://webgate.ec.europa.eu/tl-browser/api/search/countries_list';
+  }
+
+  getPSD2TLUrl() {
+    return 'https://webgate.ec.europa.eu/tl-browser/api/tl';
+  }
 }
Index: src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpClient } from '@angular/common/http';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BatchOperationsService } from '../../../../../core/services/batch-operations.service';\nimport { EndpointsService } from '../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../../core/services/modal.service';\nimport { RequestBuilder } from '../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../../core/services/transaction.service';\n\nexport enum TrustStoreMethod {\n  TEXT,\n  FILE,\n  HOST,\n  PSD2\n}\n\n@Component({\n  selector: 'app-trust-store-modal',\n  templateUrl: './trust-store-modal.component.html'\n})\nexport class TrustStoreModal implements OnInit {\n  readonly specialCharactersRegex = /[\\*\\.\\/\\\\\\?\\:\\s\\-]/g;\n  readonly step1Descriptions = {\n    [TrustStoreMethod.TEXT]: 'Copy and paste the PEM-encoded or JWKS text of the keys you wish to trust into the textarea below. ' +\n    'PEM-encoded files often have a file extension of .pem, .key, .cer, .cert and more. A PEM-encoded file is text ' +\n    'usually begins with the header -----BEGIN CERTIFICATE-----. (If this header is omitted, it will be automatically ' +\n    'added as necessary.) JWKS keys are encoded in JSON. You may drag and drop a file onto the text area.',\n\n    [TrustStoreMethod.FILE]: 'Select or drag and drop a PEM- or DER-encoded file, JWKS file, or a keystore file that contains keys you ' +\n    'wish to trust. Common file extensions are .pem, .key, .der, .cer, .cert, .jwks, .json, .jks, .jceks, .ks, .p12, .pfx or .pkcs12. ' +\n    'If the file is encrypted, enter the password necessary to decrypt it.',\n\n    [TrustStoreMethod.HOST]: 'Enter a host or choose one of the common ones from the dropdown list. After selecting or typing a host, ' +\n    'click the Next button. The certificates used by that server will be displayed and you will have the option to view and trust them.'\n  };\n  readonly step2Description = '';\n  readonly step1ErrorMessages = {\n    [TrustStoreMethod.TEXT]: 'An error occurred processing the text. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.FILE]: 'An error occurred processing the file. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.HOST]: 'An error occurred fetching certificates from the given host. Ensure that it is correct, and try again. If ' +\n    'it is correct, obtain the certificates by other means and upload them as a file.'\n  };\n  readonly commonHosts: Array<string> = ['https://appapi.bankid.com', 'https://appapi.test.bankid.com'];\n\n  @Input() isHidden: boolean = true;\n  @Input() url: string;\n  @Input() reloadAfterCreation: boolean;\n  @Input() title: string;\n  @Input() type: string;\n  @Output() created = new EventEmitter();\n  @Output() close = new EventEmitter();\n  @ViewChild('fileInput') fileInput;\n\n  trustStoreMethod = TrustStoreMethod;\n  isBusyCounter: number = 0;\n  fileDragActiveCounter: number = 0;\n  isEdit: boolean;\n  selectedFile: any = {};\n  showPassword: boolean;\n  data: any = {};\n  hostData: any = {};\n  error: any;\n  certificateChains: any;\n  selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;\n  currentStep: number = 1;\n  selectedKey: any;\n  callback: string;\n  caller: any;\n  isKeyDetailsModalHidden: boolean = true;\n  isHostsDropdownShown: boolean;\n\n  private paramKey: string;\n  private static modal = null;\n\n  constructor(private http: HttpClient,\n              private api: HttpApiService,\n              private transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedService: SharedDataService,\n              private modalService: ModalService,\n              private batchService: BatchOperationsService) {\n    if (!TrustStoreModal.modal) {\n      TrustStoreModal.modal = this;\n    }\n  }\n\n  ngOnInit(): any {\n    this.paramKey = this.sharedService.getSelectedParam(this.type + '-facilities');\n    this.data = {};\n    this.hostData = {};\n    this.isEdit = false;\n    if (this.paramKey) {\n      this.data.id = this.paramKey;\n      this.isEdit = true;\n    }\n    this.isBusyCounter = 0;\n  }\n\n  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean, callback: string, caller: any) {\n    let self = TrustStoreModal.modal;\n    self.title = title;\n    self.url = url;\n    self.error = null;\n    self.type = type;\n    self.reloadAfterCreation = reloadAfterCreation;\n    self.callback = callback;\n    self.caller = caller;\n    self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');\n    self.data = {};\n    self.hostData = {};\n    self.isEdit = false;\n    if (self.paramKey) {\n      self.data.id = self.paramKey;\n      self.isEdit = true;\n    }\n    self.isHidden = false;\n    self.isBusyCounter = 0;\n    self.modalService.addOpenedModal('TrustStoreModal', self, 'closeModal');\n    SharedDataService.lockScroll();\n  }\n\n  public static close() {\n    TrustStoreModal.modal.closeModal();\n  }\n\n  closeModal() {\n    this.isHidden = true;\n    this.selectedFile = {};\n    this.data = {};\n    this.hostData = {};\n    this.error = null;\n    this.isBusyCounter = 0;\n    this.selectedMethod = TrustStoreMethod.TEXT;\n    this.currentStep = 1;\n    this.certificateChains = null;\n    this.showPassword = false;\n    this.modalService.removeOpenedModal('TrustStoreModal');\n    this.close.emit();\n    SharedDataService.unlockScroll();\n  }\n\n  onTextAreaFilesDropped(fileList: Array<File>) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      let fileReader = new FileReader();\n      this.data.keystore = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        const data = event.target.result.substring(index);\n        this.data.keystoreText = this.sharedService.decodeBase64(data);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }\n\n  getFileData(fileList: Array<File>, isFileDnd?: boolean) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      const ext = file.name.slice((file.name.lastIndexOf('.') - 1 >>> 0) + 1); // extracting . with the extension as well\n      this.selectedFile.name = file.name;\n      this.selectedFile.ext = ext;\n      let fileReader = new FileReader();\n      this.data.keystoreFile = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        this.data.keystoreFile = event.target.result.substring(index);\n      };\n      fileReader.readAsDataURL(file);\n    }\n    else {\n      this.data.keystoreFile = null;\n      this.selectedFile = {};\n    }\n    if (isFileDnd) {\n      this.fileInput.nativeElement.value = '';\n    }\n  }\n\n  onStep1Submit() {\n    this.error = null;\n    let requestData;\n    if (this.selectedMethod === TrustStoreMethod.TEXT) {\n      if (this.data.keystoreText) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreText);\n      }\n      else {\n        this.error = 'Please enter some text.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.FILE) {\n      if (this.data.keystoreFile) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreFile, this.data.password);\n      }\n      else {\n        this.error = 'Please select a file.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.HOST) {\n      if (!this.hostData.value) {\n        this.error = 'Please enter a host.';\n      }\n      else if (this.hostData.hasError) {\n        this.error = 'Please enter a valid host.';\n      }\n      else {\n        requestData = RequestBuilder.withGetTruststore(this.hostData.value);\n      }\n    }\n    if (!requestData) {\n      return;\n    }\n    this.isBusyCounter++;\n    this.api.postRequest(requestData)\n      .finally(() => this.isBusyCounter--)\n      .subscribe(response => {\n          if (response.code !== ResponseCode.OK) {\n            this.error = this.step1ErrorMessages[this.selectedMethod];\n          }\n          else {\n            this.certificateChains = response.data.chains;\n            this.certificateChains.forEach(certificate => {\n              certificate.keys = certificate.keys.map(key => {\n                if (key.id && isNaN(key.id)) {\n                  const idTokens = key.id.split(',');\n                  idTokens.forEach(token => {\n                    if (token.trim().startsWith('CN=')) {\n                      key.commonName = token.split('=')[1];\n                      key.commonName = key.commonName.replace(this.specialCharactersRegex, '_');\n                    }\n                  });\n                }\n                key.randomId = SharedDataService.generateRandomString();\n                return key;\n              })\n                .reverse();\n            });\n            if (this.certificateChains.length === 1 && this.certificateChains[0].keys.length === 1) {\n              this.certificateChains[0].keys[0].isSelected = true;\n            }\n            this.currentStep++;\n          }\n        },\n        error => console.log(error));\n  }\n\n  onStep2Submit() {\n    this.error = null;\n    const selectedKeys = [];\n    this.certificateChains.forEach(chain => {\n      chain.keys.forEach(key => {\n        key.hasError = false;\n        key.commonName = key.commonName ? key.commonName.trim().replace(this.specialCharactersRegex, '_') : '';\n        if (key.isSelected) {\n          selectedKeys.push(key);\n        }\n      });\n    });\n    if (selectedKeys.length === 0) {\n      this.error = 'Please select at least one key.';\n    }\n    else {\n      const tempKeyList = [];\n      const invalidKeys = selectedKeys.filter(key => {\n        if (!key.commonName) {\n          key.hasError = true;\n          return true;\n        }\n        else if (tempKeyList.includes(key.commonName)) {\n          this.error = 'Duplicate key names.';\n          key.hasError = true;\n          return true;\n        }\n        else {\n          tempKeyList.push(key.commonName);\n          return false;\n        }\n      });\n      if (invalidKeys.length === 0) {\n        this.checkIfKeysExists(selectedKeys)\n          .subscribe(exists => {\n            if (exists) {\n              this.error = 'A key with this name already exists.';\n            }\n            else {\n              const batchId = this.batchService.createBatch();\n              const requests = [];\n              selectedKeys.forEach(key => {\n                const data = {\n                  id: key.commonName,\n                  keystore: key.keyData\n                };\n                requests.push(\n                  this.batchService.addToBatch(batchId, RequestBuilder.withAddKeystore(this.type, data))\n                    .map(response => {\n                      if (response.code !== ResponseCode.OK) {\n                        key.hasError = true;\n                      }\n                      else {\n                        this.created.emit({value: data.id, reload: this.reloadAfterCreation});\n                        if (this.callback && this.caller && data.id) {\n                          this.caller[this.callback](data.id);\n                        }\n                      }\n                      return response;\n                    })\n                );\n              });\n              this.isBusyCounter++;\n              Observable.forkJoin(requests)\n                .finally(() => this.isBusyCounter--)\n                .subscribe((responses: Array<any>) => {\n                    const failedResponses = responses.filter(response => response.code !== ResponseCode.OK);\n                    if (failedResponses.length > 0) {\n                      this.error = failedResponses[0];\n                    }\n                    else {\n                      this.closeModal();\n                    }\n                  },\n                  error => console.log(error));\n              this.batchService.initiateRequest(batchId);\n            }\n          },\n            error => console.log(error));\n      }\n    }\n  }\n\n  onBack() {\n    this.currentStep--;\n  }\n\n  openKeyDetailsModal(key: any) {\n    this.selectedKey = key;\n    this.isKeyDetailsModalHidden = false;\n    this.modalService.addOpenedModal('KeyDetailsModal', this, 'closeKeyDetailsModal');\n  }\n\n  closeKeyDetailsModal() {\n    this.isKeyDetailsModalHidden = true;\n    this.modalService.removeOpenedModal('KeyDetailsModal');\n  }\n\n  checkIfKeysExists(keys: Array<any>): Observable<boolean> {\n    return Observable.create(observer => {\n      this.transaction.getReadTransaction()\n        .then(transactionId => {\n          const batchId = this.batchService.createBatch();\n          const requests = keys.map(key => {\n            return this.batchService.addToBatch(batchId,\n              RequestBuilder.withExists(`${this.url}{${key.commonName}}`, transactionId))\n              .map(response => {\n                if (response.code === ResponseCode.OK && response.data.value) {\n                  key.hasError = true;\n                  return {exists: true};\n                }\n                else {\n                  return {exists: false};\n                }\n              });\n          });\n          Observable.forkJoin(requests)\n            .finally(() => observer.complete())\n            .subscribe(responses => {\n              observer.next(responses.some(response => response.exists));\n            },\n              error => observer.error(error));\n          this.batchService.initiateRequest(batchId);\n        });\n\n    });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(date 1542008233000)
+++ src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(date 1542019562000)
@@ -64,6 +64,7 @@
   showPassword: boolean;
   data: any = {};
   hostData: any = {};
+  PSD2Data: any = {};
   error: any;
   certificateChains: any;
   selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;
@@ -93,6 +94,7 @@
     this.paramKey = this.sharedService.getSelectedParam(this.type + '-facilities');
     this.data = {};
     this.hostData = {};
+    this.PSD2Data = {};
     this.isEdit = false;
     if (this.paramKey) {
       this.data.id = this.paramKey;
@@ -120,6 +122,8 @@
     }
     self.isHidden = false;
     self.isBusyCounter = 0;
+    self.loadPSD2Countries();
+
     self.modalService.addOpenedModal('TrustStoreModal', self, 'closeModal');
     SharedDataService.lockScroll();
   }
@@ -144,6 +148,33 @@
     SharedDataService.unlockScroll();
   }
 
+  loadPSD2Countries() {
+    const oReq = new XMLHttpRequest();
+    oReq.addEventListener("load", (response) => {
+      console.log(response);
+    });
+    oReq.open("GET", this.endpoints.getPSD2CountriesListUrl());
+    oReq.send();
+    // this.api.get(this.endpoints.getPSD2CountriesListUrl())
+    //   .subscribe((response: any) => {
+    //     if (response.responseStatus === 200) {
+    //       const countriesData = {};
+    //       response.content.forEach(item => {
+    //         if (!item.checked) {
+    //           countriesData[item.countryName] = item;
+    //         }
+    //       });
+    //       this.PSD2Data['country'] = {
+    //         name: 'psd2-country',
+    //         displayName: 'Country',
+    //         data: countriesData,
+    //         items: response.content.map(country => country.countryName)
+    //       };
+    //     }
+    //   },
+    //     error => console.log(error));
+  }
+
   onTextAreaFilesDropped(fileList: Array<File>) {
     this.error = null;
     if (fileList.length === 1) {
Index: src/app/core/services/http-api.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/map';\nimport { Observable } from 'rxjs/Rx';\nimport { ConfirmDialog } from '../../shared/components/modals/confirm-dialog-modal/confirm-dialog-modal.component';\nimport { ServerReconnectModal } from '../../shared/components/modals/server-reconnect-modal/server-reconnect.modal';\nimport { Constants } from './constants';\nimport { HttpStatus } from './HttpStatus';\nimport { NavigationService } from './navigation.service';\nimport { ResponseCode } from './ResponseCode';\nimport { SharedDataService } from './shared-data.service';\n\n@Injectable()\nexport class HttpApiService {\n\n  private static self: HttpApiService;\n  private requestID: number = 1;\n\n  constructor(private http: HttpClient,\n              private sharedService: SharedDataService) {\n    HttpApiService.self = this;\n  }\n\n  private submitJsonRpcRequest(methodType: string, data: any, requestID: number) {\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    let params = new HttpParams()\n      .set('operationName', data.operation)\n      .set('requestId', requestID.toString());\n\n    if (data.path) {\n      params = params.set('path', data.path);\n    }\n\n    return this.http.request(methodType, Constants.BASE_URL(), {\n      headers: headers,\n      params: params,\n      body: data,\n      withCredentials: true\n    })\n      .do((res: any) => {\n        res.requestID = requestID;\n        res.request = data;\n        if (res.code == ResponseCode.OK) {\n          console.debug(res);\n        }\n        else if (res.code == ResponseCode.INVALID_TRANSACTION) {\n          this.sharedService.setClearTransaction();\n        } else {\n          console.error(res);\n        }\n      })\n      .catch((error: any) => {\n        error.requestID = requestID;\n        error.request = data;\n        console.debug(error);\n        if (error.status == HttpStatus.UNREACHABLE) {\n          this.sharedService.setClearTransaction();\n          ServerReconnectModal.open();\n        } else {\n          HttpApiService.self.handleSessionTimeout(error);\n        }\n        return Observable.throw(error || 'Server Error');\n      });\n  }\n\n  private static handleError(error: HttpErrorResponse) {\n    console.log(error);\n    if (error.status == HttpStatus.UNREACHABLE) {\n      HttpApiService.self.sharedService.setClearTransaction();\n      ServerReconnectModal.open();\n    } else {\n      HttpApiService.self.handleSessionTimeout(error);\n    }\n    return Observable.throw(error || 'Server Error');\n  }\n\n  private handleSessionTimeout(response: any) {\n    if (response.status === HttpStatus.UNAUTHORIZED) {\n      if (response.request && response.request.path && response.request.path.indexOf('/procedures') > -1) {\n        NavigationService.goToLogin(true);\n      } else {\n        this.sharedService.setClearTransaction();\n        ConfirmDialog.open('Your session has expired, would you like to redirect to login page?', NavigationService.goToLogin);\n      }\n    }\n  }\n\n  private submitRequest(methodType: string, url: string) {\n    const headers = new HttpHeaders();\n    headers.set('Content-Type', 'application/json');\n\n    return this.http.request(methodType, url, {\n      headers: headers,\n      withCredentials: true\n    })\n      .do((res: HttpResponse<any>) => console.log(res))\n      .catch(HttpApiService.handleError);\n  }\n\n  public postRequest(data: any) {\n    console.debug('Making request : ', data.operation, ' ,with ID : ', this.requestID, '   ~~ with following data : ', data);\n    return this.submitJsonRpcRequest('POST', data, this.requestID++);\n  }\n\n  public get(url: string) {\n    return this.submitRequest('GET', url);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/core/services/http-api.service.ts	(date 1542008233000)
+++ src/app/core/services/http-api.service.ts	(date 1542019432000)
@@ -1,6 +1,7 @@
 import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
 import { Injectable } from '@angular/core';
 import 'rxjs/add/operator/map';
+import { RequestOptions } from '@angular/http';
 import { Observable } from 'rxjs/Rx';
 import { ConfirmDialog } from '../../shared/components/modals/confirm-dialog-modal/confirm-dialog-modal.component';
 import { ServerReconnectModal } from '../../shared/components/modals/server-reconnect-modal/server-reconnect.modal';
@@ -92,10 +93,12 @@
   private submitRequest(methodType: string, url: string) {
     const headers = new HttpHeaders();
     headers.set('Content-Type', 'application/json');
-
+    headers.set('Accept', 'application/json');
+    const headers1 = {
+      'Accept': ''
+    };
     return this.http.request(methodType, url, {
-      headers: headers,
-      withCredentials: true
+      headers: headers1
     })
       .do((res: HttpResponse<any>) => console.log(res))
       .catch(HttpApiService.handleError);
Index: src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div id=\"modal\" class=\"modal modal-centered\" [ngClass]=\"{active : !isHidden}\" (onClick)=\"closeModal()\">\n  <!--TODO: use app-modal here since there is a separate dropzone container now instead of whole modal being a dropzone-->\n  <div class=\"modal-content\" *ngIf=\"!isHidden\">\n\n    <div class=\"action-toolbar clearfix py2\">\n      <div class=\"action-toolbar-title\">\n        <h1 class=\"m0\">\n          <i class=\"icon ion-key inlineicon\"></i>{{title}}</h1>\n      </div>\n      <div class=\"action-toolbar-actions\">\n        <button class=\"button button-tiny button-close\" (click)=\"closeModal()\">\n          <i class=\"icon ion-android-close\"></i>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"modal-content-wrapper modal-content-wrapper-split\">\n      <div class=\"clearfix content-wrapper\">\n\n        <app-spinner [isActive]=\"isBusyCounter > 0\"></app-spinner>\n\n        <div class=\"flex justify-between\">\n\n          <aside class=\"modal-content-sidebar\" role=\"contentinfo\" [ngClass]=\"{'disabled': currentStep === 2}\">\n            <nav>\n              <ul class=\"list-reset m0\">\n                <li>\n                  <a [class.active]=\"selectedMethod === trustStoreMethod.TEXT\"\n                     (click)=\"selectedMethod = trustStoreMethod.TEXT; error = null;\">\n                    <i class=\"icon ion-document-text inlineicon\"></i>Text</a>\n                </li>\n                <li>\n                  <a [class.active]=\"selectedMethod === trustStoreMethod.FILE\"\n                     (click)=\"selectedMethod = trustStoreMethod.FILE; error = null;\">\n                    <i class=\"icon ion-document inlineicon\"></i>File</a>\n                </li>\n                <li *ngIf=\"type !== 'addSslClientTruststore'\">\n                  <a [class.active]=\"selectedMethod === trustStoreMethod.HOST\"\n                     (click)=\"selectedMethod = trustStoreMethod.HOST; error = null;\">\n                    <i class=\"icon ion-earth inlineicon\"></i>Host</a>\n                </li>\n                <li *ngIf=\"type === 'addSslClientTruststore'\">\n                  <a [class.active]=\"selectedMethod === trustStoreMethod.PSD2\"\n                     (click)=\"selectedMethod = trustStoreMethod.PSD2; error = null;\">\n                    <i class=\"icon ion-earth inlineicon\"></i>PSD2 Trust SPs</a>\n                </li>\n              </ul>\n            </nav>\n          </aside>\n\n          <section class=\"modal-content-main\">\n            <div class=\"clearfix\">\n              <tooltip [info]=\"currentStep === 1 ? step1Descriptions[selectedMethod] : step2Description\"></tooltip>\n              <div class=\"col col-12\">\n                <element-error [error]=\"error\"></element-error>\n              </div>\n            </div>\n            <div class=\"main-form mt2\" align=\"left\">\n              <ng-container *ngIf=\"currentStep === 1\">\n                <form>\n                  <ng-container [ngSwitch]=\"selectedMethod\">\n                    <ng-container *ngSwitchCase=\"trustStoreMethod.TEXT\">\n                    <textarea name=\"keystore-input\" appDnd [(ngModel)]=\"data.keystoreText\" class=\"field col-12\"\n                              placeholder=\"Enter text here...\" rows=\"7\"\n                              (filesDropped)=\"onTextAreaFilesDropped($event)\">\n                    </textarea>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"trustStoreMethod.FILE\">\n                      <div class=\"mt2\">\n                        <input type=\"file\"\n                               #fileInput\n                               (change)=\"getFileData($event.target.files)\"\n                               style=\"display:none\">\n                        <button class=\"button button-small button-success-outline\" type=\"button\"\n                                (click)=\"fileInput.click()\"><i class=\"icon ion-document inlineicon\"></i>Select File\n                        </button>\n                        <label>{{selectedFile.name}}</label>\n                        <br>\n                        <label>OR</label>\n                        <div class=\"dragable-area\" appDnd\n                             [ngClass]=\"{'dragover': fileDragActiveCounter > 0}\"\n                             (dndDragEnter)=\"fileDragActiveCounter = fileDragActiveCounter + 1\"\n                             (dndDragLeave)=\"fileDragActiveCounter = fileDragActiveCounter - 1\"\n                             (filesDropped)=\"getFileData($event, true); fileDragActiveCounter = 0;\">\n                          <p class=\"dragable-area-text\">Drag and drop your file here.</p>\n                        </div>\n                      </div>\n                      <div class=\"mt2\">\n                        <label>Password</label><br>\n                        <div class=\"field-group\">\n                          <input [type]=\"showPassword ? 'text' : 'password'\"\n                                 class=\"field col-12\"\n                                 [(ngModel)]=\"data.password\"\n                                 name=\"file-password\"\n                                 disableAutoComplete>\n                          <button type=\"button\" class=\"show-password\"\n                                  (click)=\"showPassword = !showPassword\">\n                            <i class=\"icon ion-eye\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"trustStoreMethod.HOST\">\n                      <div class=\"flex col-12\">\n                        <div class=\"flex-auto\">\n\n                          <div class=\"flex flex-center justify-center\">\n                            <div class=\"button-dropdown flex-auto\">\n                              <label class=\"button button-tiny button-primary-outline block col-12\"\n                                     (click)=\"isHostsDropdownShown= !isHostsDropdownShown\"\n                                     (outsideClick)=\"isHostsDropdownShown = false\">\n                                <i class=\"icon ion-android-globe inlineicon\"></i>\n                                Select common hosts\n                                <i class=\"icon ion-ios-arrow-{{isHostsDropdownShown ? 'up' : 'down'}}\"></i>\n                              </label>\n                              <ul class=\"button-dropdown-menu button-dropdown-menu-full\"\n                                  [ngClass]=\"{'button-dropdown-menu-active': isHostsDropdownShown}\">\n                                <li *ngFor=\"let host of commonHosts\">\n                                  <a class=\"block\" (click)=\"hostData.value = host; hostInput.focus();\">\n                                    <i class=\"icon ion-person inlineicon\"></i>{{host}}\n                                    <i class=\"icon ion-ios-arrow-right\"></i>\n                                  </a>\n                                </li>\n                              </ul>\n                            </div>\n                          </div>\n\n                          <div class=\"mt1\">\n                            <input class=\"field col-12\" [ngClass]=\"{'error': hostData.hasError}\"\n                                   type=\"text\"\n                                   name=\"host\"\n                                   [(ngModel)]=\"hostData.value\"\n                                   required\n                                   focusElement\n                                   #hostInput\n                                   placeholder=\"Enter a host\">\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"trustStoreMethod.PSD2\">\n                      <div class=\"col col-12\">\n\n                      </div>\n                    </ng-container>\n                    </ng-container>\n\n                  <div class=\"col col-12 mt3\">\n                    <button type=\"button\" (click)=\"onStep1Submit()\" class=\"button button-small button-success right\">Next</button>\n                  </div>\n                </form>\n              </ng-container>\n              <ng-container *ngIf=\"currentStep === 2\">\n                <form class=\"certificate-chain\" id=\"keystoreStep2Form\" ngNativeValidate (submit)=\"onStep2Submit()\">\n                  <ng-container *ngFor=\"let certificateChain of certificateChains\">\n                    <div *ngFor=\"let key of certificateChain.keys; let j=index\" [class]=\"'mb2 ml' + (j + 1)\">\n\n                      <div class=\"flex flex-start\">\n                        <div class=\"relative\">\n                          <input id=\"{{key.randomId}}-checkbox\" type=\"checkbox\"\n                                 class=\"procedure-header-toggle-checkbox\"\n                                 data-text=\"Large, checked\" data-size=\"large\" [(ngModel)]=\"key.isSelected\"\n                                 name=\"{{key.randomId}}-checkbox\">\n                          <label aria-label=\"\" role=\"checkbox\" for=\"{{key.randomId}}-checkbox\"\n                                 class=\"procedure-header-toggle-checkbox\"><span class=\"large\"></span>\n                          </label>\n                        </div>\n\n                        <div class=\"relative\">\n                          <span class=\"procedure-header-toggle-checkbox-description\">{{key.id}}</span>\n                          <a class=\"procedure-header-toggle-checkbox-info\" (click)=\"openKeyDetailsModal(key)\"><i\n                                  class=\"icon ion-ios-information-outline inlineicon\"></i></a>\n                        </div>\n                      </div>\n\n                      <div class=\"ml1 mt1\">\n                        <label for=\"{{key.randomId}}-certificate-id\" class=\"label\">Name</label>\n                        <input type=\"text\" class=\"field field-narrow col-8\" [ngClass]=\"{'error': key.hasError}\"\n                               name=\"{{key.randomId}}-certificate-id\"\n                               id=\"{{key.randomId}}-certificate-id\"\n                               [(ngModel)]=\"key.commonName\"\n                               [required]=\"key.isSelected\">\n                      </div>\n\n\n                    </div>\n\n                  </ng-container>\n\n                  <div class=\"mt3\">\n                    <button type=\"submit\" class=\"button button-small button-success right\">OK</button>\n                    <button type=\"button\" class=\"button button-small button-light-grey right mr1\" (click)=\"onBack()\">\n                      Back\n                    </button>\n                  </div>\n                </form>\n              </ng-container>\n            </div>\n          </section>\n\n        </div>\n\n\n      </div>\n    </div>\n\n  </div>\n</div>\n\n<app-modal [isHidden]=\"isKeyDetailsModalHidden\"\n           [title]=\"'Certificate Details'\"\n           (close)=\"closeKeyDetailsModal()\">\n\n  <ng-template #content>\n    <table class=\"table inline-table action-table\">\n      <tbody>\n      <tr>\n        <td>ID</td>\n        <td>{{selectedKey['id']}}</td>\n      </tr>\n      <tr *ngIf=\"selectedKey['issuedBy']\">\n        <td>Issued By</td>\n        <td>{{selectedKey['issuedBy']}}</td>\n      </tr>\n      <tr *ngIf=\"selectedKey['expiresAt']\">\n        <td>Expires At</td>\n        <td>{{selectedKey['expiresAt']}}</td>\n      </tr>\n      <tr *ngIf=\"selectedKey['notBefore']\">\n        <td>Not Before</td>\n        <td>{{selectedKey['notBefore']}}</td>\n      </tr>\n      <tr>\n        <td>SHA-1 Fingerprint</td>\n        <td>{{selectedKey['fingerprints']['sha1']}}</td>\n      </tr>\n      <tr *ngIf=\"selectedKey['fingerprints']['sha256']\">\n        <td>SHA-256 Fingerprint</td>\n        <td>{{selectedKey['fingerprints']['sha256']}}</td>\n      </tr>\n      <tr>\n        <td>X5T Fingerprint</td>\n        <td>{{selectedKey['fingerprints']['x5t']}}</td>\n      </tr>\n      </tbody>\n    </table>\n  </ng-template>\n</app-modal>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.html	(date 1542008233000)
+++ src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.html	(date 1542009307000)
@@ -140,7 +140,13 @@
                     </ng-container>
                     <ng-container *ngSwitchCase="trustStoreMethod.PSD2">
                       <div class="col col-12">
-
+                        <div class="clearfix">
+                          <app-element-single-select-v2 [data]="PSD2Data['country']"
+                                                        [canUpdate]="false"
+                                                        [allowClear]="false"
+                                                        [edit]="true"
+                                                        [isValueProvided]="true"></app-element-single-select-v2>
+                        </div>
                       </div>
                     </ng-container>
                     </ng-container>
