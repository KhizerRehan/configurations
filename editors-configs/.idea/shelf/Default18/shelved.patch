Index: src/app/authentication/components/authentication-actions/new-authentication-action/steps/switch-step/switch-step.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpApiService } from '../../../../../../core/services/http-api.service';\nimport { TransactionService } from '../../../../../../core/services/transaction.service';\nimport { EndpointsService } from '../../../../../../core/services/endpoints';\nimport { SharedDataService } from '../../../../../../core/services/shared-data.service';\nimport { ConfigService } from '../../../../../../core/services/config.service';\nimport { BatchOperationsService } from '../../../../../../core/services/batch-operations.service';\nimport { DataResolverService } from '../../../../../../core/services/data-resolver.service';\nimport { RequestBuilder } from '../../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../../core/services/ResponseCode';\nimport { Observable } from 'rxjs/Observable';\nimport { AlertModal, ConfirmModal } from '../../../../../../shared/components';\nimport { DragulaService } from 'ng2-dragula';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n  selector: 'app-switch-step',\n  templateUrl: './switch-step.component.html'\n})\nexport class SwitchStepComponent implements OnInit, OnChanges, OnDestroy {\n  readonly destroyed$ = new Subject();\n\n  @Input() data: any;\n\n  url: string;\n  result: any = {};\n  cases: Array<any>;\n  errorMessage: any;\n  newRowData: any;\n  selectedItem: any;\n  caseToDelete: any;\n  actions: Array<any>;\n  authActionIcons: any;\n  isActionDragActive: boolean;\n\n  constructor(private Api: HttpApiService,\n              private Transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedData: SharedDataService,\n              private dragulaService: DragulaService,\n              private configService: ConfigService,\n              private renderer: Renderer2,\n              private batchService: BatchOperationsService,\n              private dataResolver: DataResolverService) {\n  }\n\n  ngOnInit(): void {\n    this.subscribeDragDropEvents();\n  }\n\n  ngOnChanges(changes: any): void {\n    if (changes.data && changes.data.currentValue) {\n      this.data = changes.data.currentValue;\n      this.url = `${this.data.path}/${this.data.actionType}/`;\n      this.cases = [];\n      this.loadData();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    this.dragulaService.destroy('cases');\n  }\n\n  subscribeDragDropEvents() {\n    this.dragulaService.setOptions('cases', {\n      moves: (el) => !el.classList.contains('ignore-drag'),\n      direction: 'vertical'\n    });\n\n    this.dragulaService.drag.takeUntil(this.destroyed$)\n      .subscribe(event => {\n        this.isActionDragActive = true;\n        this.cases.forEach(item => {\n          if (item.expandRow) {\n            this.setConditionScriptValue(item);\n            item.editorReference.parentNode.removeChild(item.editorReference);\n            item.expandRow = false;\n            this.destroyEditor(item);\n          }\n        });\n      });\n\n    this.dragulaService.dragend.takeUntil(this.destroyed$)\n      .delay(100)\n      .subscribe(event => {\n        this.isActionDragActive = false;\n      });\n\n    this.dragulaService.dropModel\n      .takeUntil(this.destroyed$)\n      .subscribe((value) => {\n        this.updateListPosition(value[1]['id']);\n      });\n  }\n\n  loadData() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        Observable.forkJoin(\n          this.configService.getSwitchActionConfig(),\n          this.configService.getAuthActionIconsConfig()\n        )\n          .takeUntil(this.destroyed$)\n          .subscribe(config => {\n              Observable.forkJoin(\n                this.Api.postRequest(RequestBuilder.withSchema(this.url, transactionId, 5)),\n                this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getAuthenticationActionUrl(), transactionId)),\n                this.Api.postRequest(RequestBuilder.withGetListKeys(`${this.url}case`, transactionId))\n              )\n                .takeUntil(this.destroyed$)\n                .subscribe(responses => {\n                    if (responses[0].code === ResponseCode.OK) {\n                      this.result = this.dataResolver.parseData(responses[0].data.result.children[0].children, config[0], this.url);\n                    }\n                    if (responses[1].code === ResponseCode.OK) {\n                      const batchId1 = this.batchService.createBatch();\n                      this.authActionIcons = {};\n                      this.actions = [];\n                      responses[1].data.keys.forEach(key => {\n                        this.batchService.addToBatch(batchId1, RequestBuilder.withSelectedCase(\n                          `${this.endpoints.getAuthenticationActionUrl()}{${key.id}}`, 'action-type', transactionId))\n                          .takeUntil(this.destroyed$)\n                          .finally(() => {\n                            if (key.id !== this.data.id) {\n                              this.actions = [...this.actions, key.id];\n                            }\n                          })\n                          .subscribe(response => {\n                              if (response.code === ResponseCode.OK) {\n                                this.authActionIcons[key.id] = config[1][response.data.value] || 'ion-cube';\n                              }\n                            },\n                            error => console.log(error));\n                      });\n                      this.batchService.initiateRequest(batchId1);\n                    }\n                    if (responses[2].code === ResponseCode.OK) {\n                      this.cases = [];\n                      if (responses[2].data.keys.length  > 0) {\n                        const batchId2 = this.batchService.createBatch();\n                        responses[2].data.keys.forEach(key => {\n                          const data: any = {\n                            name: key.name,\n                            path: `${this.url}case{${key.name}}`,\n                            values: {}\n                          };\n                          this.cases = [ ...this.cases, data ];\n                          this.batchService.addToBatch(batchId2, RequestBuilder.withGetValues(data.path, transactionId, false))\n                            .takeUntil(this.destroyed$)\n                            .subscribe(response => {\n                                if (response.code === ResponseCode.OK) {\n                                  data.values = response.data.value;\n                                  data.values = {\n                                    'name': response.data.value['name'],\n                                    'condition-script': {\n                                      name: 'condition-script',\n                                      path: `${data.path}/condition-script`,\n                                      value: this.sharedData.decodeBase64(response.data.value['condition-script'])\n                                    },\n                                    'action': {\n                                      name: 'action',\n                                      path: `${data.path}/action`,\n                                      value: response.data.value['action']\n                                    }\n                                  };\n                                }\n                              },\n                              error1 => console.log(error1));\n                        });\n                        this.batchService.initiateRequest(batchId2);\n                      }\n                      else {\n                        this.onCreateNewCase();\n                      }\n                    }\n                  },\n                  error1 => console.log(error1));\n            },\n            error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  updateListPosition(name: any) {\n    const index = this.cases.findIndex(item => item.values['name'] === name);\n    let position, referenceElementKey;\n    if (index === 0) {\n      position = 'first';\n      referenceElementKey = null;\n    }\n    else if (index === this.cases.length - 1) {\n      position = 'last';\n      referenceElementKey = null;\n    }\n    else {\n      position = 'after';\n      referenceElementKey = this.cases[index - 1].values['name'];\n    }\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withMoveListItem(this.cases[index].path, transactionId, position, referenceElementKey))\n          .takeUntil(this.destroyed$)\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.sharedData.incrementChangeCount(this.cases[index].path);\n              }\n            },\n            error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  onCreateNewCase() {\n    this.errorMessage = null;\n    this.newRowData = {\n      name: 'new-data',\n      values: {\n        'name': {\n          name: 'name',\n        },\n        'condition-script': {\n          name: 'condition-script'\n        },\n        'action': {\n          name: 'action'\n        }\n      }\n    };\n  }\n\n  addNewCase() {\n    this.errorMessage = null;\n    this.newRowData.values['name'].hasError = false;\n    this.newRowData.values['condition-script'].hasError = false;\n    this.newRowData.values['action'].hasError = false;\n    if (!this.newRowData.values['name'].value) {\n      this.newRowData.values['name'].hasError = true;\n      this.errorMessage = 'Please enter a name.';\n    }\n    else if (this.newRowData.values['name'].value.match(/\\s/g)) {\n      this.newRowData.values['name'].hasError = true;\n      this.errorMessage = 'Name cannot contain space.';\n    }\n    else if (this.cases.find(item => item.name === this.newRowData.values['name'].value)) {\n      this.newRowData.values['name'].hasError = true;\n      this.errorMessage = 'A case with this name already exists.';\n    }\n    else if (!this.newRowData.values['condition-script'].value) {\n      this.newRowData.values['condition-script'].hasError = true;\n      this.errorMessage = 'Please enter a Condition.';\n    }\n    else if (!this.newRowData.values['action'].value) {\n      this.newRowData.values['action'].hasError = true;\n      this.errorMessage = 'Please Select an Action.';\n    }\n    else {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          const path = `${this.url}case{${this.newRowData.values['name'].value}}`;\n          this.Api.postRequest(RequestBuilder.withCreate(path, transactionId))\n            .takeUntil(this.destroyed$)\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedData.incrementChangeCount(path);\n                  const data = {\n                    name: this.newRowData.values['name'].value,\n                    path,\n                    values: {\n                      'name': this.newRowData.values['name'].value,\n                      'condition-script': {\n                        name: 'condition-script',\n                        path: `${path}/condition-script`,\n                        value: this.newRowData.values['condition-script'].value\n                      },\n                      'action': {\n                        name: 'action',\n                        path: `${path}/action`,\n                        value: this.newRowData.values['action'].value\n                      }\n                    }\n                  };\n                  const conditionScriptEncodedValue = this.sharedData.encodeBase64(data.values['condition-script'].value);\n                  Observable.forkJoin(\n                    this.Api.postRequest(\n                      RequestBuilder.withSetValue(conditionScriptEncodedValue, `${path}/condition-script`, transactionId)),\n                    this.Api.postRequest(\n                      RequestBuilder.withSetValue(data.values['action'].value, `${path}/action`, transactionId))\n                  )\n                    .takeUntil(this.destroyed$)\n                    .subscribe(responses => {\n                        if (responses[0].code === ResponseCode.OK) {\n                          this.sharedData.incrementChangeCount(`${path}/condition-script`);\n                        }\n                        if (responses[1].code === ResponseCode.OK) {\n                          this.sharedData.incrementChangeCount(`${path}/action`);\n                          this.cases = [ ...this.cases, data ];\n                          this.newRowData = null;\n                        }\n                      },\n                      error1 => console.log(error1));\n                }\n                else {\n                  this.errorMessage = response;\n                }\n              },\n              error1 => console.log(error1));\n        })\n        .catch(error => console.log(error));\n    }\n  }\n\n  deleteNewCase() {\n    this.newRowData = null;\n  }\n\n  deleteCase(data) {\n    this.caseToDelete = data;\n    ConfirmModal.open('Delete Case', 'Are you sure you want to delete case <em>' + data.name + '</em>?', 'confirmDeleteCase', this);\n  }\n\n  confirmDeleteCase() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withDelete(this.caseToDelete.path, transactionId))\n          .takeUntil(this.destroyed$)\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.sharedData.incrementChangeCount(this.caseToDelete.path);\n                this.cases = this.cases.filter(item => item.name !== this.caseToDelete.name);\n                this.caseToDelete = null;\n              }\n              else {\n                AlertModal.open('Delete case failed', `Cannot delete case <em>${this.caseToDelete.name}</em>`);\n              }\n            },\n            error1 => console.log(error1));\n      })\n      .catch(error => console.log(error));\n  }\n\n  setConditionScriptValue(data: any) {\n    let value;\n    const path = data.values['condition-script'].path;\n    if (data.expandRow) {\n      value = data.editor.getValue();\n      data.values['condition-script'].value = value;\n    }\n    else {\n      value = data.values['condition-script'].value;\n    }\n\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withSetValue(this.sharedData.encodeBase64(value), path, transactionId))\n          .takeUntil(this.destroyed$)\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.sharedData.incrementChangeCount(path);\n              }\n            },\n            error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  setNewRowConditionScript(newRowData: any) {\n    newRowData.values['condition-script'].value = newRowData.editor.getValue();\n  }\n\n  private initEditor(data: any) {\n    const id = data.name !== 'new-data' ? 'editor-' + data.values['name'] : 'editor-' + data['name'];\n    data.editor = window['ace'].edit(id);\n    data.editor.setTheme('ace/theme/monokai');\n    data.editor.getSession().setMode('ace/mode/javascript');\n    data.editor.on('blur', () => {\n      if (data.name !== 'new-data') {\n        this.setConditionScriptValue(data);\n      }\n      else {\n        data.values['condition-script'].value = data.editor.getValue();\n      }\n    });\n    data.editor.getSession().setUseWorker(false);\n    data.editor.setReadOnly(this.Transaction.isReadOnlyMode);\n    if (data.values['condition-script'].value) {\n      data.editor.setValue(data.values['condition-script'].value);\n    }\n    data.editor.commands.addCommand({\n      name: 'save',\n      bindKey: {win: 'Ctrl-S', mac: 'Command-S'},\n      exec: (editor) => {\n        if (data.name !== 'new-data') {\n          this.setConditionScriptValue(data);\n        }\n        else {\n          this.setNewRowConditionScript(data);\n        }\n      },\n      readOnly: false\n    });\n    const event: any = window['ace'].require('ace/lib/event');\n    const container: any = data.editor.container;\n\n    // -----ignore dragover event listeners on editor.--------------\n    event.addListener(container, 'dragover', (arg: any) => {\n      return event.preventDefault(arg);\n    });\n  }\n\n  destroyEditor(data: any) {\n    if (data. editor) {\n      data.editor.destroy();\n    }\n  }\n\n  toggleExpandRow(data: any, elementRef: any) {\n    if (data.expandRow) {\n      if (data.name !== 'new-data') {\n        this.setConditionScriptValue(data);\n        elementRef.classList.remove('ignore-drag');\n        data.editorReference = null;\n        elementRef.parentNode.removeChild(elementRef.nextSibling);\n      }\n      else {\n        data.values['condition-script'].value = data.editor.getValue();\n      }\n      data.expandRow = false;\n      this.destroyEditor(data);\n    }\n    else {\n      if (data.name !== 'new-data') {\n        const tr = document.createElement('tr');\n        tr.innerHTML = `\n      <td colspan=\"5\">\n        <div id=\"editor-${data.values['name']}\" style=\"height: 200px; width: 720px\"></div>\n      </td>`;\n        elementRef.classList.add('ignore-drag');\n        tr.classList.add('ignore-drag');\n        data.editorReference = tr;\n        elementRef.parentNode.insertBefore(tr, elementRef.nextSibling);\n      }\n      data.expandRow = true;\n      setTimeout(() => {\n        this.initEditor(data);\n      }, 100);\n    }\n  }\n\n  toggleEdit(data: any) {\n    if (data.edit) {\n      this.errorMessage = null;\n      data.values['condition-script'].hasError = false;\n      if (!data.values['condition-script'].value || data.values['condition-script'].value === '') {\n        data.values['condition-script'].hasError = true;\n        this.errorMessage = 'Please enter a Condition.';\n      }\n      else {\n        data.edit = false;\n        data.expandRow = false;\n        this.destroyEditor(data);\n      }\n    }\n    else {\n      data.edit = true;\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/authentication/components/authentication-actions/new-authentication-action/steps/switch-step/switch-step.component.ts	(date 1551953713000)
+++ src/app/authentication/components/authentication-actions/new-authentication-action/steps/switch-step/switch-step.component.ts	(date 1551955285000)
@@ -72,13 +72,14 @@
 
     this.dragulaService.drag.takeUntil(this.destroyed$)
       .subscribe(event => {
-        this.isActionDragActive = true;
+        console.log('drag: ', [...this.cases]);
+       this.isActionDragActive = true;
         this.cases.forEach(item => {
           if (item.expandRow) {
             this.setConditionScriptValue(item);
+            this.destroyEditor(item);
             item.editorReference.parentNode.removeChild(item.editorReference);
             item.expandRow = false;
-            this.destroyEditor(item);
           }
         });
       });
@@ -86,12 +87,14 @@
     this.dragulaService.dragend.takeUntil(this.destroyed$)
       .delay(100)
       .subscribe(event => {
+        console.log('dragend: ', [...this.cases]);
         this.isActionDragActive = false;
       });
 
     this.dragulaService.dropModel
       .takeUntil(this.destroyed$)
       .subscribe((value) => {
+        console.log('dragModel: ', [...this.cases]);
         this.updateListPosition(value[1]['id']);
       });
   }
@@ -418,6 +421,7 @@
 
   toggleExpandRow(data: any, elementRef: any) {
     if (data.expandRow) {
+      this.destroyEditor(data);
       if (data.name !== 'new-data') {
         this.setConditionScriptValue(data);
         elementRef.classList.remove('ignore-drag');
@@ -428,7 +432,6 @@
         data.values['condition-script'].value = data.editor.getValue();
       }
       data.expandRow = false;
-      this.destroyEditor(data);
     }
     else {
       if (data.name !== 'new-data') {
@@ -453,7 +456,7 @@
     if (data.edit) {
       this.errorMessage = null;
       data.values['condition-script'].hasError = false;
-      if (!data.values['condition-script'].value || data.values['condition-script'].value === '') {
+      if (!data.values['condition-script'].value) {
         data.values['condition-script'].hasError = true;
         this.errorMessage = 'Please enter a Condition.';
       }
