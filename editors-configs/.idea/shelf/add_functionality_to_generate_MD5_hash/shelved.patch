Index: src/app/core/services/shared-data.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { EventEmitter, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { RequestBuilder } from './request.builder';\nimport { ResponseCode } from './ResponseCode';\n\ndeclare var saveAs: any;\n\n@Injectable()\nexport class SharedDataService {\n  private elementsBusyCounter: number = 0;\n  private elementsBusySubject: Subject<boolean> = new Subject();\n  private clearTransactionSubject: Subject<boolean> = new Subject<boolean>();\n  private currentProfileSubject: Subject<any> = new Subject<any>();\n\n  constructor() {\n    this.profile = JSON.parse(localStorage.getItem(\"profile\"));\n    this.getRandomPassword(8).then(pass => {});\n    let changeCount = SharedDataService.readCookie(\"changesCount\");\n    this.changesCount = parseInt(changeCount) ? parseInt(changeCount) : 0;\n  }\n\n  private changesCount: number = 0;\n\n  private profile: any = {};\n\n  private profiles: Array<any> = null;\n\n  profilesEvent = new EventEmitter();\n\n  private changeLog: Array<string> = [];\n\n  private params: Object = {};\n\n  public static canGeneratePassword: boolean = true;\n\n  public getProfile() {\n    return this.profile ? this.profile : {};\n  }\n\n  public setProfile(profile: Object) {\n    this.profile = profile;\n    localStorage.setItem(\"profile\", JSON.stringify(profile));\n    this.currentProfileSubject.next(this.profile || {});\n  }\n\n  getProfileObservable(): Observable<any> {\n    return this.currentProfileSubject.asObservable();\n  }\n\n  public getProfiles() {\n    return this.profiles;\n  }\n\n  public setProfiles(profiles: Array<any>) {\n    this.profiles = profiles;\n    this.profilesEvent.emit(profiles);\n  }\n\n  public getChangeCount() {\n    return this.changesCount;\n  }\n\n  public setChangeCount(value: number){\n    this.changesCount = value;\n    SharedDataService.createCookie(\"changesCount\", this.changesCount);\n  }\n\n  public incrementChangeCount(url: string) {\n    if(!(this.changeLog.indexOf(url) > -1)) {\n      this.changesCount = this.changesCount + 1;\n      SharedDataService.createCookie(\"changesCount\", this.changesCount);\n      this.changeLog.push(url);\n    }\n  }\n\n  public removeFromChangeLog(url: string) {\n    const index = this.changeLog.indexOf(url);\n    if (index > -1) {\n      this.changeLog.splice(index, 1);\n    }\n  }\n\n  public clearChangeCount() {\n    this.changesCount = 0;\n    this.changeLog = [];\n    SharedDataService.createCookie(\"changesCount\", this.changesCount);\n  }\n\n  /**\n   * @param numberOfCharacters\n   * @returns {string} random password\n   **/\n  public getRandomPassword(numberOfCharacters: number) {\n    return new Promise((resolve) => {\n      if(!window.crypto || !window.crypto.subtle) {\n        SharedDataService.canGeneratePassword = false;\n        resolve(\"\");\n        return;\n      }\n      window.crypto.subtle.generateKey(\n        {\n          name: \"AES-GCM\",\n          length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n      )\n        .then(function(key) {\n            window.crypto.subtle.exportKey('raw', key).then((exportedKey: any) => {\n                let password = btoa(\n                  new Uint8Array(exportedKey)\n                    .reduce((data, byte) => data + String.fromCharCode(byte), '')\n                );\n\n                password = password.split('=')[0];\n                password = password.split(\"+\").join(\"-\").split(\"/\").join(\"_\");\n\n                resolve(password.substring(password.length - numberOfCharacters));\n              },\n              error => {\n                SharedDataService.canGeneratePassword = false;\n                resolve(\"\");\n              })\n          },\n          error => {\n            SharedDataService.canGeneratePassword = false;\n            resolve(\"\");\n          })\n    })\n  }\n\n  public getSelectedParam(key: string) {\n    if(!this.params[key]) {\n      let value = localStorage.getItem('params');\n      if(value) {\n        this.params = JSON.parse(value);\n      }\n    }\n    return this.params[key];\n  }\n\n  public setSelectedParam(key: string, value: any) {\n    this.params[key] = value;\n    localStorage.setItem('params', JSON.stringify(this.params));\n  }\n\n  decodeBase64(value: string): string {\n    if(value) {\n      try {\n        let decodedValue = atob(value);\n        return decodedValue;\n      } catch (exception) {\n        return value;\n      }\n    }\n    return \"\";\n  }\n\n  encodeBase64(value: string): string {\n    if(value) {\n      let encodedValue = btoa(value);\n      return encodedValue;\n    }\n    return \"\";\n  }\n\n  getDescription(self: any, url, transactionId) {\n    self.Api.postRequest(RequestBuilder.withSchema(url, transactionId, 1))\n      .subscribe(response => {\n        if (response.code === ResponseCode.OK) {\n          self.description = response.data.result.children[0].info;\n        }\n      });\n  }\n\n  getValue(path, http: any, transactionId, data, self, callback: string = null) {\n    if(data.value || !path){\n      if(self && callback)\n        self[callback]();\n      return;\n    }\n    http.postRequest(RequestBuilder.withGetValue(path, transactionId))\n      .finally(() => {\n        if(self && callback) {\n          self[callback]();\n        }\n      })\n      .subscribe(response => {\n        if (response.code === ResponseCode.OK) {\n          data.value = response.data.value;\n        }\n        else {\n          data.error = response;\n        }\n      });\n  }\n\n  addDays(date: any, days: number): Date {\n    let result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  addDaysStr(date: string, days: number): string {\n    const result = this.addDays(date, days);\n    return result.toISOString().slice(0, 10);\n  }\n\n  dateDifferenceInDays(startDate: Date, endDate: Date): number {\n    return Math.floor((endDate.getTime() - startDate.getTime()) / (1000*60*60*24));\n  }\n\n  public static lockScroll() {\n    document.getElementsByTagName(\"html\").item(0).className = \"overflow-hidden\";\n  }\n\n  public static unlockScroll() {\n    document.getElementsByTagName(\"html\").item(0).className = \"\";\n  }\n\n\n  public static createCookie(name, value, days=null) {\n    var expires = \"\";\n    if(days) {\n      var date = new Date();\n      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n      expires = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + value + expires + \"; path=/admin\";\n  }\n\n  public static readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while(c.charAt(0) == ' ') c = c.substring(1, c.length);\n      if(c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n  }\n\n  public static deleteCookie(name) {\n    SharedDataService.createCookie(name, \"\", 1);\n  }\n\n  incrementElementsBusyCounter() {\n    this.elementsBusyCounter++;\n    this.elementsBusySubject.next(true);\n  }\n\n  decrementElementsBusyCounter() {\n    this.elementsBusyCounter--;\n    if (this.elementsBusyCounter < 1) {\n      this.resetElementsBusyCounter();\n    }\n  }\n\n  resetElementsBusyCounter() {\n    this.elementsBusyCounter = 0;\n    this.elementsBusySubject.next(false);\n  }\n\n  getElementsBusy(): Observable<boolean> {\n    return this.elementsBusySubject.asObservable();\n  }\n\n  getClearTransaction(): Observable<boolean> {\n    return this.clearTransactionSubject.asObservable();\n  }\n\n  setClearTransaction() {\n    this.clearTransactionSubject.next(true);\n  }\n\n  downloadXmlFile(data: string, fileName: string = 'curity-config.xml') {\n    const blob = new Blob([data], {type: 'application/xml'});\n    saveAs(blob, fileName);\n  }\n\n  downloadPemFile(data: string, fileName: string) {\n    const blob = new Blob([data], {type: 'application/x-x509-ca-cert'});\n    saveAs(blob, fileName);\n  }\n\n  processURI(value: string) {\n    if (value) {\n      value = value.replace(/[@?&=\"<>#%{}|\\\\^\\[\\]`\\s]/g, '');\n      return value.startsWith('/') ? value : `/${value}`;\n    }\n    else {\n      return value;\n    }\n  }\n\n  filterUniqueElements(array: Array<any>, column: string): Array<any> {\n    let seen = {};\n    return array.filter(item => {\n      return seen.hasOwnProperty(item[column]) ? false : (seen[item[column]] = true);\n    });\n  }\n\n  static generateRandomString() {\n    return (\n      Date.now().toString(36) +\n      Math.random()\n        .toString(36)\n        .substr(2, 5)\n    ).toUpperCase();\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/core/services/shared-data.service.ts	(revision 82377ac4812d2337c91ce29e047021fcc5bad00d)
+++ src/app/core/services/shared-data.service.ts	(date 1550214988000)
@@ -18,6 +18,8 @@
     this.getRandomPassword(8).then(pass => {});
     let changeCount = SharedDataService.readCookie("changesCount");
     this.changesCount = parseInt(changeCount) ? parseInt(changeCount) : 0;
+
+    console.log("MD5 -----------> ", this.generateMD5('/profiles/profile'));
   }
 
   private changesCount: number = 0;
@@ -310,4 +312,223 @@
     ).toUpperCase();
   }
 
+  RotateLeft(lValue, iShiftBits) {
+    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
+  }
+
+  AddUnsigned(lX, lY) {
+    var lX4, lY4, lX8, lY8, lResult;
+    lX8 = (lX & 0x80000000);
+    lY8 = (lY & 0x80000000);
+    lX4 = (lX & 0x40000000);
+    lY4 = (lY & 0x40000000);
+    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
+    if (lX4 & lY4) {
+      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
+    }
+    if (lX4 | lY4) {
+      if (lResult & 0x40000000) {
+        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
+      }
+      else {
+        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
+      }
+    }
+    else {
+      return (lResult ^ lX8 ^ lY8);
+    }
+  }
+
+  F(x, y, z) {
+    return (x & y) | ((~x) & z);
+  }
+
+  G(x, y, z) {
+    return (x & z) | (y & (~z));
+  }
+
+  H(x, y, z) {
+    return (x ^ y ^ z);
+  }
+
+  I(x, y, z) {
+    return (y ^ (x | (~z)));
+  }
+
+  FF(a, b, c, d, x, s, ac) {
+    a = this.AddUnsigned(a, this.AddUnsigned(this.AddUnsigned(this.F(b, c, d), x), ac));
+    return this.AddUnsigned(this.RotateLeft(a, s), b);
+  }
+
+  GG(a, b, c, d, x, s, ac) {
+    a = this.AddUnsigned(a, this.AddUnsigned(this.AddUnsigned(this.G(b, c, d), x), ac));
+    return this.AddUnsigned(this.RotateLeft(a, s), b);
+  }
+
+  HH(a, b, c, d, x, s, ac) {
+    a = this.AddUnsigned(a, this.AddUnsigned(this.AddUnsigned(this.H(b, c, d), x), ac));
+    return this.AddUnsigned(this.RotateLeft(a, s), b);
+  }
+
+  II(a, b, c, d, x, s, ac) {
+    a = this.AddUnsigned(a, this.AddUnsigned(this.AddUnsigned(this.I(b, c, d), x), ac));
+    return this.AddUnsigned(this.RotateLeft(a, s), b);
+  }
+
+  ConvertToWordArray(string) {
+    var lWordCount;
+    var lMessageLength = string.length;
+    var lNumberOfWords_temp1 = lMessageLength + 8;
+    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
+    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
+    var lWordArray = Array(lNumberOfWords - 1);
+    var lBytePosition = 0;
+    var lByteCount = 0;
+    while (lByteCount < lMessageLength) {
+      lWordCount = (lByteCount - (lByteCount % 4)) / 4;
+      lBytePosition = (lByteCount % 4) * 8;
+      lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
+      lByteCount++;
+    }
+    lWordCount = (lByteCount - (lByteCount % 4)) / 4;
+    lBytePosition = (lByteCount % 4) * 8;
+    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
+    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
+    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
+    return lWordArray;
+  }
+
+  WordToHex(lValue) {
+    var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
+    for (lCount = 0; lCount <= 3; lCount++) {
+      lByte = (lValue >>> (lCount * 8)) & 255;
+      WordToHexValue_temp = "0" + lByte.toString(16);
+      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
+    }
+    return WordToHexValue;
+  }
+
+  Utf8Encode(string) {
+    string = string.replace(/\r\n/g, "\n");
+    var utftext = "";
+
+    for (var n = 0; n < string.length; n++) {
+
+      var c = string.charCodeAt(n);
+
+      if (c < 128) {
+        utftext += String.fromCharCode(c);
+      }
+      else if ((c > 127) && (c < 2048)) {
+        utftext += String.fromCharCode((c >> 6) | 192);
+        utftext += String.fromCharCode((c & 63) | 128);
+      }
+      else {
+        utftext += String.fromCharCode((c >> 12) | 224);
+        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
+        utftext += String.fromCharCode((c & 63) | 128);
+      }
+
+    }
+
+    return utftext;
+  }
+
+  generateMD5(value: string) {
+    let x = [];
+    let k, AA, BB, CC, DD, a, b, c, d;
+    const S11 = 7, S12 = 12, S13 = 17, S14 = 22;
+    const S21 = 5, S22 = 9, S23 = 14, S24 = 20;
+    const S31 = 4, S32 = 11, S33 = 16, S34 = 23;
+    const S41 = 6, S42 = 10, S43 = 15, S44 = 21;
+
+    value = this.Utf8Encode(value);
+
+    x = this.ConvertToWordArray(value);
+
+    a = 0x67452301;
+    b = 0xEFCDAB89;
+    c = 0x98BADCFE;
+    d = 0x10325476;
+
+    for (k = 0; k < x.length; k += 16) {
+      AA = a;
+      BB = b;
+      CC = c;
+      DD = d;
+      a = this.FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
+      d = this.FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
+      c = this.FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
+      b = this.FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
+      a = this.FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
+      d = this.FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
+      c = this.FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
+      b = this.FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
+      a = this.FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
+      d = this.FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
+      c = this.FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
+      b = this.FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
+      a = this.FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
+      d = this.FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
+      c = this.FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
+      b = this.FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
+      a = this.GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
+      d = this.GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
+      c = this.GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
+      b = this.GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
+      a = this.GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
+      d = this.GG(d, a, b, c, x[k + 10], S22, 0x2441453);
+      c = this.GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
+      b = this.GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
+      a = this.GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
+      d = this.GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
+      c = this.GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
+      b = this.GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
+      a = this.GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
+      d = this.GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
+      c = this.GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
+      b = this.GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
+      a = this.HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
+      d = this.HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
+      c = this.HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
+      b = this.HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
+      a = this.HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
+      d = this.HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
+      c = this.HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
+      b = this.HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
+      a = this.HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
+      d = this.HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
+      c = this.HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
+      b = this.HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
+      a = this.HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
+      d = this.HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
+      c = this.HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
+      b = this.HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
+      a = this.II(a, b, c, d, x[k + 0], S41, 0xF4292244);
+      d = this.II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
+      c = this.II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
+      b = this.II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
+      a = this.II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
+      d = this.II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
+      c = this.II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
+      b = this.II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
+      a = this.II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
+      d = this.II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
+      c = this.II(c, d, a, b, x[k + 6], S43, 0xA3014314);
+      b = this.II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
+      a = this.II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
+      d = this.II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
+      c = this.II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
+      b = this.II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
+      a = this.AddUnsigned(a, AA);
+      b = this.AddUnsigned(b, BB);
+      c = this.AddUnsigned(c, CC);
+      d = this.AddUnsigned(d, DD);
+
+      const temp = this.WordToHex(a) + this.WordToHex(b) + this.WordToHex(c) + this.WordToHex(d);
+
+      return temp.toLowerCase();
+    }
+  }
+
 }
