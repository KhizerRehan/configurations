Index: src/app/shared/components/modals/wizards/shared/signing-key-step/signing-key-step.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { EndpointsService } from '../../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../../core/services/http-api.service';\nimport { RequestBuilder } from '../../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../../core/services/ResponseCode';\nimport { TransactionService } from '../../../../../../core/services/transaction.service';\nimport { NavigateDirection } from '../../types/navigate-direction.enum';\nimport { SigningKeyAction } from '../../types/signing-key-action.enum';\nimport { CertificateAction } from '../../../facilities/certificate-modal/certificate-action.enum';\n\n@Component({\n  moduleId: module.id,\n  selector: 'signing-key-step',\n  templateUrl: 'signing-key-step.component.html'\n})\nexport class SigningKeyStepComponent implements OnInit, OnDestroy {\n  readonly destroyed$ = new Subject();\n\n  @Input() profileData: any;\n  @Input() profileType: string;\n  @Output() navigate: EventEmitter<NavigateDirection> = new EventEmitter<NavigateDirection>();\n\n  signingKeyAction = SigningKeyAction;\n  result: any = {};\n  errorMessage: any;\n  showAllFields: boolean = false;\n  isHSMEnabled: boolean;\n  certificateTypeData: any = {};\n  showKeystore: boolean;\n\n  constructor(private Transaction: TransactionService,\n              private Api: HttpApiService,\n              private endpoints: EndpointsService) {\n  }\n\n  ngOnInit(): void {\n    this.checkHSMExists();\n\n    this.profileData.signingKey = this.profileData.signingKey || {\n      selectedAction: SigningKeyAction.SELECT_EXISTING,\n      data: {\n        newSigningKeyData: {\n          validity: '365'\n        },\n        hsmData: {}\n      }\n    };\n\n    this.certificateTypeData = {\n      name: 'certificate-type',\n      displayName: 'Type',\n      items: ['symmetric', 'asymmetric'],\n      value: this.profileData.signingKey.data.certificateType,\n      mandatory: true\n    };\n\n    this.result['signing-key'] = {\n      leafrefTarget: this.endpoints.getSigningKeysUrl(),\n      displayName: 'Select Signing Key',\n      name: 'signing-key',\n      value: this.profileData.signingKey.selectedAction === SigningKeyAction.SELECT_EXISTING ? this.profileData.signingKey.data.id : null,\n      mandatory: true\n    };\n    this.result['new-signing-symmetric-key-size'] = {\n      name: 'new-signing-symmetric-key-size',\n      displayName: 'Key Size',\n      items: ['256', '384', '512'],\n      value: this.profileData.signingKey.data.newSigningKeyData.keysize\n    };\n    this.result['new-signing-key-size'] = {\n      name: 'new-signing-key-size',\n      displayName: 'Key Size',\n      items: ['2048', '4096'],\n      value: this.profileData.signingKey.data.newSigningKeyData.keysize\n    };\n    this.result['new-signing-key-type'] = {\n      name: 'new-signing-key-type',\n      displayName: 'Key Type',\n      items: ['rsa', 'elliptic-curve'],\n      value: this.profileData.signingKey.data.newSigningKeyData.keyType\n    };\n    this.result['new-signing-curveName'] = {\n      name: 'new-signing-curveName',\n      displayName: 'Curve Name',\n      items: ['P-256', 'P-384', 'P-521'],\n      value: this.profileData.signingKey.data.newSigningKeyData.curveName\n    };\n    this.result['hsm-key-type'] = {\n      name: 'hsm-key-type',\n      displayName: 'Type',\n      items: ['rsa', 'dsa', 'elliptic-curve'],\n      value: this.profileData.signingKey.data.hsmData.keyType,\n      mandatory: true\n    };\n    this.result['hsm-key-size'] = {\n      name: 'hsm-key-size',\n      displayName: 'Key Size',\n      items: ['2048', '4096'],\n      value: this.profileData.signingKey.data.hsmData.keysize,\n      mandatory: true\n    };\n    this.result['hsm-curve-name'] = {\n      name: 'hsm-curve-name',\n      displayName: 'Curve Name',\n      items: ['P-256', 'P-384', 'P-521'],\n      value: this.profileData.signingKey.data.hsmData.curveName,\n      mandatory: true\n    };\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  checkHSMExists() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getHardwareSecurityModuleUrl(), transactionId))\n          .takeUntil(this.destroyed$)\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK && response.data.value === true) {\n                this.isHSMEnabled = true;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  onSubmit() {\n    this.errorMessage = null;\n    if (this.profileData.signingKey.selectedAction === SigningKeyAction.SELECT_EXISTING && !this.result['signing-key'].value) {\n      this.errorMessage = 'Please select an existing signing key.';\n    }\n    else if (this.profileData.signingKey.selectedAction === SigningKeyAction.USE_HSM) {\n      this.profileData.signingKey.data.id = this.profileData.name.toLowerCase() + '-signing-key-01';\n      if (!this.profileData.signingKey.data.hsmData.keyType) {\n        this.errorMessage = 'Please select a type.';\n      }\n      else if ((this.profileData.signingKey.data.hsmData.keyType === 'dsa' ||\n        this.profileData.signingKey.data.hsmData.keyType === 'rsa') && !this.profileData.signingKey.data.hsmData.keysize) {\n        this.errorMessage = 'Please select a key size';\n      }\n      else if (this.profileData.signingKey.data.hsmData.keyType === 'elliptic-curve' && !this.profileData.signingKey.data.hsmData.curveName) {\n        this.errorMessage = 'please select a curve name';\n      }\n      else {\n        this.navigate.emit(NavigateDirection.NEXT);\n      }\n    }\n    else if (this.profileData.signingKey.selectedAction === SigningKeyAction.GENERATE_NEW) {\n      this.profileData.signingKey.data.id = this.profileData.name.toLowerCase() + '-signing-key-01';\n      this.profileData.signingKey.certificateTypeData = this.certificateTypeData.value;\n      if (!this.certificateTypeData.value) {\n        this.errorMessage = 'Please select a certificate type.';\n      }\n      else if (this.certificateTypeData.value === 'symmetric' && !this.profileData.signingKey.data.newSigningKeyData.keysize) {\n        this.errorMessage = 'Please select a key size';\n      }\n      else if (this.certificateTypeData.value === 'symmetric' && !this.profileData.signingKey.data.newSigningKeyData.keystore) {\n        this.errorMessage = 'Please select a key value';\n      }\n      else if (this.certificateTypeData.value === 'asymmetric' && !this.profileData.signingKey.data.newSigningKeyData.keyType) {\n        this.errorMessage = 'Please select a key type';\n      }\n      else if (this.certificateTypeData.value === 'asymmetric' && this.profileData.signingKey.data.newSigningKeyData.keyType === 'rsa' &&\n        !this.profileData.signingKey.data.newSigningKeyData.keysize) {\n        this.errorMessage = 'Please select a key size';\n      }\n      else if (this.certificateTypeData.value === 'asymmetric' && this.profileData.signingKey.data.newSigningKeyData.keyType === 'elliptic-curve' &&\n        !this.profileData.signingKey.data.newSigningKeyData.curveName) {\n        this.errorMessage = 'Please select a curve name';\n      }\n      else if (this.certificateTypeData.value === 'asymmetric' && !this.profileData.signingKey.data.newSigningKeyData.commonName) {\n        this.errorMessage = 'Please select a common name';\n      }\n      else {\n        if (this.certificateTypeData.value === 'asymmetric' &&\n          this.profileData.signingKey.data.newSigningKeyData.keyType === 'elliptic-curve') {\n          this.profileData.signingKey.data.newSigningKeyData.keysize = null;\n        }\n        this.navigate.emit(NavigateDirection.NEXT);\n      }\n    }\n    else {\n      this.navigate.emit(NavigateDirection.NEXT);\n    }\n  }\n\n  onBack() {\n    this.navigate.emit(NavigateDirection.BACK);\n  }\n\n  generateRandom() {\n    this.errorMessage = null;\n    if (this.result['new-signing-symmetric-key-size'].value) {\n      this.Api.postRequest(RequestBuilder.withGenerateRandom(this.result['new-signing-symmetric-key-size'].value))\n        .takeUntil(this.destroyed$)\n        .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.profileData.signingKey.data.newSigningKeyData.keystore = response.data.value;\n            }\n          },\n          error => console.log(error));\n    }\n    else {\n      this.errorMessage = 'Please select a key size';\n    }\n  }\n\n  certificateTypeDataChanged(data: any) {\n    this.profileData.signingKey.data.certificateType = data.value;\n    this.profileData.signingKey.data.newSigningKeyData = data.value === 'symmetric' ? {'is-raw-key': true} : {validity: '365'};\n    this.result['new-signing-key-size'].value = null;\n    this.result['new-signing-symmetric-key-size'].value = null;\n    this.errorMessage = null;\n  }\n\n  hsmKeyTypeChanged(data: any) {\n    this.profileData.signingKey.data.hsmData = {};\n    this.profileData.signingKey.data.hsmData.keyType = data.value;\n    this.errorMessage = null;\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/wizards/shared/signing-key-step/signing-key-step.component.ts	(revision 727249da7e74baf31b41311453052096ea08aaba)
+++ src/app/shared/components/modals/wizards/shared/signing-key-step/signing-key-step.component.ts	(date 1552560405000)
@@ -72,19 +72,22 @@
       name: 'new-signing-key-size',
       displayName: 'Key Size',
       items: ['2048', '4096'],
-      value: this.profileData.signingKey.data.newSigningKeyData.keysize
+      value: this.profileData.signingKey.data.newSigningKeyData.keysize,
+      mandatory: true
     };
     this.result['new-signing-key-type'] = {
       name: 'new-signing-key-type',
       displayName: 'Key Type',
       items: ['rsa', 'elliptic-curve'],
-      value: this.profileData.signingKey.data.newSigningKeyData.keyType
+      value: this.profileData.signingKey.data.newSigningKeyData.keyType,
+      mandatory: true
     };
     this.result['new-signing-curveName'] = {
       name: 'new-signing-curveName',
       displayName: 'Curve Name',
       items: ['P-256', 'P-384', 'P-521'],
-      value: this.profileData.signingKey.data.newSigningKeyData.curveName
+      value: this.profileData.signingKey.data.newSigningKeyData.curveName,
+      mandatory: true
     };
     this.result['hsm-key-type'] = {
       name: 'hsm-key-type',
