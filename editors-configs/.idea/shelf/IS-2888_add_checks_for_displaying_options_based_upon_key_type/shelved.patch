Index: src/app/shared/components/modals/facilities/certificate-modal/certificate-modal.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { EndpointsService } from '../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../../core/services/modal.service';\nimport { RequestBuilder } from '../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../../core/services/transaction.service';\nimport { CertificateAction } from './certificate-action.enum';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-certificate-modal',\n  templateUrl: 'certificate-modal.component.html'\n})\nexport class CertificateModal {\n  @Input() isHidden: boolean = true;\n  @Output() created = new EventEmitter();\n\n  url: string;\n  isBusyCounter: number = 0;\n  title: string;\n  data: any = {};\n  errorMessage: string;\n  type: string;\n  paramKey: string;\n  callback: string;\n  hasError: boolean;\n  isEdit: boolean;\n  isHSMEnabled: boolean;\n  reloadAfterCreation: boolean;\n  canGenerateNew: boolean = true;\n  certificateAction = CertificateAction;\n  certificateTypeData: any = {};\n\n  private static modal = null;\n  private elementsBusy$: Subscription;\n\n  constructor(private api: HttpApiService,\n              private transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedService: SharedDataService,\n              private modalService: ModalService) {\n\n  }\n\n  ngOnInit(): any {\n    CertificateModal.modal = this;\n    this.certificateTypeData = {\n      name: 'certificate-type',\n      displayName: 'Type',\n      items: [CertificateAction.SYMMETRIC, CertificateAction.ASYMMETRIC]\n    };\n  }\n\n  public static open(title: string, type: string, url: string, callback: string, reloadAfterCreation: boolean, canGenerateNew: boolean = true) {\n    let self = CertificateModal.modal;\n    self.title = title;\n    self.url = url;\n    self.type = type;\n    self.callback = callback;\n    self.reloadAfterCreation = reloadAfterCreation;\n    self.canGenerateNew = canGenerateNew;\n    self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');\n    self.data = {};\n    self.isEdit = false;\n    if (self.paramKey) {\n      self.data.id = self.paramKey;\n      self.isEdit = true;\n    }\n    self.checkHSMExists();\n    self.isBusyCounter = 0;\n    self.elementsBusy$ = self.sharedService.getElementsBusy()\n      .distinctUntilChanged()\n      .delay(0)\n      .subscribe(isBusy => {\n        if (isBusy) {\n          self.isBusyCounter++;\n        }\n        else {\n          self.isBusyCounter--;\n        }\n      });\n    self.isHidden = false;\n    self.modalService.addOpenedModal('CertificateModal', self, 'close');\n    SharedDataService.lockScroll();\n  }\n\n  public static close() {\n    CertificateModal.modal.close();\n  }\n\n  close() {\n    this.isHidden = true;\n    this.isBusyCounter = 0;\n    this.data = {};\n    this.certificateTypeData.value = null;\n    this.errorMessage = null;\n    this.hasError = false;\n    this.isHSMEnabled = false;\n    if (this.elementsBusy$) {\n      this.elementsBusy$.unsubscribe();\n    }\n    this.modalService.removeOpenedModal('CertificateModal');\n    SharedDataService.unlockScroll();\n  }\n\n  checkHSMExists() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.api.postRequest(RequestBuilder.withExists(this.endpoints.getHardwareSecurityModuleUrl(), transactionId))\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK && response.data.value === true) {\n                this.isHSMEnabled = true;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  onCreated(data: any) {\n    this.created.emit({...data, reloadAfterCreation: this.reloadAfterCreation});\n  }\n\n  onClose() {\n    this.close();\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/facilities/certificate-modal/certificate-modal.component.ts	(revision 6700a6ff237bbbaec31b6b596e33e7aba0539a8d)
+++ src/app/shared/components/modals/facilities/certificate-modal/certificate-modal.component.ts	(date 1533291567000)
@@ -31,6 +31,8 @@
   isHSMEnabled: boolean;
   reloadAfterCreation: boolean;
   canGenerateNew: boolean = true;
+  canCreateNew: boolean = true;
+  canUseHSM: boolean = true;
   certificateAction = CertificateAction;
   certificateTypeData: any = {};
 
@@ -54,14 +56,13 @@
     };
   }
 
-  public static open(title: string, type: string, url: string, callback: string, reloadAfterCreation: boolean, canGenerateNew: boolean = true) {
+  public static open(title: string, type: string, url: string, callback: string, reloadAfterCreation: boolean) {
     let self = CertificateModal.modal;
     self.title = title;
     self.url = url;
     self.type = type;
     self.callback = callback;
     self.reloadAfterCreation = reloadAfterCreation;
-    self.canGenerateNew = canGenerateNew;
     self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');
     self.data = {};
     self.isEdit = false;
@@ -82,6 +83,22 @@
           self.isBusyCounter--;
         }
       });
+    //certificateTypeData
+    if (['generateSslServerKeystore', 'addSslClientKeystore'].includes(type)) {
+      self.certificateTypeData.items = [CertificateAction.ASYMMETRIC];
+    }
+    else if (['addEncryptionKeystore'].includes(type)) {
+      self.certificateTypeData.items = [CertificateAction.SYMMETRIC];
+    }
+    else {
+      self.certificateTypeData.items = [CertificateAction.SYMMETRIC, CertificateAction.ASYMMETRIC];
+    }
+    if (['addSslClientKeystore', 'addSignatureVerificationKey', 'addDecryptionKeystore'].includes(type)) {
+      self.canGenerateNew = false;
+    }
+    if (['addSignatureVerificationKey'].includes(type)) {
+      self.canUseHSM = false;
+    }
     self.isHidden = false;
     self.modalService.addOpenedModal('CertificateModal', self, 'close');
     SharedDataService.lockScroll();
@@ -99,6 +116,10 @@
     this.errorMessage = null;
     this.hasError = false;
     this.isHSMEnabled = false;
+    this.canGenerateNew = true;
+    this.canCreateNew = true;
+    this.canUseHSM = true;
+    this.certificateTypeData.items = [CertificateAction.SYMMETRIC, CertificateAction.ASYMMETRIC];
     if (this.elementsBusy$) {
       this.elementsBusy$.unsubscribe();
     }
Index: src/app/core/services/facilities.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from '@angular/core';\nimport { ConfirmModal } from '../../shared/components/modals/confrim-modal/confirm-modal.component';\nimport { CertificateModal } from '../../shared/components/modals/facilities/certificate-modal/certificate-modal.component';\nimport { FacilitiesModal } from '../../shared/components/modals/facilities/facilities-modal/facilities-modal.component';\nimport { HttpClientsModal } from '../../shared/components/modals/facilities/http-clients-modal/http-clients-modal.component';\nimport { EndpointsService } from './endpoints';\nimport { HttpApiService } from './http-api.service';\nimport { RequestBuilder } from './request.builder';\nimport { ResponseCode } from './ResponseCode';\nimport { SharedDataService } from './shared-data.service';\nimport { TransactionService } from './transaction.service';\n\n@Injectable()\nexport class FacilitiesService {\n  facilities: any = {};\n  url: string;\n  callback: string;\n\n  constructor(private transaction: TransactionService,\n              private Api: HttpApiService,\n              private sharedData: SharedDataService,\n              private endpoints: EndpointsService) {\n    this.initializeData();\n  }\n\n  initializeData() {\n    this.facilities.dataSources = [];\n    this.facilities.smsProviders = [];\n    this.facilities.emailProviders = [];\n    this.facilities.httpClients = [];\n\n    this.facilities.serverSSLKeys = [];\n    this.facilities.clientSSLKeys = [];\n    this.facilities.signingKeys = [];\n    this.facilities.encryptionKeys = [];\n    this.facilities.decryptionKeys = [];\n\n    this.facilities.serverTrustStores = [];\n    this.facilities.signatureVerificiationKeys = [];\n    this.facilities.credentialManagers = [];\n    this.facilities.accountManagers = [];\n  }\n\n  search(value: string) {\n    if (!value) {\n     return this.facilities;\n    }\n\n    let tempFacilites:any = {};\n    tempFacilites.dataSources = this.facilities.dataSources.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.smsProviders = this.facilities.smsProviders.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.emailProviders = this.facilities.emailProviders.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.httpClients = this.facilities.httpClients.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.serverSSLKeys = this.facilities.serverSSLKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.clientSSLKeys = this.facilities.clientSSLKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.signingKeys = this.facilities.signingKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.encryptionKeys = this.facilities.encryptionKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.decryptionKeys = this.facilities.decryptionKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.serverTrustStores = this.facilities.serverTrustStores.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.signatureVerificiationKeys = this.facilities.signatureVerificiationKeys.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.credentialManagers = this.facilities.credentialManagers.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n    tempFacilites.accountManagers = this.facilities.accountManagers.filter(item => item.toLowerCase().indexOf(value.toLowerCase()) > -1);\n\n    return tempFacilites;\n  }\n\n  getFacilitiesDropdownData() {\n    this.getDataSources();\n    this.getSmsProviders();\n    this.getEmailProviders();\n    this.getHttpClients();\n    this.getCredentialManagers();\n    this.getAccountManagers();\n\n    //-----------start get keystores ----------------\n    this.getServerSSLKeys();\n    this.getClientSSLKeys();\n    this.getSigningKeys();\n    this.getEncryptionKeys();\n    this.getDecryptionKeys();\n    ///--------end get keystores -------------------\n\n    //---------start get certs---------\n    this.getServerTrustStores();\n    this.getSignatureVerificiationKeys();\n\n    return this.facilities;\n  }\n\n  getDataSources() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesDataSourcesUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.dataSources = [];\n            response.data.keys.forEach(value => {\n              this.facilities.dataSources.push(value.id);\n            })\n          });\n      });\n  }\n\n  getEmailProviders() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesEmailProvidersUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.emailProviders = [];\n            response.data.keys.forEach(value => {\n              this.facilities.emailProviders.push(value.id);\n            })\n          });\n\n      });\n  }\n\n  getSmsProviders() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesSmsProvidersUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.smsProviders = [];\n            response.data.keys.forEach(value => {\n              this.facilities.smsProviders.push(value.id);\n            })\n          });\n\n      });\n  }\n\n  getHttpClients() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesHttpClientsUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.httpClients = [];\n            response.data.keys.forEach(value => {\n              this.facilities.httpClients.push(value.id);\n            })\n          });\n      });\n  }\n\n  getCredentialManagers() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesCredentialManagersUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.credentialManagers = [];\n            response.data.keys.forEach(value => {\n              this.facilities.credentialManagers.push(value.id);\n            })\n          });\n      });\n  }\n\n  getAccountManagers() {\n    this.transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getFacilitiesAccountManagersUrl(), transactionId))\n          .subscribe(response => {\n            this.facilities.accountManagers = [];\n            response.data.keys.forEach(value => {\n              this.facilities.accountManagers.push(value.id);\n            });\n          });\n      });\n  }\n\n  getServerSSLKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getServerSSLKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.serverSSLKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.serverSSLKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getClientSSLKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getClientSSLKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.clientSSLKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.clientSSLKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getSigningKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getSigningKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.signingKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.signingKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getEncryptionKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getEncryptionKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.encryptionKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.encryptionKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getDecryptionKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getDecryptionKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.decryptionKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.decryptionKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getSignatureVerificiationKeys() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getSignatureVerificiationKeysUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.signatureVerificiationKeys = [];\n          response.data.keys.forEach(value => {\n            this.facilities.signatureVerificiationKeys.push(value.id);\n          })\n        });\n      });\n  }\n\n  getServerTrustStores() {\n    this.transaction.getReadTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withGetListKeys(this.endpoints.getServerTrustStoresUrl(), transactionId))\n         .subscribe(response => {\n          this.facilities.serverTrustStores = [];\n          response.data.keys.forEach(value => {\n            this.facilities.serverTrustStores.push(value.id);\n          })\n        });\n      });\n  }\n\n  createFacilities(type: string, selectedValue: any = null, callback: string = null, caller: any = null, reloadAfterCreation: boolean = false) {\n    this.sharedData.setSelectedParam(type + \"-facilities\", null);\n    if (selectedValue) {\n      this.sharedData.setSelectedParam(type + \"-facilities\", selectedValue);\n    }\n\n    if (type == \"dataSources\") {\n      FacilitiesModal.open({title: \"Create Data Source\", type: type, caseTypeName: \"data-source-type\", url: this.endpoints.getFacilitiesDataSourcesUrl(), toolbarIconClass: 'ion-datasource', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n    else if (type == \"emailProviders\") {\n      FacilitiesModal.open({title: \"Create Email Provider\", type: type, caseTypeName: \"provider-type\", url: this.endpoints.getFacilitiesEmailProvidersUrl(), toolbarIconClass: 'ion-email', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n    else if (type == \"smsProviders\") {\n      FacilitiesModal.open({title: \"Create SMS Provider\", type: type, caseTypeName: \"provider-type\", url: this.endpoints.getFacilitiesSmsProvidersUrl(), toolbarIconClass: 'ion-iphone', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n    else if (type == \"httpClients\") {\n      HttpClientsModal.open({title: \"Create Http Client\", type: type, url: this.endpoints.getFacilitiesHttpClientsUrl(), toolbarIconClass: 'ion-android-globe', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n    else if (type == \"credentialManagers\") {\n      FacilitiesModal.open({title: \"Create Credential Manager\", type: type, caseTypeName: \"credential-manager\", url: this.endpoints.getFacilitiesCredentialManagersUrl(), toolbarIconClass: 'ion-iphone', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n    else if (type == \"generateSslServerKeystore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} SSL Server Key`, type, this.endpoints.getServerSSLKeysUrl(), \"getServerSSLKeys\", reloadAfterCreation);\n    }\n    else if (type == \"addSslClientKeystore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} SSL Client Key`, type, this.endpoints.getClientSSLKeysUrl(), \"getClientSSLKeys\", reloadAfterCreation, false);\n    }\n    else if (type == \"generateSigningKeyKeystore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Signing Key`, type, this.endpoints.getSigningKeysUrl(), \"getSigningKeys\", reloadAfterCreation);\n    }\n    else if (type == \"addEncryptionKeystore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Encryption Key`, type, this.endpoints.getEncryptionKeysUrl(), \"getEncryptionKeys\", reloadAfterCreation);\n    }\n    else if (type == \"addDecryptionKeystore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Decryption Key`, type, this.endpoints.getDecryptionKeysUrl(), \"getDecryptionKeys\", reloadAfterCreation, false);\n    }\n    else if (type == \"addSslServerTruststore\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Server Certificate`, type, this.endpoints.getServerTrustStoresUrl(), \"getServerTrustStores\", reloadAfterCreation);\n    }\n    else if (type == \"addSignatureVerificationKey\") {\n      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Signature Verification Key`, type, this.endpoints.getSignatureVerificiationKeysUrl(), \"getSignatureVerificiationKeys\", reloadAfterCreation);\n    }\n    else if (type == \"accountManagers\") {\n      FacilitiesModal.open({title: \"Create Account Manager\", type: type, caseTypeName: \"account-manager\", url: this.endpoints.getFacilitiesAccountManagersUrl(), toolbarIconClass: 'ion-android-person', callback: callback, caller: caller, reloadAfterCreation: reloadAfterCreation});\n    }\n  }\n\n  editFacilities(type: string, selectedValue: any) {\n    this.sharedData.setSelectedParam(type + \"-facilities\", selectedValue);\n\n    if (type == \"dataSources\") {\n      FacilitiesModal.open({title: \"Edit Data Source\", type: type, caseTypeName: \"data-source-type\", url: this.endpoints.getFacilitiesDataSourcesUrl(), toolbarIconClass: 'ion-datasource'});\n    }\n    else if (type == \"emailProviders\") {\n      FacilitiesModal.open({title: \"Edit Email Provider\", type: type, caseTypeName: \"provider-type\", url: this.endpoints.getFacilitiesEmailProvidersUrl(), toolbarIconClass: 'ion-email'});\n    }\n    else if (type == \"smsProviders\") {\n      FacilitiesModal.open({title: \"Edit SMS Provider\", type: type, caseTypeName: \"provider-type\", url: this.endpoints.getFacilitiesSmsProvidersUrl(), toolbarIconClass: 'ion-iphone'});\n    }\n    else if (type == \"httpClients\") {\n      HttpClientsModal.open({title: \"Edit HTTP Client\", type: type, url: this.endpoints.getFacilitiesHttpClientsUrl(), toolbarIconClass: 'ion-android-globe'});\n    }\n    else if (type == \"credentialManagers\") {\n      FacilitiesModal.open({title: \"Edit Credential Manager\", type: type, caseTypeName: \"credential-manager\", url: this.endpoints.getFacilitiesCredentialManagersUrl(), toolbarIconClass: 'ion-iphone'});\n    }\n    else if (type == \"accountManagers\") {\n      FacilitiesModal.open({title: \"Edit Account Manager\", type: type, caseTypeName: \"account-manager\", url: this.endpoints.getFacilitiesAccountManagersUrl(), toolbarIconClass: 'ion-android-person'});\n    }\n  }\n\n  deleteFacility(type: string, selectedValue: string) {\n\n    let url = this.endpoints.getCryptoKeystoresApiUrl();\n    let callback: string;\n    let facilityType = \"\";\n    if (type == \"dataSources\") {\n      url = this.endpoints.getFacilitiesDataSourcesUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getDataSources\";\n      facilityType=\"Data Source\";\n    }\n    else if (type == \"emailProviders\") {\n      url = this.endpoints.getFacilitiesEmailProvidersUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getEmailProviders\";\n      facilityType = \"Email Provider\";\n    }\n    else if (type == \"smsProviders\") {\n      url = this.endpoints.getFacilitiesSmsProvidersUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getSmsProviders\";\n      facilityType = \"SMS Provider\";\n    }\n    else if (type == \"httpClients\") {\n      url = this.endpoints.getFacilitiesHttpClientsUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getHttpClients\";\n      facilityType = \"Http Client\";\n    }\n    else if (type == \"credentialManagers\") {\n      url = this.endpoints.getFacilitiesCredentialManagersUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getCredentialManagers\";\n      facilityType = \"Credential Manager\";\n    }\n    else if (type == \"serverSSLKeys\") {\n      url += \"ssl/server-keystore{\" + selectedValue + \"}\";\n      callback = \"getServerSSLKeys\";\n      facilityType = \"Server SSL Key\";\n    }\n    else if (type == \"clientSSLKeys\") {\n      url += \"ssl/client-keystores/client-keystore{\" + selectedValue + \"}\";\n      callback = \"getClientSSLKeys\";\n      facilityType = \"Client SSL Key\";\n    }\n    else if (type == \"signingKeys\") {\n      url += \"signing-keys/signing-key{\" + selectedValue + \"}\";\n      callback = \"getSigningKeys\";\n      facilityType = \"Signing Key\";\n    }\n    else if (type == \"encryptionKeys\") {\n      url += \"encryption-keys/encryption-key{\" + selectedValue + \"}\";\n      callback = \"getEncryptionKeys\";\n      facilityType = \"Encryption Key\";\n    }\n    else if (type == \"decryptionKeys\") {\n      url += \"decryption-keys/decryption-key{\" + selectedValue + \"}\";\n      callback = \"getDecryptionKeys\";\n      facilityType = \"Decryption Key\";\n    }\n    else if (type == \"serverTrustStores\") {\n      url += \"ssl/server-truststore/server-certificate{\" + selectedValue + \"}\";\n      callback = \"getServerTrustStores\";\n      facilityType = \"Server Trust Store\";\n    }\n    else if (type == \"signatureVerificiationKeys\") {\n      url += \"signature-verification-keys/signature-verification-key{\" + selectedValue + \"}\";\n      callback = \"getSignatureVerificiationKeys\";\n      facilityType = \"Signature Verificiation Key\";\n    }\n    else if (type == \"accountManagers\") {\n      url = this.endpoints.getFacilitiesAccountManagersUrl() + \"{\" + selectedValue + \"}\";\n      callback = \"getAccountManagers\";\n      facilityType = \"Account Manager\";\n    }\n    this.url = url;\n    this.callback = callback;\n    ConfirmModal.open(\"Delete \" + facilityType, \"Are you sure you want to delete \" + facilityType + \" <em>\" + selectedValue + \"</em>?\", \"deleteFacilityConfirmed\", this);\n  }\n\n  deleteFacilityConfirmed() {\n    if(!this.url || !this.callback){\n      return;\n    }\n    this.deleteFacilityKey(this.url, this.callback);\n    this.url = null;\n    this.callback = null;\n  };\n\n  private deleteFacilityKey(url: string, callback: string) {\n    this.transaction.getWriteTransaction()\n      .then(transactionId=> {\n        this.Api.postRequest(RequestBuilder.withDelete(url, transactionId))\n         .subscribe(response=> {\n          if (response.code != ResponseCode.OK) {\n            alert(\"Error while deleting: \" + JSON.stringify(response.error));\n          } else {\n            this.sharedData.incrementChangeCount(url);\n            this[callback]();\n          }\n        })\n      })\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/core/services/facilities.service.ts	(revision 6700a6ff237bbbaec31b6b596e33e7aba0539a8d)
+++ src/app/core/services/facilities.service.ts	(date 1533291299000)
@@ -283,7 +283,7 @@
       CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} SSL Server Key`, type, this.endpoints.getServerSSLKeysUrl(), "getServerSSLKeys", reloadAfterCreation);
     }
     else if (type == "addSslClientKeystore") {
-      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} SSL Client Key`, type, this.endpoints.getClientSSLKeysUrl(), "getClientSSLKeys", reloadAfterCreation, false);
+      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} SSL Client Key`, type, this.endpoints.getClientSSLKeysUrl(), "getClientSSLKeys", reloadAfterCreation);
     }
     else if (type == "generateSigningKeyKeystore") {
       CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Signing Key`, type, this.endpoints.getSigningKeysUrl(), "getSigningKeys", reloadAfterCreation);
@@ -292,7 +292,7 @@
       CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Encryption Key`, type, this.endpoints.getEncryptionKeysUrl(), "getEncryptionKeys", reloadAfterCreation);
     }
     else if (type == "addDecryptionKeystore") {
-      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Decryption Key`, type, this.endpoints.getDecryptionKeysUrl(), "getDecryptionKeys", reloadAfterCreation, false);
+      CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Decryption Key`, type, this.endpoints.getDecryptionKeysUrl(), "getDecryptionKeys", reloadAfterCreation);
     }
     else if (type == "addSslServerTruststore") {
       CertificateModal.open(`${selectedValue ? 'Replace' : 'New'} Server Certificate`, type, this.endpoints.getServerTrustStoresUrl(), "getServerTrustStores", reloadAfterCreation);
