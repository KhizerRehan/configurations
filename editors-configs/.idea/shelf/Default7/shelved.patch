Index: src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpClient } from '@angular/common/http';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BatchOperationsService } from '../../../../../core/services/batch-operations.service';\nimport { EndpointsService } from '../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../../core/services/modal.service';\nimport { RequestBuilder } from '../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../../core/services/transaction.service';\n\nexport enum TrustStoreMethod {\n  TEXT,\n  FILE,\n  HOST\n}\n\n@Component({\n  selector: 'app-trust-store-modal',\n  templateUrl: './trust-store-modal.component.html'\n})\nexport class TrustStoreModal implements OnInit {\n  readonly specialCharactersRegex = /[\\*\\.\\/\\\\\\?\\:\\s\\-]/g;\n  readonly step1Descriptions = {\n    [TrustStoreMethod.TEXT]: 'Copy and paste the PEM-encoded or JWKS text of the keys you wish to trust into the textarea below. ' +\n    'PEM-encoded files often have a file extension of .pem, .key, .cer, .cert and more. A PEM-encoded file is text ' +\n    'usually begins with the header -----BEGIN CERTIFICATE-----. (If this header is omitted, it will be automatically ' +\n    'added as necessary.) JWKS keys are encoded in JSON. You may drag and drop a file onto the text area.',\n\n    [TrustStoreMethod.FILE]: 'Select or drag and drop a PEM- or DER-encoded file, JWKS file, or a keystore file that contains keys you ' +\n    'wish to trust. Common file extensions are .pem, .key, .der, .cer, .cert, .jwks, .json, .jks, .jceks, .ks, .p12, .pfx or .pkcs12. ' +\n    'If the file is encrypted, enter the password necessary to decrypt it.',\n\n    [TrustStoreMethod.HOST]: 'Enter a host or choose one of the common ones from the dropdown list. After selecting or typing a host, ' +\n    'click the Next button. The certificates used by that server will be displayed and you will have the option to view and trust them.'\n  };\n  readonly step2Description = '';\n  readonly step1ErrorMessages = {\n    [TrustStoreMethod.TEXT]: 'An error occurred processing the text. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.FILE]: 'An error occurred processing the file. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.HOST]: 'An error occurred fetching certificates from the given host. Ensure that it is correct, and try again. If ' +\n    'it is correct, obtain the certificates by other means and upload them as a file.'\n  };\n  readonly commonHosts: Array<string> = ['https://appapi.bankid.com', 'https://appapi.test.bankid.com'];\n\n  @Input() isHidden: boolean = true;\n  @Input() url: string;\n  @Input() reloadAfterCreation: boolean;\n  @Input() title: string;\n  @Input() type: string;\n  @Output() created = new EventEmitter();\n  @Output() close = new EventEmitter();\n  @ViewChild('fileInput') fileInput;\n\n  trustStoreMethod = TrustStoreMethod;\n  isBusyCounter: number = 0;\n  fileDragActiveCounter: number = 0;\n  isEdit: boolean;\n  selectedFile: any = {};\n  showPassword: boolean;\n  data: any = {};\n  hostData: any = {};\n  error: any;\n  certificateChains: any;\n  selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;\n  currentStep: number = 1;\n  selectedKey: any;\n  isKeyDetailsModalHidden: boolean = true;\n  isHostsDropdownShown: boolean;\n\n  private paramKey: string;\n  private static modal = null;\n\n  constructor(private http: HttpClient,\n              private api: HttpApiService,\n              private transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedService: SharedDataService,\n              private modalService: ModalService,\n              private batchService: BatchOperationsService) {\n    if (!TrustStoreModal.modal) {\n      TrustStoreModal.modal = this;\n    }\n  }\n\n  ngOnInit(): any {\n    this.paramKey = this.sharedService.getSelectedParam(this.type + '-facilities');\n    this.data = {};\n    this.hostData = {};\n    this.isEdit = false;\n    if (this.paramKey) {\n      this.data.id = this.paramKey;\n      this.isEdit = true;\n    }\n    this.isBusyCounter = 0;\n  }\n\n  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean) {\n    let self = TrustStoreModal.modal;\n    self.title = title;\n    self.url = url;\n    self.error = null;\n    self.type = type;\n    self.reloadAfterCreation = reloadAfterCreation;\n    self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');\n    self.data = {};\n    self.hostData = {};\n    self.isEdit = false;\n    if (self.paramKey) {\n      self.data.id = self.paramKey;\n      self.isEdit = true;\n    }\n    self.isHidden = false;\n    self.isBusyCounter = 0;\n    self.modalService.addOpenedModal('TrustStoreModal', self, 'closeModal');\n    SharedDataService.lockScroll();\n  }\n\n  public static close() {\n    TrustStoreModal.modal.closeModal();\n  }\n\n  closeModal() {\n    this.isHidden = true;\n    this.selectedFile = {};\n    this.data = {};\n    this.hostData = {};\n    this.error = null;\n    this.isBusyCounter = 0;\n    this.selectedMethod = TrustStoreMethod.TEXT;\n    this.currentStep = 1;\n    this.certificateChains = null;\n    this.showPassword = false;\n    this.modalService.removeOpenedModal('TrustStoreModal');\n    this.close.emit();\n    SharedDataService.unlockScroll();\n  }\n\n  onTextAreaFilesDropped(fileList: Array<File>) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      let fileReader = new FileReader();\n      this.data.keystore = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        const data = event.target.result.substring(index);\n        this.data.keystoreText = this.sharedService.decodeBase64(data);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }\n\n  getFileData(fileList: Array<File>, isFileDnd?: boolean) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      const ext = file.name.slice((file.name.lastIndexOf('.') - 1 >>> 0) + 1); // extracting . with the extension as well\n      this.selectedFile.name = file.name;\n      this.selectedFile.ext = ext;\n      let fileReader = new FileReader();\n      this.data.keystoreFile = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        this.data.keystoreFile = event.target.result.substring(index);\n      };\n      fileReader.readAsDataURL(file);\n    }\n    else {\n      this.data.keystoreFile = null;\n      this.selectedFile = {};\n    }\n    if (isFileDnd) {\n      this.fileInput.nativeElement.value = '';\n    }\n  }\n\n  onStep1Submit() {\n    this.error = null;\n    let requestData;\n    if (this.selectedMethod === TrustStoreMethod.TEXT) {\n      if (this.data.keystoreText) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreText);\n      }\n      else {\n        this.error = 'Please enter some text.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.FILE) {\n      if (this.data.keystoreFile) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreFile, this.data.password);\n      }\n      else {\n        this.error = 'Please select a file.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.HOST) {\n      if (!this.hostData.value) {\n        this.error = 'Please enter a host.';\n      }\n      else if (this.hostData.hasError) {\n        this.error = 'Please enter a valid host.';\n      }\n      else {\n        requestData = RequestBuilder.withGetTruststore(this.hostData.value);\n      }\n    }\n    if (!requestData) {\n      return;\n    }\n    this.isBusyCounter++;\n    this.api.postRequest(requestData)\n      .finally(() => this.isBusyCounter--)\n      .subscribe(response => {\n          if (response.code !== ResponseCode.OK) {\n            this.error = this.step1ErrorMessages[this.selectedMethod];\n          }\n          else {\n            this.certificateChains = response.data.chains;\n            this.certificateChains.forEach(certificate => {\n              certificate.keys = certificate.keys.map(key => {\n                if (key.id && isNaN(key.id)) {\n                  const idTokens = key.id.split(',');\n                  idTokens.forEach(token => {\n                    if (token.trim().startsWith('CN=')) {\n                      key.commonName = token.split('=')[1];\n                      key.commonName = key.commonName.replace(this.specialCharactersRegex, '_');\n                    }\n                  });\n                }\n                key.randomId = SharedDataService.generateRandomString();\n                return key;\n              })\n                .reverse();\n            });\n            if (this.certificateChains.length === 1 && this.certificateChains[0].keys.length === 1) {\n              this.certificateChains[0].keys[0].isSelected = true;\n            }\n            this.currentStep++;\n          }\n        },\n        error => console.log(error));\n  }\n\n  onStep2Submit() {\n    this.error = null;\n    const selectedKeys = [];\n    this.certificateChains.forEach(chain => {\n      chain.keys.forEach(key => {\n        key.hasError = false;\n        key.commonName = key.commonName ? key.commonName.trim().replace(this.specialCharactersRegex, '_') : '';\n        if (key.isSelected) {\n          selectedKeys.push(key);\n        }\n      });\n    });\n    if (selectedKeys.length === 0) {\n      this.error = 'Please select at least one key.';\n    }\n    else {\n      const tempKeyList = [];\n      const invalidKeys = selectedKeys.filter(key => {\n        if (!key.commonName) {\n          key.hasError = true;\n          return true;\n        }\n        else if (tempKeyList.includes(key.commonName)) {\n          this.error = 'Duplicate key names.';\n          key.hasError = true;\n          return true;\n        }\n        else {\n          tempKeyList.push(key.commonName);\n          return false;\n        }\n      });\n      if (invalidKeys.length === 0) {\n        this.checkIfKeysExists(selectedKeys)\n          .subscribe(exists => {\n            if (exists) {\n              this.error = 'A key with this name already exists.';\n            }\n            else {\n              const batchId = this.batchService.createBatch();\n              const requests = [];\n              selectedKeys.forEach(key => {\n                const data = {\n                  id: key.commonName,\n                  keystore: key.keyData\n                };\n                requests.push(\n                  this.batchService.addToBatch(batchId, RequestBuilder.withAddKeystore(this.type, data))\n                    .map(response => {\n                      if (response.code !== ResponseCode.OK) {\n                        key.hasError = true;\n                      }\n                      else {\n                        this.created.emit({value: data.id, reload: this.reloadAfterCreation});\n                      }\n                      return response;\n                    })\n                );\n              });\n              this.isBusyCounter++;\n              Observable.forkJoin(requests)\n                .finally(() => this.isBusyCounter--)\n                .subscribe((responses: Array<any>) => {\n                    const failedResponses = responses.filter(response => response.code !== ResponseCode.OK);\n                    if (failedResponses.length > 0) {\n                      this.error = failedResponses[0];\n                    }\n                    else {\n                      this.closeModal();\n                    }\n                  },\n                  error => console.log(error));\n              this.batchService.initiateRequest(batchId);\n            }\n          },\n            error => console.log(error));\n      }\n    }\n  }\n\n  onBack() {\n    this.currentStep--;\n  }\n\n  openKeyDetailsModal(key: any) {\n    this.selectedKey = key;\n    this.isKeyDetailsModalHidden = false;\n    this.modalService.addOpenedModal('KeyDetailsModal', this, 'closeKeyDetailsModal');\n  }\n\n  closeKeyDetailsModal() {\n    this.isKeyDetailsModalHidden = true;\n    this.modalService.removeOpenedModal('KeyDetailsModal');\n  }\n\n  checkIfKeysExists(keys: Array<any>): Observable<boolean> {\n    return Observable.create(observer => {\n      this.transaction.getReadTransaction()\n        .then(transactionId => {\n          const batchId = this.batchService.createBatch();\n          const requests = keys.map(key => {\n            return this.batchService.addToBatch(batchId,\n              RequestBuilder.withExists(`${this.url}{${key.commonName}}`, transactionId))\n              .map(response => {\n                if (response.code === ResponseCode.OK && response.data.value) {\n                  key.hasError = true;\n                  return {exists: true};\n                }\n                else {\n                  return {exists: false};\n                }\n              });\n          });\n          Observable.forkJoin(requests)\n            .finally(() => observer.complete())\n            .subscribe(responses => {\n              observer.next(responses.some(response => response.exists));\n            },\n              error => observer.error(error));\n          this.batchService.initiateRequest(batchId);\n        });\n\n    });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(revision 24f864a156d420a10c796affe1d26b8f38e2133e)
+++ src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(date 1541682917000)
@@ -68,6 +68,8 @@
   selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;
   currentStep: number = 1;
   selectedKey: any;
+  callback: string;
+  caller: any;
   isKeyDetailsModalHidden: boolean = true;
   isHostsDropdownShown: boolean;
 
@@ -98,13 +100,15 @@
     this.isBusyCounter = 0;
   }
 
-  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean) {
+  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean, callback: string, caller: any) {
     let self = TrustStoreModal.modal;
     self.title = title;
     self.url = url;
     self.error = null;
     self.type = type;
     self.reloadAfterCreation = reloadAfterCreation;
+    self.callback = callback;
+    self.caller = caller;
     self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');
     self.data = {};
     self.hostData = {};
