Index: src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpClient } from '@angular/common/http';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BatchOperationsService } from '../../../../../core/services/batch-operations.service';\nimport { EndpointsService } from '../../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../../core/services/modal.service';\nimport { RequestBuilder } from '../../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../../core/services/transaction.service';\n\nexport enum TrustStoreMethod {\n  TEXT,\n  FILE,\n  HOST\n}\n\n@Component({\n  selector: 'app-trust-store-modal',\n  templateUrl: './trust-store-modal.component.html'\n})\nexport class TrustStoreModal implements OnInit {\n  readonly specialCharactersRegex = /[\\*\\.\\/\\\\\\?\\:\\s\\-]/g;\n  readonly step1Descriptions = {\n    [TrustStoreMethod.TEXT]: 'Copy and paste the PEM-encoded or JWKS text of the keys you wish to trust into the textarea below. ' +\n    'PEM-encoded files often have a file extension of .pem, .key, .cer, .cert and more. A PEM-encoded file is text ' +\n    'usually begins with the header -----BEGIN CERTIFICATE-----. (If this header is omitted, it will be automatically ' +\n    'added as necessary.) JWKS keys are encoded in JSON. You may drag and drop a file onto the text area.',\n\n    [TrustStoreMethod.FILE]: 'Select or drag and drop a PEM- or DER-encoded file, JWKS file, or a keystore file that contains keys you ' +\n    'wish to trust. Common file extensions are .pem, .key, .der, .cer, .cert, .jwks, .json, .jks, .jceks, .ks, .p12, .pfx or .pkcs12. ' +\n    'If the file is encrypted, enter the password necessary to decrypt it.',\n\n    [TrustStoreMethod.HOST]: 'Enter a host or choose one of the common ones from the dropdown list. After selecting or typing a host, ' +\n    'click the Next button. The certificates used by that server will be displayed and you will have the option to view and trust them.'\n  };\n  readonly step2Description = '';\n  readonly step1ErrorMessages = {\n    [TrustStoreMethod.TEXT]: 'An error occurred processing the text. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.FILE]: 'An error occurred processing the file. Ensure that it is correct, and try again.',\n\n    [TrustStoreMethod.HOST]: 'An error occurred fetching certificates from the given host. Ensure that it is correct, and try again. If ' +\n    'it is correct, obtain the certificates by other means and upload them as a file.'\n  };\n  readonly commonHosts: Array<string> = ['https://appapi.bankid.com', 'https://appapi.test.bankid.com'];\n\n  @Input() isHidden: boolean = true;\n  @Input() url: string;\n  @Input() reloadAfterCreation: boolean;\n  @Input() title: string;\n  @Input() type: string;\n  @Output() created = new EventEmitter();\n  @Output() close = new EventEmitter();\n  @ViewChild('fileInput') fileInput;\n\n  trustStoreMethod = TrustStoreMethod;\n  isBusyCounter: number = 0;\n  fileDragActiveCounter: number = 0;\n  isEdit: boolean;\n  selectedFile: any = {};\n  showPassword: boolean;\n  data: any = {};\n  hostData: any = {};\n  error: any;\n  certificateChains: any;\n  selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;\n  currentStep: number = 1;\n  selectedKey: any;\n  isKeyDetailsModalHidden: boolean = true;\n  isHostsDropdownShown: boolean;\n\n  private paramKey: string;\n  private static modal = null;\n\n  constructor(private http: HttpClient,\n              private api: HttpApiService,\n              private transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private sharedService: SharedDataService,\n              private modalService: ModalService,\n              private batchService: BatchOperationsService) {\n    if (!TrustStoreModal.modal) {\n      TrustStoreModal.modal = this;\n    }\n  }\n\n  ngOnInit(): any {\n    this.paramKey = this.sharedService.getSelectedParam(this.type + '-facilities');\n    this.data = {};\n    this.hostData = {};\n    this.isEdit = false;\n    if (this.paramKey) {\n      this.data.id = this.paramKey;\n      this.isEdit = true;\n    }\n    this.isBusyCounter = 0;\n  }\n\n  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean) {\n    let self = TrustStoreModal.modal;\n    self.title = title;\n    self.url = url;\n    self.error = null;\n    self.type = type;\n    self.reloadAfterCreation = reloadAfterCreation;\n    self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');\n    self.data = {};\n    self.hostData = {};\n    self.isEdit = false;\n    if (self.paramKey) {\n      self.data.id = self.paramKey;\n      self.isEdit = true;\n    }\n    self.isHidden = false;\n    self.isBusyCounter = 0;\n    self.modalService.addOpenedModal('TrustStoreModal', self, 'closeModal');\n    SharedDataService.lockScroll();\n  }\n\n  public static close() {\n    TrustStoreModal.modal.closeModal();\n  }\n\n  closeModal() {\n    this.isHidden = true;\n    this.selectedFile = {};\n    this.data = {};\n    this.hostData = {};\n    this.error = null;\n    this.isBusyCounter = 0;\n    this.selectedMethod = TrustStoreMethod.TEXT;\n    this.currentStep = 1;\n    this.certificateChains = null;\n    this.showPassword = false;\n    this.modalService.removeOpenedModal('TrustStoreModal');\n    this.close.emit();\n    SharedDataService.unlockScroll();\n  }\n\n  onTextAreaFilesDropped(fileList: Array<File>) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      let fileReader = new FileReader();\n      this.data.keystore = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        const data = event.target.result.substring(index);\n        this.data.keystoreText = this.sharedService.decodeBase64(data);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }\n\n  getFileData(fileList: Array<File>, isFileDnd?: boolean) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      const ext = file.name.slice((file.name.lastIndexOf('.') - 1 >>> 0) + 1); // extracting . with the extension as well\n      this.selectedFile.name = file.name;\n      this.selectedFile.ext = ext;\n      let fileReader = new FileReader();\n      this.data.keystoreFile = '';\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        this.data.keystoreFile = event.target.result.substring(index);\n      };\n      fileReader.readAsDataURL(file);\n    }\n    else {\n      this.data.keystoreFile = null;\n      this.selectedFile = {};\n    }\n    if (isFileDnd) {\n      this.fileInput.nativeElement.value = '';\n    }\n  }\n\n  onStep1Submit() {\n    this.error = null;\n    let requestData;\n    if (this.selectedMethod === TrustStoreMethod.TEXT) {\n      if (this.data.keystoreText) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreText);\n      }\n      else {\n        this.error = 'Please enter some text.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.FILE) {\n      if (this.data.keystoreFile) {\n        requestData = RequestBuilder.withGetTruststore(null, this.data.keystoreFile, this.data.password);\n      }\n      else {\n        this.error = 'Please select a file.';\n      }\n    }\n    else if (this.selectedMethod === TrustStoreMethod.HOST) {\n      if (!this.hostData.value) {\n        this.error = 'Please enter a host.';\n      }\n      else if (this.hostData.hasError) {\n        this.error = 'Please enter a valid host.';\n      }\n      else {\n        requestData = RequestBuilder.withGetTruststore(this.hostData.value);\n      }\n    }\n    if (!requestData) {\n      return;\n    }\n    this.isBusyCounter++;\n    this.api.postRequest(requestData)\n      .finally(() => this.isBusyCounter--)\n      .subscribe(response => {\n          if (response.code !== ResponseCode.OK) {\n            this.error = this.step1ErrorMessages[this.selectedMethod];\n          }\n          else {\n            this.certificateChains = response.data.chains;\n            this.certificateChains.forEach(certificate => {\n              certificate.keys = certificate.keys.map(key => {\n                if (key.id && isNaN(key.id)) {\n                  const idTokens = key.id.split(',');\n                  idTokens.forEach(token => {\n                    if (token.trim().startsWith('CN=')) {\n                      key.commonName = token.split('=')[1];\n                      key.commonName = key.commonName.replace(this.specialCharactersRegex, '_');\n                    }\n                  });\n                }\n                key.randomId = SharedDataService.generateRandomString();\n                return key;\n              })\n                .reverse();\n            });\n            if (this.certificateChains.length === 1 && this.certificateChains[0].keys.length === 1) {\n              this.certificateChains[0].keys[0].isSelected = true;\n            }\n            this.currentStep++;\n          }\n        },\n        error => console.log(error));\n  }\n\n  onStep2Submit() {\n    this.error = null;\n    const selectedKeys = [];\n    this.certificateChains.forEach(chain => {\n      chain.keys.forEach(key => {\n        key.hasError = false;\n        key.commonName = key.commonName ? key.commonName.trim().replace(this.specialCharactersRegex, '_') : '';\n        if (key.isSelected) {\n          selectedKeys.push(key);\n        }\n      });\n    });\n    if (selectedKeys.length === 0) {\n      this.error = 'Please select at least one key.';\n    }\n    else {\n      const tempKeyList = [];\n      const invalidKeys = selectedKeys.filter(key => {\n        if (!key.commonName) {\n          key.hasError = true;\n          return true;\n        }\n        else if (tempKeyList.includes(key.commonName)) {\n          this.error = 'Duplicate key names.';\n          key.hasError = true;\n          return true;\n        }\n        else {\n          tempKeyList.push(key.commonName);\n          return false;\n        }\n      });\n      if (invalidKeys.length === 0) {\n        this.checkIfKeysExists(selectedKeys)\n          .subscribe(exists => {\n            if (exists) {\n              this.error = 'A key with this name already exists.';\n            }\n            else {\n              const batchId = this.batchService.createBatch();\n              const requests = [];\n              selectedKeys.forEach(key => {\n                const data = {\n                  id: key.commonName,\n                  keystore: key.keyData\n                };\n                requests.push(\n                  this.batchService.addToBatch(batchId, RequestBuilder.withAddKeystore(this.type, data))\n                    .map(response => {\n                      if (response.code !== ResponseCode.OK) {\n                        key.hasError = true;\n                      }\n                      else {\n                        this.created.emit({value: data.id, reload: this.reloadAfterCreation});\n                      }\n                      return response;\n                    })\n                );\n              });\n              this.isBusyCounter++;\n              Observable.forkJoin(requests)\n                .finally(() => this.isBusyCounter--)\n                .subscribe((responses: Array<any>) => {\n                    const failedResponses = responses.filter(response => response.code !== ResponseCode.OK);\n                    if (failedResponses.length > 0) {\n                      this.error = failedResponses[0];\n                    }\n                    else {\n                      this.closeModal();\n                    }\n                  },\n                  error => console.log(error));\n              this.batchService.initiateRequest(batchId);\n            }\n          },\n            error => console.log(error));\n      }\n    }\n  }\n\n  onBack() {\n    this.currentStep--;\n  }\n\n  openKeyDetailsModal(key: any) {\n    this.selectedKey = key;\n    this.isKeyDetailsModalHidden = false;\n    this.modalService.addOpenedModal('KeyDetailsModal', this, 'closeKeyDetailsModal');\n  }\n\n  closeKeyDetailsModal() {\n    this.isKeyDetailsModalHidden = true;\n    this.modalService.removeOpenedModal('KeyDetailsModal');\n  }\n\n  checkIfKeysExists(keys: Array<any>): Observable<boolean> {\n    return Observable.create(observer => {\n      this.transaction.getReadTransaction()\n        .then(transactionId => {\n          const batchId = this.batchService.createBatch();\n          const requests = keys.map(key => {\n            return this.batchService.addToBatch(batchId,\n              RequestBuilder.withExists(`${this.url}{${key.commonName}}`, transactionId))\n              .map(response => {\n                if (response.code === ResponseCode.OK && response.data.value) {\n                  key.hasError = true;\n                  return {exists: true};\n                }\n                else {\n                  return {exists: false};\n                }\n              });\n          });\n          Observable.forkJoin(requests)\n            .finally(() => observer.complete())\n            .subscribe(responses => {\n              observer.next(responses.some(response => response.exists));\n            },\n              error => observer.error(error));\n          this.batchService.initiateRequest(batchId);\n        });\n\n    });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(revision 24f864a156d420a10c796affe1d26b8f38e2133e)
+++ src/app/shared/components/modals/facilities/trust-store-modal/trust-store-modal.component.ts	(date 1541686625000)
@@ -68,6 +68,8 @@
   selectedMethod: TrustStoreMethod = TrustStoreMethod.TEXT;
   currentStep: number = 1;
   selectedKey: any;
+  callback: string;
+  caller: any;
   isKeyDetailsModalHidden: boolean = true;
   isHostsDropdownShown: boolean;
 
@@ -98,13 +100,15 @@
     this.isBusyCounter = 0;
   }
 
-  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean) {
+  public static open(title: string, type: string, url: string, reloadAfterCreation: boolean, callback: string, caller: any) {
     let self = TrustStoreModal.modal;
     self.title = title;
     self.url = url;
     self.error = null;
     self.type = type;
     self.reloadAfterCreation = reloadAfterCreation;
+    self.callback = callback;
+    self.caller = caller;
     self.paramKey = self.sharedService.getSelectedParam(type + '-facilities');
     self.data = {};
     self.hostData = {};
@@ -299,6 +303,9 @@
                       }
                       else {
                         this.created.emit({value: data.id, reload: this.reloadAfterCreation});
+                        if (this.callback && this.caller && data.id) {
+                          this.caller[this.callback](data.id);
+                        }
                       }
                       return response;
                     })
Index: src/app/oauth/components/apps/new-client/client.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { BatchOperationsService } from '../../../../core/services/batch-operations.service';\nimport { ConfigService } from '../../../../core/services/config.service';\nimport { DataResolverService } from '../../../../core/services/data-resolver.service';\nimport { ElementHandlerService } from '../../../../core/services/element-handler.service';\nimport { EndpointsService } from '../../../../core/services/endpoints';\nimport { HttpApiService } from '../../../../core/services/http-api.service';\nimport { ModalService } from '../../../../core/services/modal.service';\nimport { NavigationType } from '../../../../core/services/navigation-type.enum';\nimport { NavigationService } from '../../../../core/services/navigation.service';\nimport { RequestBuilder } from '../../../../core/services/request.builder';\nimport { ResponseCode } from '../../../../core/services/ResponseCode';\nimport { SharedDataService } from '../../../../core/services/shared-data.service';\nimport { TransactionService } from '../../../../core/services/transaction.service';\n\nenum MTLSConfigTab {\n  TRUST_BY_PKI,\n  TRUST_BY_PINNED_CERT\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'oauth-client',\n  templateUrl: 'client.component.html'\n})\nexport class OAuthClientComponent implements OnInit, OnDestroy {\n  readonly mTLSConfigTab = MTLSConfigTab;\n\n  @ViewChild('logoInput') logoInput;\n\n  elementsBusy$: Subscription;\n  capabilityModalTitles = ['Capabilities', 'Client Application Details', 'Client Authentication', 'User Authentication'];\n  allowedLogoFileExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg'];\n\n  result: Array<any> = [];\n  panelOptions: any = {};\n  selectedFile: any = {};\n  selectedCertificateFile: any = {};\n  error: any;\n  capabilities: any = {};\n  capabilityModalResult: any;\n  authenticators: any = {};\n  filteredAuthenticators: Array<string> = [];\n  activeNavItem: string = 'name-and-description';\n\n  isBusyCounter: number = 0;\n  fileDragActiveCounter: number = 0;\n  capabilitiesSelectedCount: number = 0;\n  currentCapabilityModalStep: number;\n\n  url: string;\n  clientName: string = '';\n  paramKey: string = 'oauth-client';\n  duplicateClientName: string;\n  authenticationProfile: string;\n  errorMessage: string;\n  capabilityErrorMessage: string;\n  authenticatorsSearchValue: string;\n  authenticatorsErrorMessage: string;\n\n  hasError: boolean;\n  showUserAuthenticator: boolean;\n  isTemplatizedDCREnabled: boolean;\n  isRequestObjectEnabled: boolean;\n  isOpenIdConnectEnabled: boolean;\n  isClientAuthenticationVisible: boolean;\n  isRequiredDCRCapabilitiesSelected: boolean;\n  isDuplicateClientModalHidden: boolean = true;\n  isCapabilitiesModalHidden: boolean = true;\n  isAuthenticatorsModalHidden: boolean = true;\n\n  ngOnInit(): any {\n    this.elementsBusy$ = this.sharedService.getElementsBusy()\n      .distinctUntilChanged()\n      .delay(0)\n      .subscribe(isBusy => {\n        if (isBusy) {\n          this.isBusyCounter++;\n        }\n        else {\n          this.isBusyCounter--;\n        }\n      });\n    this.url = this.endpoints.getOAuthClientsUrl();\n\n    this.clientName = this.sharedService.getSelectedParam(this.paramKey);\n    if (this.clientName && this.clientName.length > 0) {\n      this.url = this.url + '{' + this.clientName + '}/';\n      this.loadClientData();\n      this.isTemplatizedDynamicClientRegistrationEnabled();\n      this.checkIsRequestObjectEnabled();\n      this.checkIsOpenIdConnectEnabled();\n    }\n    else {\n      this.router.navigateByUrl('/profile/oauth/clients');\n    }\n  }\n\n  constructor(private Api: HttpApiService,\n              private Transaction: TransactionService,\n              private endpoints: EndpointsService,\n              private dataResolver: DataResolverService,\n              private sharedService: SharedDataService,\n              private configService: ConfigService,\n              private elementHandler: ElementHandlerService,\n              private modalService: ModalService,\n              private batchService: BatchOperationsService,\n              private sanitizer: DomSanitizer,\n              private router: Router,\n              private elementRef: ElementRef,\n              private navigationService: NavigationService) {\n  }\n\n  ngOnDestroy() {\n    this.sharedService.resetElementsBusyCounter();\n    this.isBusyCounter = 0;\n    this.elementsBusy$.unsubscribe();\n    this.elementRef.nativeElement.offsetParent.classList.remove('client-edit-template');\n  }\n\n  loadClientData() {\n    this.isBusyCounter++;\n    Observable.forkJoin(\n      this.configService.getOAuthClientConfig(),\n      this.configService.getOAuthCapabilityIconsConfig(),\n      this.configService.getAuthIconsConfig()\n    )\n      .subscribe((configs: Array<any>) => {\n          this.Transaction.getReadTransaction()\n            .then(transactionId => {\n\n              this.Api.postRequest(RequestBuilder.withGetValue(this.endpoints.getAuthenticationProfileLeafUrl(), transactionId))\n                .subscribe(authenticationProfile => {\n                    this.authenticationProfile = authenticationProfile.data.value;\n\n                    Observable.forkJoin(\n                      this.Api.postRequest(RequestBuilder.withExists(this.url, transactionId)),\n                      this.Api.postRequest(RequestBuilder.withGetValues(this.url, transactionId, true, 7))\n                    )\n                      .finally(() => this.isBusyCounter--)\n                      .subscribe(responses => {\n                          if (responses[0].code !== ResponseCode.OK || responses[0].data.value === false) {\n                            this.sharedService.setSelectedParam(this.paramKey, null);\n                            this.router.navigateByUrl('/profile/oauth/clients');\n                          }\n                          else {\n                            let parsedData = this.dataResolver.parseData(responses[1].data.value, configs[0], this.url);\n                            parsedData['disallowed-proof-key-challenge-methods'].items = parsedData['disallowed-proof-key-challenge-methods'].type.union[0].enumeration.map(item => {\n                              return item.label;\n                            });\n                            parsedData['allowed-authenticators'].leafrefTarget = parsedData['allowed-authenticators'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n                            parsedData['authenticator-filters'].leafrefTarget = parsedData['authenticator-filters'].leafrefTarget.replace('%profileId', this.authenticationProfile);\n                            parsedData['authenticate-user-by'].xpath_expr = parsedData['authenticate-user-by'].xpath_expr.replace('%profileId', this.sharedService.getProfile().id);\n                            parsedData['authenticate-user-by'].xpath_expr = parsedData['authenticate-user-by'].xpath_expr.replace('%profileType', this.sharedService.getProfile().type);\n                            parsedData['authenticate-user-by'].mandatory = true;\n                            parsedData['authenticate-client-by'].xpath_expr = parsedData['authenticate-client-by'].xpath_expr.replace('%profileId', this.sharedService.getProfile().id);\n                            parsedData['authenticate-client-by'].xpath_expr = parsedData['authenticate-client-by'].xpath_expr.replace('%profileType', this.sharedService.getProfile().type);\n                            parsedData['authenticate-client-by'].mandatory = true;\n\n                            const authenticationMethodItems = ['users-must-authenticate', 'clients-must-authenticate'];\n                            parsedData['authentication-method'] = {\n                              name: 'authentication-method',\n                              displayName: 'Authentication Method',\n                              items: authenticationMethodItems,\n                              mandatory: true\n                            };\n                            parsedData['verifier'].items = parsedData['verifier'].children.map(child => child.name);\n                            parsedData['verifier'].mandatory = true;\n                            parsedData['secret'].mandatory = true;\n                            parsedData['asymmetric-key'].mandatory = true;\n                            parsedData['http-client'].isFacility = true;\n                            parsedData['http-client'].facilityType = 'httpClients';\n                            parsedData['refresh-token-ttl'].info = 'The Time to Live for a Refresh token.';\n                            parsedData['redirect-uris'].mandatory = true;\n\n                            // not using config for `issuer` because its conflicting with `issuer` in `request-object`\n                            parsedData['trust'].leafs = {};\n                            parsedData['trust'].children.forEach(child => {\n                              if (child.name === 'issuer') {\n                                child.displayName = child.name;\n                                child.path = `${parsedData['trust'].path}/${child.name}`;\n                                parsedData['trust'].leafs[child.name] = child;\n                              }\n                            });\n\n                            parsedData['mutual-tls-by-proxy'].leafs = {};\n                            parsedData['mutual-tls-by-proxy'].children.forEach(child1 => {\n                              if (child1.name === 'trust') {\n                                child1.displayName = child1.name;\n                                child1.path = parsedData['mutual-tls-by-proxy'].path;\n                                child1.leafs = {};\n                                child1.children.forEach(child2 => {\n                                  child2.displayName = child2.name;\n                                  child2.path = `${child1.path}/${child2.name}`;\n                                  child1.leafs[child2.name] = child2;\n                                });\n                                parsedData['mutual-tls-by-proxy'].leafs[child1.name] = child1;\n                              }\n                            });\n                            parsedData['mutual-tls-by-proxy'].activeTab = parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].value ?\n                              MTLSConfigTab.TRUST_BY_PINNED_CERT : MTLSConfigTab.TRUST_BY_PKI;\n                            parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'].mandatory = true;\n                            parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].mandatory = true;\n\n                            this.result = parsedData;\n\n                            this.loadCapabilities(parsedData, configs[1], transactionId);\n                            this.loadAuthenticators(parsedData['allowed-authenticators'].leafrefTarget, configs[2], transactionId);\n\n                            this.isBusyCounter++;\n                            Observable.forkJoin(\n                              this.Api.postRequest(RequestBuilder.withSelectedCase(\n                                parsedData['dynamic-client-registration-template'].path, parsedData['authentication-method'].name, transactionId)),\n                              this.Api.postRequest(RequestBuilder.withGetEnvironment())\n                            )\n                              .finally(() => {\n                                this.elementHandler.markFields(parsedData);\n                                this.isBusyCounter--;\n                              })\n                              .subscribe(responses => {\n                                if (responses[0].code === ResponseCode.OK) {\n                                  parsedData['authentication-method'].value = responses[0].data.value === 'authenticate-user-by' ?\n                                    authenticationMethodItems[0] : responses[0].data.value === 'authenticate-client-by' ?\n                                      authenticationMethodItems[1] : null;\n                                  this.result['authentication-method'] = Object.assign({}, parsedData['authentication-method']);\n                                }\n                                if (responses[1].code === ResponseCode.OK) {\n                                  parsedData['template-area'].items = responses[1].data.templateAreas || [];\n                                  this.result['template-area'] = Object.assign({}, parsedData['template-area']);\n                                }\n                              });\n                          }\n                        },\n                        error => console.log(error));\n                  },\n                  error => console.log(error));\n            });\n        },\n        error => console.log(error));\n  }\n\n  @HostListener('dragenter', ['$event'])\n  public onDragEnter(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.fileDragActiveCounter++;\n  }\n\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.fileDragActiveCounter--;\n  }\n\n  @HostListener('dragover', ['$event'])\n  public onDragOver(event) {\n    if (event) {\n      event.preventDefault();\n    }\n  }\n\n  @HostListener('drop', ['$event'])\n  public onDrop(event) {\n    if (event) {\n      event.preventDefault();\n      this.fileDragActiveCounter = 0;\n    }\n  }\n\n  loadCapabilities(parsedData: any, icons: any, transactionId: number) {\n    const capabilitiesIncluded = ['assertion', 'assisted-token', 'client-credentials', 'code', 'device-authorization', 'implicit',\n      'introspection', 'resource-owner-password-credentials', 'token-exchange'];\n\n    capabilitiesIncluded.forEach(capability => {\n      if (parsedData[capability]) {\n        parsedData[capability].icon = icons[capability] || 'ion-cube';\n        this.capabilities[capability] = parsedData[capability];\n      }\n    });\n\n    this.Api.postRequest(RequestBuilder.withExists(this.capabilities['assertion'].path, transactionId))\n      .finally(() => this.onCapabilitiesChanged())\n      .subscribe(response => {\n        if (response.code === ResponseCode.OK) {\n          this.capabilities['assertion'].value = response.data.value;\n        }\n      },\n        error => console.log(error));\n  }\n\n  loadAuthenticators(path: string, icons: any, transactionId: number) {\n    this.Api.postRequest(RequestBuilder.withGetListKeys(path, transactionId))\n      .subscribe(response => {\n        if (response.code === ResponseCode.OK) {\n          const batchId = this.batchService.createBatch();\n          response.data.keys.forEach(key => {\n            const data: any = {\n              id: key.id,\n              path: `${path}{${key.id}}`\n            };\n            this.batchService.addToBatch(batchId, RequestBuilder.withSelectedCase(\n              data.path, 'authenticator-type', transactionId))\n              .subscribe(response1 => {\n                  if (response1.code === ResponseCode.OK) {\n                    let authenticatorType = response1.data.value;\n                    authenticatorType = authenticatorType.indexOf(':') > -1 ? authenticatorType.split(':')[1] : authenticatorType;\n                    const icon = icons.find(item => item.name === authenticatorType);\n                    data.icon = icon ? icon.icon : 'ion-cube';\n                    this.authenticators[key.id] = data;\n                  }\n                },\n                error => console.log(error));\n          });\n          this.batchService.initiateRequest(batchId);\n        }\n      });\n  }\n\n  sanitizeUrl(value: string) {\n    return this.sanitizer.bypassSecurityTrustUrl(value);\n  }\n\n  checkUserAuthenticationRequirements() {\n    const isRequiredCapabilitiesSelected = this.capabilities['code'].value || this.capabilities['implicit'].value ||\n      this.capabilities['assisted-token'].value || this.capabilities['device-authorization'].value;\n    this.isUserAuthenticationExists(isRequiredCapabilitiesSelected);\n  }\n\n  isUserAuthenticationExists(isRequiredCapabilitiesSelected: boolean) {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.url + 'user-authentication', transactionId))\n          .subscribe(response => {\n            if (isRequiredCapabilitiesSelected && response.data.value) {\n              this.showUserAuthenticator = true;\n              this.loadAllowedAuthenticatorsValue();\n            } else if (isRequiredCapabilitiesSelected && !response.data.value) {\n              this.createUserAuthentication();\n            } else if (!isRequiredCapabilitiesSelected && response.data.value) {\n              this.deleteUserAuthentication();\n            } else if (!isRequiredCapabilitiesSelected && !response.data.value) {\n              this.showUserAuthenticator = false;\n              this.loadAllowedAuthenticatorsValue();\n            }\n          });\n      });\n  }\n\n  createUserAuthentication() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withCreate(this.url + 'user-authentication', transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.showUserAuthenticator = true;\n              this.loadAllowedAuthenticatorsValue();\n            } else {\n              this.showUserAuthenticator = false;\n            }\n          });\n      })\n      .catch(error => {});\n  }\n\n  deleteUserAuthentication() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withDelete(this.url + 'user-authentication', transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.showUserAuthenticator = false;\n              this.loadAllowedAuthenticatorsValue();\n            } else {\n              this.showUserAuthenticator = true;\n            }\n          });\n      })\n      .catch(error => {});\n  }\n\n  loadAllowedAuthenticatorsValue() {\n    if (this.showUserAuthenticator) {\n      this.Transaction.getReadTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withGetValue(this.result['allowed-authenticators'].path, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.result['allowed-authenticators'].value = response.data.value;\n                }\n                else {\n                  this.result['allowed-authenticators'].value = [];\n                }\n              },\n              error => console.log(error));\n        });\n    }\n    else {\n      this.result['allowed-authenticators'].value = [];\n    }\n  }\n\n  isTemplatizedDynamicClientRegistrationEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getTemplatizedDynamicClientRegistrationUrl(), transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.isTemplatizedDCREnabled = response.data.value;\n            }\n          });\n      });\n  }\n\n  checkIsRequestObjectEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getOauthProfileUrl() + 'request-object', transactionId))\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.isRequestObjectEnabled = response.data.value;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  checkIsOpenIdConnectEnabled() {\n    this.Transaction.getReadTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withExists(this.endpoints.getOauthProfileUrl() + 'openid-connect', transactionId))\n          .subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.isOpenIdConnectEnabled = response.data.value;\n              }\n            },\n            error => console.log(error));\n      });\n  }\n\n  setIsClientAuthenticationVisible() {\n    // client authentication is only available when certain capabilities are enabled\n    // (i.e. (`code`, `resource-owner-password-credentials`,and dynamic-client-registration-template is not enabled) or\n    // (`client-credentials`, `introspection` or `token-exchange`))\n    this.isClientAuthenticationVisible = (\n      (this.capabilities['code'].value ||\n        this.capabilities['resource-owner-password-credentials'].value) &&\n      !this.result['dynamic-client-registration-template'].value) ||\n      (this.capabilities['client-credentials'].value ||\n        this.capabilities['token-exchange'].value ||\n        this.capabilities['introspection'].value);\n  }\n\n  setIsRequiredDCRCapabilitiesSelected() {\n    this.isRequiredDCRCapabilitiesSelected = (this.capabilities['code'] && this.capabilities['code'].value) ||\n      (this.capabilities['implicit'] && this.capabilities['implicit'].value) ||\n      (this.capabilities['assisted-token'] && this.capabilities['assisted-token'].value) ||\n      (this.capabilities['resource-owner-password-credentials'] && this.capabilities['resource-owner-password-credentials'].value) ||\n      (this.capabilities['device-authorization'] && this.capabilities['device-authorization'].value);\n  }\n\n  onDeviceAuthorizationChanged() {\n    if (this.capabilities['device-authorization'].value && this.isTemplatizedDCREnabled && !this.result['dynamic-client-registration-template'].value) {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withCreate(this.result['dynamic-client-registration-template'].path, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.result['dynamic-client-registration-template'].value = true;\n                  this.result['authentication-method'].value = this.result['authentication-method'].items[1];\n                  this.result['dynamic-client-registration-template'] = Object.assign({}, this.result['dynamic-client-registration-template']);\n                  this.result['authentication-method'] = Object.assign({}, this.result['authentication-method']);\n                }\n              },\n              error => console.log(error));\n        })\n      .catch(error => {});\n    }\n  }\n\n  onVerifierChanged(data: any) {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        if (data.value === 'mutual-tls-by-proxy') {\n          this.Api.postRequest(RequestBuilder.withExists(this.result['mutual-tls-by-proxy'].path, transactionId))\n            .subscribe(response => {\n                if (response.code !== ResponseCode.OK || !response.data.value) {\n                  this.Api.postRequest(RequestBuilder.withCreate(this.result['mutual-tls-by-proxy'].path, transactionId))\n                    .subscribe(response1 => {\n                        if (response1.code !== ResponseCode.OK) {\n                          this.result['verifier'].hasError = true;\n                        }\n                        else {\n                          this.sharedService.incrementChangeCount(this.result['mutual-tls-by-proxy'].path);\n                          this.setClientDNValue();\n                        }\n                      },\n                      error => console.log(error));\n                }\n                else {\n                  this.setClientDNValue();\n                }\n              },\n              error => console.log(error));\n        }\n        else {\n          this.Api.postRequest(RequestBuilder.withDelete(this.result['mutual-tls-by-proxy'].path, transactionId))\n            .subscribe(response => {\n                if (response.code !== ResponseCode.OK) {\n                  this.result['verifier'].hasError = true;\n                }\n                else {\n                  this.sharedService.incrementChangeCount(this.result['mutual-tls-by-proxy'].path);\n                }\n              },\n              error => console.log(error));\n        }\n    }).catch(error => {});\n  }\n\n  setClientDNValue() {\n    const clientDN = this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'];\n    const trustedCA = this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'];\n    const clientCertificate = this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'];\n    if (clientDN.value) {\n      this.result['mutual-tls-by-proxy'].activeTab = MTLSConfigTab.TRUST_BY_PKI;\n      this.setValue(clientDN, clientDN.value)\n        .subscribe(response => {\n          if (response.error) {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'].hasError = true;\n          }\n          else {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'] = Object.assign({}, clientDN);\n          }\n        },\n          error => console.log(error));\n    }\n    if (trustedCA.value) {\n      this.result['mutual-tls-by-proxy'].activeTab = MTLSConfigTab.TRUST_BY_PKI;\n      this.setValue(trustedCA, trustedCA.value)\n        .subscribe(response => {\n          if (response.error) {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'].hasError = true;\n          }\n          else {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'] = Object.assign({}, trustedCA);\n          }\n        },\n          error => console.log(error));\n    }\n    if (clientCertificate.value) {\n      this.result['mutual-tls-by-proxy'].activeTab = MTLSConfigTab.TRUST_BY_PINNED_CERT;\n      this.setValue(clientCertificate, clientCertificate.value)\n        .subscribe(response => {\n          if (response.error) {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].hasError = true;\n          }\n          else {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'] = Object.assign({}, clientCertificate);\n          }\n        },\n          error => console.log(error));\n    }\n  }\n\n  onDCRTemplateChanged(value: boolean) {\n    if (value) {\n      this.elementRef.nativeElement.offsetParent.classList.add('client-edit-template');\n    }\n    else {\n      this.elementRef.nativeElement.offsetParent.classList.remove('client-edit-template');\n    }\n  }\n\n  onDuplicateClient() {\n    this.isDuplicateClientModalHidden = false;\n    this.modalService.addOpenedModal('DuplicateClientModal', this, 'closeDuplicateClientModal');\n    SharedDataService.lockScroll();\n  }\n\n  scrollToAnchor(anchorElement, activeNavItem: string) {\n    // adding timeout so change detection runs before scrolling\n    setTimeout(() => {\n      window.scrollTo({\n        top: anchorElement.offsetTop - 60,\n        behavior: 'smooth'\n      });\n    }, 10);\n\n    this.activeNavItem = activeNavItem;\n  }\n\n  closeDuplicateClientModal() {\n    this.errorMessage = null;\n    this.duplicateClientName = '';\n    this.isDuplicateClientModalHidden = true;\n    this.modalService.removeOpenedModal('DuplicateClientModal');\n    SharedDataService.unlockScroll();\n  }\n\n  duplicateClient() {\n    this.errorMessage = null;\n    if (this.duplicateClientName.match(/\\s/g)) {\n      this.errorMessage = 'Name cannot contain space.';\n    }\n    else {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          const destinationPath = `${this.endpoints.getOAuthClientsUrl()}{${this.duplicateClientName}}/`;\n          this.Api.postRequest(RequestBuilder.withDuplicate(this.url, destinationPath, transactionId))\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedService.incrementChangeCount(destinationPath);\n                  this.sharedService.setSelectedParam(this.paramKey, this.duplicateClientName);\n                  this.closeDuplicateClientModal();\n                  NavigationService.reload(this.router);\n                }\n                else {\n                  this.errorMessage = response;\n                }\n              },\n              error => console.log(error));\n        })\n      .catch(error => {});\n    }\n  }\n\n  onFileDrop(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.getFileData(event.dataTransfer.files, true);\n    this.fileDragActiveCounter = 0;\n  }\n\n  getFileData(fileList: Array<File>, isFileDnd?: boolean) {\n    this.error = null;\n    if (fileList.length === 1) {\n      const file: File = fileList[0];\n      const ext = file.name.slice((file.name.lastIndexOf('.') - 1 >>> 0) + 1); // extracting . with the extension as well\n      if (this.allowedLogoFileExtensions.indexOf(ext) > -1) {\n        this.selectedFile.name = file.name;\n        this.selectedFile.ext = ext;\n        let fileReader = new FileReader();\n        fileReader.onload = (event: any) => {\n          this.result['logo'].value = event.target.result;\n          this.updateLogo();\n        };\n        fileReader.readAsDataURL(file);\n      }\n      else {\n        this.error = `Only files with following extensions are allowed: ${this.allowedLogoFileExtensions.join(', ')}.`;\n      }\n    }\n    else {\n      this.error = 'Multiple files are not allowed.';\n    }\n    if (isFileDnd) {\n      this.logoInput.nativeElement.value = '';\n    }\n  }\n\n  updateLogo() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withSetValue(this.result['logo'].value, this.result['logo'].path, transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.sharedService.incrementChangeCount(this.result['logo'].path);\n            }\n            else {\n              this.error = response;\n              this.result['logo'].value = this.result['logo'].default;\n            }\n          });\n      })\n      .catch(error => {});\n  }\n\n  removeLogo() {\n    this.Transaction.getWriteTransaction()\n      .then(transactionId => {\n        this.Api.postRequest(RequestBuilder.withDelete(this.result['logo'].path, transactionId))\n          .subscribe(response => {\n            if (response.code === ResponseCode.OK) {\n              this.sharedService.incrementChangeCount(this.result['logo'].path);\n              this.result['logo'].value = null;\n            }\n            else {\n              this.error = response;\n            }\n          });\n      })\n      .catch(error => {});\n  }\n\n  getCertificateFileData(files: Array<File>, data: any, canUpdate: boolean) {\n    this.selectedCertificateFile.error = null;\n    if (files.length === 1) {\n      const file: File = files[0];\n      this.selectedCertificateFile.name = file.name;\n      const fileReader = new FileReader();\n      fileReader.onload = (event: any) => {\n        const index = event.target.result.indexOf('base64,') + 7;\n        const fileData = event.target.result.substring(index);\n        this.getTrustStoreData(fileData, data, canUpdate);\n      };\n      fileReader.readAsDataURL(file);\n    }\n    else {\n      this.selectedCertificateFile = {};\n    }\n  }\n\n  getTrustStoreData(fileData: string, data: any, canUpdate: boolean) {\n    this.Api.postRequest(RequestBuilder.withGetTruststore(null, fileData))\n      .subscribe(response => {\n        if (response.code === ResponseCode.OK) {\n          if (response.data.chains.length > 0) {\n            const key = response.data.chains[0].keys[response.data.chains[0].keys.length - 1];\n            if (key.id && isNaN(key.id)) {\n              if (!canUpdate) {\n                data.value = key.id;\n              }\n              else {\n                this.setValue(data, key.id)\n                  .subscribe(response1 => {\n                    if (response1.error) {\n                      data.hasError = true;\n                      this.selectedCertificateFile.error = response1.response;\n                    }\n                  },\n                    error => console.log(error));\n              }\n            }\n            else {\n              this.selectedCertificateFile.error = 'No key found in selected file.';\n            }\n          }\n          else {\n            this.selectedCertificateFile.error = 'No key found in selected file.';\n          }\n        }\n        else {\n          this.selectedCertificateFile.error = 'An error occurred processing the file. Ensure that it is correct, and try again.';\n        }\n      },\n        error => console.log(error));\n  }\n\n  onCapabilitiesChanged() {\n    this.capabilitiesSelectedCount = Object.keys(this.capabilities).filter(key => this.capabilities[key].value).length;\n    this.checkUserAuthenticationRequirements();\n    this.onDeviceAuthorizationChanged();\n    this.setIsClientAuthenticationVisible();\n    this.setIsRequiredDCRCapabilitiesSelected();\n  }\n\n  removeCapability(name: string) {\n    let request;\n    if (name === 'assertion') {\n      request = this.deletePath(this.capabilities[name]);\n    }\n    else {\n      request = this.setValue(this.capabilities[name], false);\n    }\n    request.subscribe(response => {\n      if (!response.error) {\n        this.onCapabilitiesChanged();\n      }\n    });\n  }\n\n  removeAllowedAuthenticator(name: string) {\n    const newValue = this.result['allowed-authenticators'].value.filter(value => value !== name);\n    let observable;\n    if (newValue.length === 0) {\n      observable = this.deletePath(this.result['allowed-authenticators']);\n    }\n    else {\n      observable = this.setValue(this.result['allowed-authenticators'], newValue);\n    }\n    observable.subscribe(() => {\n    });\n  }\n\n  navigateToAuthenticator(authenticatorId: string) {\n    const path = `${this.result['allowed-authenticators'].leafrefTarget}{${authenticatorId}}`;\n    this.navigationService.navigateToUrl({url: path}, NavigationType.CHANGE);\n  }\n\n  openCapabilitiesModal() {\n    Object.keys(this.capabilities).forEach(key => {\n      this.capabilities[key].isSelected = this.capabilities[key].value;\n      this.capabilities[key].isHidden = false;\n    });\n    if (this.result['dynamic-client-registration-template'].value) {\n      this.capabilities['assertion'].isHidden = true;\n      this.capabilities['client-credentials'].isHidden = true;\n      this.capabilities['introspection'].isHidden = true;\n      this.capabilities['token-exchange'].isHidden = true;\n    }\n    Object.keys(this.authenticators).forEach(key => {\n      this.authenticators[key].isSelected = false;\n    });\n    this.result['allowed-authenticators'].value.forEach(id => {\n      this.authenticators[id].isSelected = true;\n    });\n    this.authenticatorsSearchValue = '';\n    this.filteredAuthenticators = Object.keys(this.authenticators);\n    this.currentCapabilityModalStep = 1;\n    this.capabilityModalResult = {};\n    this.selectedCertificateFile = {};\n    this.isCapabilitiesModalHidden = false;\n    this.modalService.addOpenedModal('CapabilitiesModal', this, 'closeCapabilitiesModal');\n    SharedDataService.lockScroll();\n  }\n\n  closeCapabilitiesModal() {\n    this.capabilityErrorMessage = null;\n    this.selectedCertificateFile = {};\n    this.onCapabilitiesChanged();\n    this.isCapabilitiesModalHidden = true;\n    this.modalService.removeOpenedModal('CapabilitiesModal');\n    SharedDataService.unlockScroll();\n  }\n\n  updateAllCapabilities(property: string, value: any) {\n    Object.keys(this.capabilities).forEach(key => {\n      if (!this.capabilities[key].isHidden) {\n        this.capabilities[key][property] = value;\n      }\n    });\n  }\n\n  onNext() {\n    this.capabilityErrorMessage = null;\n    switch (this.currentCapabilityModalStep) {\n      case 1:\n        this.currentCapabilityModalStep++;\n        this.checkStep2Elements();\n        break;\n      case 2:\n        if (this.capabilityModalResult['redirect-uris'] && this.capabilityModalResult['redirect-uris'].value.length === 0) {\n          this.capabilityErrorMessage = 'Please add at least one redirect URI.';\n        }\n        else {\n          this.currentCapabilityModalStep++;\n          this.checkStep3Elements();\n        }\n        break;\n      case 3:\n        if (!this.capabilityModalResult['verifier'].value) {\n          this.capabilityErrorMessage = 'Please select an authentication method.';\n        }\n        else if (this.capabilityModalResult['verifier'].value === 'secret' && !this.capabilityModalResult['secret'].value) {\n          this.capabilityErrorMessage = 'Please enter a secret.';\n        }\n        else if (this.capabilityModalResult['verifier'].value === 'asymmetric-key' && !this.capabilityModalResult['asymmetric-key'].value) {\n          this.capabilityErrorMessage = 'Please select an asymmetric key.';\n        }\n        else if (this.capabilityModalResult['verifier'].value === 'mutual-tls-by-proxy' &&\n          ((this.capabilityModalResult['mutual-tls-by-proxy'].activeTab === MTLSConfigTab.TRUST_BY_PKI &&\n            (!this.capabilityModalResult['client-dn'].value || !this.capabilityModalResult['trusted-ca'].value)) ||\n            (this.capabilityModalResult['mutual-tls-by-proxy'].activeTab === MTLSConfigTab.TRUST_BY_PINNED_CERT &&\n              !this.capabilityModalResult['client-certificate'].value))) {\n          this.capabilityErrorMessage = 'Please configure mutual TLS by proxy settings.';\n        }\n        else {\n          this.currentCapabilityModalStep++;\n          this.checkStep4Elements();\n        }\n        break;\n      case 4:\n        this.setCapabilityValues();\n        break;\n    }\n  }\n\n  onBack() {\n    this.capabilityErrorMessage = null;\n    switch (this.currentCapabilityModalStep) {\n      case 2:\n        this.currentCapabilityModalStep = 1;\n        break;\n      case 3:\n        if (this.capabilityModalResult['redirect-uris'] || this.capabilityModalResult['allowed-origins']) {\n          this.currentCapabilityModalStep = 2;\n        }\n        else {\n          this.currentCapabilityModalStep = 1;\n        }\n        break;\n      case 4:\n        this.currentCapabilityModalStep = 3;\n        if (!this.capabilityModalResult['verifier']) {\n          this.onBack();\n        }\n        break;\n    }\n  }\n\n  checkStep2Elements() {\n    let goToNextStep = true;\n    if (this.capabilities['code'].isSelected || this.capabilities['implicit'].isSelected ||\n      this.capabilities['assisted-token'].isSelected || this.capabilities['device-authorization'].isSelected) {\n      if (!this.result['allowed-origins'].value || this.result['allowed-origins'].value.length === 0) {\n        this.capabilityModalResult['allowed-origins'] = this.capabilityModalResult['allowed-origins'] ||\n          {...this.result['allowed-origins'], value: []};\n        goToNextStep = false;\n      }\n      else {\n        delete this.capabilityModalResult['allowed-origins'];\n      }\n      if ((this.capabilities['code'].isSelected || this.capabilities['implicit'].isSelected) &&\n        (!this.result['redirect-uris'].value || this.result['redirect-uris'].value.length === 0)) {\n        this.capabilityModalResult['redirect-uris'] = this.capabilityModalResult['redirect-uris'] ||\n          {...this.result['redirect-uris'], value: []};\n        goToNextStep = false;\n      }\n      else {\n        delete this.capabilityModalResult['redirect-uris'];\n      }\n    }\n    if (goToNextStep) {\n      delete this.capabilityModalResult['allowed-origins'];\n      delete this.capabilityModalResult['redirect-uris'];\n      this.currentCapabilityModalStep++;\n      this.checkStep3Elements();\n    }\n  }\n\n  checkStep3Elements() {\n    let goToNextStep = true;\n    if (((this.capabilities['code'].isSelected || this.capabilities['resource-owner-password-credentials'].isSelected) &&\n      !this.result['dynamic-client-registration-template'].value) ||\n      (this.capabilities['client-credentials'].isSelected || this.capabilities['token-exchange'].isSelected ||\n        this.capabilities['introspection'].isSelected)) {\n      if (!this.result['verifier'].value ||\n        (!this.result['secret'].value && !this.result['asymmetric-key'].value &&\n          (\n            (!this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'].value &&\n              !this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'].value) ||\n            (!this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].value)\n          )\n        )) {\n        this.capabilityModalResult['verifier'] = this.capabilityModalResult['verifier'] ||\n          {...this.result['verifier'], value: null};\n        this.capabilityModalResult['secret'] = this.capabilityModalResult['secret'] ||\n          {...this.result['secret'], value: null};\n        this.capabilityModalResult['asymmetric-key'] = this.capabilityModalResult['asymmetric-key'] ||\n          {...this.result['asymmetric-key'], value: null, isFacility: true, facilityType: 'addSignatureVerificationKey'};\n        this.capabilityModalResult['mutual-tls-by-proxy'] = this.capabilityModalResult['mutual-tls-by-proxy'] ||\n          {...this.result['mutual-tls-by-proxy'], value: null};\n        this.capabilityModalResult['client-dn'] = this.capabilityModalResult['client-dn'] ||\n          {...this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'], value: null};\n        this.capabilityModalResult['trusted-ca'] = this.capabilityModalResult['trusted-ca'] ||\n          {...this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'], value: null};\n        this.capabilityModalResult['client-certificate'] = this.capabilityModalResult['client-certificate'] ||\n          {...this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'], value: null};\n        goToNextStep = false;\n      }\n    }\n    if (goToNextStep) {\n      delete this.capabilityModalResult['verifier'];\n      delete this.capabilityModalResult['secret'];\n      delete this.capabilityModalResult['asymmetric-key'];\n      delete this.capabilityModalResult['mutual-tls-by-proxy'];\n      delete this.capabilityModalResult['client-dn'];\n      delete this.capabilityModalResult['trusted-ca'];\n      delete this.capabilityModalResult['client-certificate'];\n      this.currentCapabilityModalStep++;\n      this.checkStep4Elements();\n    }\n  }\n\n  checkStep4Elements() {\n    let goToNextStep = true;\n    if ((this.capabilities['code'].isSelected || this.capabilities['implicit'].isSelected ||\n      this.capabilities['assisted-token'].isSelected || this.capabilities['device-authorization'].isSelected) &&\n      (!this.result['allowed-authenticators'].value || this.result['allowed-authenticators'].value.length === 0)) {\n      this.capabilityModalResult['allowed-authenticators'] = this.capabilityModalResult['allowed-authenticators'] ||\n        {...this.result['allowed-authenticators'], value: []};\n      goToNextStep = false;\n    }\n    if (goToNextStep) {\n      delete this.capabilityModalResult['allowed-authenticators'];\n      this.currentCapabilityModalStep++;\n      this.setCapabilityValues();\n    }\n  }\n\n  setCapabilityValues() {\n    this.Transaction.getWriteTransaction()\n      .then((transactionId: number) => {\n        const requests = [];\n        const batchId = this.batchService.createBatch();\n        Object.keys(this.capabilities).forEach(key => {\n          if (this.capabilities[key].isSelected !== this.capabilities[key].value) {\n            let request;\n            if (key === 'assertion') {\n              request = this.batchService.addToBatch(batchId,\n                this.capabilities[key].isSelected ?\n                  RequestBuilder.withCreate(this.capabilities[key].path, transactionId) :\n                  RequestBuilder.withDelete(this.capabilities[key].path, transactionId));\n            }\n            else {\n              request = this.batchService.addToBatch(batchId, RequestBuilder.withSetValue(this.capabilities[key].isSelected,\n                this.capabilities[key].path, transactionId));\n            }\n            requests.push(request);\n            request.subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.capabilities[key].value = this.capabilities[key].isSelected;\n                  this.sharedService.incrementChangeCount(this.capabilities[key].path);\n                }\n                else {\n                  this.capabilityErrorMessage = response;\n                }\n              },\n              error => console.log(error));\n          }\n        });\n        if (requests.length > 0) {\n          Observable.forkJoin(requests)\n            .finally(() => this.setCapabilityModalResultValues(transactionId))\n            .subscribe(responses => {\n            });\n        }\n        else {\n          this.setCapabilityModalResultValues(transactionId);\n        }\n        this.batchService.initiateRequest(batchId);\n      })\n      .catch(error => {});\n  }\n\n  setCapabilityModalResultValues(transactionId: number) {\n    if (Object.keys(this.capabilityModalResult).length > 0) {\n      const requests = [];\n      const batchId = this.batchService.createBatch();\n      Object.keys(this.capabilityModalResult).forEach(key => {\n        if (key === 'verifier') {\n          this.result[key].value = this.capabilityModalResult[key].value;\n          if (this.capabilityModalResult[key].value === 'mutual-tls-by-proxy') {\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'].value = this.capabilityModalResult['client-dn'].value;\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['trusted-ca'].value = this.capabilityModalResult['trusted-ca'].value;\n            this.result['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].value = this.capabilityModalResult['client-certificate'].value;\n            this.onVerifierChanged({value: this.capabilityModalResult[key].value});\n          }\n        }\n        else if (key === 'allowed-authenticators') {\n          if (this.showUserAuthenticator) {\n            this.updateAuthenticatorsValue();\n          }\n          else {\n            const path = this.url + 'user-authentication';\n            const request = this.batchService.addToBatch(batchId, RequestBuilder.withCreate(\n              path, transactionId));\n            requests.push(request);\n            request.subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedService.incrementChangeCount(path);\n                  this.updateAuthenticatorsValue();\n                }\n              },\n              error => console.log(error));\n          }\n        }\n        else if (key !== 'client-dn' && key !== 'trusted-ca' && key !== 'client-certificate' && this.capabilityModalResult[key].value) {\n          const request = this.batchService.addToBatch(batchId, RequestBuilder.withSetValue(\n            this.capabilityModalResult[key].value, this.capabilityModalResult[key].path, transactionId));\n          requests.push(request);\n          request.subscribe(response => {\n              if (response.code === ResponseCode.OK) {\n                this.result[key].value = this.capabilityModalResult[key].value;\n                this.sharedService.incrementChangeCount(this.capabilityModalResult[key].path);\n              }\n              else {\n                this.result[key].hasError = true;\n              }\n            },\n            error => console.log(error));\n        }\n      });\n\n      Observable.forkJoin(requests)\n        .finally(() => this.closeCapabilitiesModal())\n        .subscribe(responses => {\n        });\n\n      this.batchService.initiateRequest(batchId);\n    }\n    else {\n      this.closeCapabilitiesModal();\n    }\n  }\n\n  openAuthenticatorsModal() {\n    Object.keys(this.authenticators).forEach(key => {\n      this.authenticators[key].isSelected = false;\n    });\n    this.result['allowed-authenticators'].value.forEach(id => {\n      this.authenticators[id].isSelected = true;\n    });\n    this.authenticatorsSearchValue = '';\n    this.filteredAuthenticators = Object.keys(this.authenticators);\n    this.isAuthenticatorsModalHidden = false;\n    this.modalService.addOpenedModal('AuthenticatorsModal', this, 'closeAuthenticatorsModal');\n    SharedDataService.lockScroll();\n  }\n\n  closeAuthenticatorsModal() {\n    this.authenticatorsErrorMessage = null;\n    this.isAuthenticatorsModalHidden = true;\n    this.modalService.removeOpenedModal('AuthenticatorsModal');\n    SharedDataService.unlockScroll();\n  }\n\n  onAuthenticatorsSearchValueChanged() {\n    if (this.authenticatorsSearchValue) {\n      this.filteredAuthenticators = Object.keys(this.authenticators).filter(authenticatorId => {\n        return authenticatorId.toLowerCase().indexOf(this.authenticatorsSearchValue) > -1;\n      });\n    }\n    else {\n      this.filteredAuthenticators = Object.keys(this.authenticators);\n    }\n  }\n\n  updateAllAuthenticators(property: string, value: any) {\n    this.filteredAuthenticators.forEach(key => {\n      this.authenticators[key][property] = value;\n    });\n  }\n\n  updateAuthenticatorsValue() {\n    this.authenticatorsErrorMessage = null;\n    const newValue = Object.keys(this.authenticators).filter(key => this.authenticators[key].isSelected);\n    if (newValue !== this.result['allowed-authenticators'].value) {\n      let observable;\n      if (newValue.length === 0) {\n        observable = this.deletePath(this.result['allowed-authenticators']);\n      }\n      else {\n        observable = this.setValue(this.result['allowed-authenticators'], newValue);\n      }\n      observable.subscribe(response => {\n          if (response.error) {\n            this.authenticatorsErrorMessage = response.response;\n          }\n          else {\n            this.closeAuthenticatorsModal();\n          }\n        },\n        error => console.log(error));\n    }\n  }\n\n  private setValue(data: any, value: any) {\n    return Observable.create(observer => {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withSetValue(value, data.path, transactionId))\n            .finally(() => observer.complete())\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  data.value = value;\n                  this.sharedService.incrementChangeCount(data.path);\n                  observer.next({error: false, response: response});\n                }\n                else {\n                  observer.next({error: true, response: response});\n                }\n              },\n              error => {\n                console.log(error);\n                observer.error(error);\n              });\n        }).catch(error => {});\n    });\n  }\n\n  private deletePath(data: any) {\n    return Observable.create(observer => {\n      this.Transaction.getWriteTransaction()\n        .then(transactionId => {\n          this.Api.postRequest(RequestBuilder.withDelete(data.path, transactionId))\n            .finally(() => observer.complete())\n            .subscribe(response => {\n                if (response.code === ResponseCode.OK) {\n                  this.sharedService.incrementChangeCount(data.path);\n                  data.value = Array.isArray(data.value) ? [] : null;\n                  observer.next({error: false, response: response});\n                }\n                else {\n                  observer.next({error: true, response: response});\n                }\n              },\n              error => {\n                console.log(error);\n                observer.error(error);\n              });\n        })\n        .catch(error => {});\n    });\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/oauth/components/apps/new-client/client.component.ts	(revision 24f864a156d420a10c796affe1d26b8f38e2133e)
+++ src/app/oauth/components/apps/new-client/client.component.ts	(date 1541686685000)
@@ -136,10 +136,11 @@
               this.Api.postRequest(RequestBuilder.withGetValue(this.endpoints.getAuthenticationProfileLeafUrl(), transactionId))
                 .subscribe(authenticationProfile => {
                     this.authenticationProfile = authenticationProfile.data.value;
-
+                    const profileId = this.sharedService.getProfile().id;
                     Observable.forkJoin(
                       this.Api.postRequest(RequestBuilder.withExists(this.url, transactionId)),
-                      this.Api.postRequest(RequestBuilder.withGetValues(this.url, transactionId, true, 7))
+                      this.Api.postRequest(RequestBuilder.withGetValues(this.url, transactionId, true, 7)),
+                      this.Api.postRequest(RequestBuilder.withQuery(`count(/profiles/profile[id='${profileId}']/settings/authorization-service/dynamic-client-registration/non-templatized/authenticate-user-by[contains(text(),'${this.clientName}']) + count(/profiles/profile[id='${profileId}']/settings/authorization-service/dynamic-client-registration/non-templatized/authenticate-client-by[contains(text(),'${this.clientName}'])`, transactionId))
                     )
                       .finally(() => this.isBusyCounter--)
                       .subscribe(responses => {
@@ -205,6 +206,8 @@
                               MTLSConfigTab.TRUST_BY_PINNED_CERT : MTLSConfigTab.TRUST_BY_PKI;
                             parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-dn'].mandatory = true;
                             parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].mandatory = true;
+                            parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].isFacility = true;
+                            parsedData['mutual-tls-by-proxy'].leafs['trust'].leafs['client-certificate'].facilityType = true;
 
                             this.result = parsedData;
 
